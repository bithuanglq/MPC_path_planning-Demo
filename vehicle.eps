%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: <65B0><5EFA> Microsoft PowerPoint <6F14><793A><6587><7A3F>.pdf
%%Creator: Adobe Acrobat 19.10.0
%%For: 27286
%%CreationDate: 2023/8/26, 17:03:06
%%BoundingBox: 0 0 312 199
%%HiResBoundingBox: 0 0 311.7601 198.3600
%%CropBox: 0 0 311.7601 198.3600
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1094 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c016 91.163616, 2018/10/29-16:58:49        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2023-08-26T17:02:53+08:00"
   xmp:CreateDate="2023-08-26T17:02:52+08:00"
   xmp:MetadataDate="2023-08-26T17:02:53+08:00"
   xmp:CreatorTool="Acrobat PDFMaker 19 PowerPoint 版"
   xmpMM:DocumentID="uuid:9086e084-a1b8-49cf-ba57-94989f70b155"
   xmpMM:InstanceID="uuid:9ef74d3b-9c66-448a-9784-445ec963ab5b"
   dc:format="application/pdf"
   pdf:Producer="Adobe PDF Library 19.10.131">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">PowerPoint 演示文稿</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Huang Liqun</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
<<
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 124 
/Lookup <~
z!W`<%"9JW)"Tni,"p>&/'Ft]S'b:iU,T@^',odp*-QX?0.3BZ4.Nfl7/KuD>2_-EZ3@ui`81bDR:Hq)
E:bD_J=@Pg]=\)*a?VO8q@89Su@S]f$>rDZ_@QtS-D-:$EE*QZOBg)LsFC/G\I;!:&Gt7o8J88p2RZ%4
HKi7sOM0!\TMKEnXP@P^7Nd5gkO*PsoP[4=iUM'W-SVMq_Z$mhsSr/:iT8SLnTT"b!ToFt&U5k.*U5k1
-]SId5Z??3JW0NNS_1hpiWgK&g`K(!!Xdkf-d@UC=fVKSib`r/.ba8A1cC"Y4aclc*b`Vr+b`i)-ba&5
/cBSA0c'A>0c'88/cBSA0cBnS3cBeM2cBeM2c^+V3c'88/cBSA0cBSA0c]nJ1cBnS3c^+V3c^+V3cBSA
0c]nJ1c]nJ1c^+V3d$F_4c]\>/c^+V3d?ah5d?st7e"$I=d?ah5jKp-7c#s3iduj\2e<g49hl6YV[%sF
oj/r@^[&'LseWp18o"l+C\#?.;r6$AjrQZVls3N2#s4][Q]r\6is5-pN^TFNu^TFHs^TFHs^TFHs^TFH
sk/2MS^TFHsj2$D\e@V-m^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr~>
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -198.36 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 198.36 li
311.76 198.36 li
311.76 0 li
cp
clp
gsave
0 198.36 mo
312 198.36 li
312 -.64 li
0 -.64 li
0 198.36 li
clp
0 198.36 mo
311.76 198.36 li
311.76 0 li
0 0 li
0 198.36 li
false sop
/1 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /1 /CSD get_res sepcs
0 sep
f
1 lw
0 lc
0 lj
8 ml
[] 0 dsh
true sadj
16.8 195.855 mo
16.8 7.5201 li
1 /1 /CSD get_res sepcs
1 sep
@
19.8004 8.5199 mo
16.8004 2.5199 li
13.8004 8.5199 li
cp
ef
6.36 187.56 mo
285.799 187.56 li
@
284.799 184.56 mo
290.799 187.56 li
284.799 190.56 li
cp
ef
gsave
132.258 20.349 mo
173.208 48.085 li
141.441 94.986 li
125.558 118.436 li
84.607 90.7 li
132.258 20.349 li
clp
125.558 118.436 mo
84.607 90.7 li
132.258 20.349 li
173.208 48.0855 li
150.16 82.1133 li
150.16 81.82 li
146.16 81.82 li
146.16 82.82 li
149.681 82.82 li
141.441 94.986 li
125.558 118.436 li
111 95.76 mo
111 95.76 li
140.76 95.76 li
140.76 85.68 li
140.76 82.82 li
143.16 82.82 li
143.16 81.82 li
140.76 81.82 li
140.76 69.96 li
135.236 69.96 li
137.36 66.9378 li
136.542 66.3628 li
134.242 69.6353 li
134.704 69.96 li
126.36 69.96 li
134.704 69.96 li
135.06 70.2103 li
135.236 69.96 li
140.76 69.96 li
140.76 81.82 li
140.76 78.96 li
128.91 78.96 li
129.309 78.3916 li
128.491 77.8165 li
127.687 78.96 li
126.36 78.96 li
126.36 69.96 li
126.36 78.96 li
111 78.96 li
126.36 78.96 li
126.36 80.8484 li
126.191 81.089 li
126.36 81.2078 li
126.36 81.82 li
125.16 81.82 li
125.16 82.82 li
126.36 82.82 li
126.36 85.68 li
133.78 85.68 li
133.78 91.9697 li
136.262 91.9697 li
136.262 85.68 li
140.76 85.68 li
140.76 95.76 li
111 95.76 li
111 78.96 li
111 95.76 li
128.979 86.3795 mo
128.979 91.9069 li
133.333 91.9069 li
133.333 86.3795 li
128.979 86.3795 li
132.516 72.0896 mo
130.216 75.3622 li
131.034 75.9372 li
133.335 72.6647 li
132.516 72.0896 li
140.567 60.6359 mo
138.267 63.9084 li
139.085 64.4834 li
141.385 61.2109 li
140.567 60.6359 li
143.038 57.12 mo
142.292 58.1815 li
143.11 58.7566 li
144.261 57.12 li
150.24 57.12 li
150.24 47.3277 li
150.995 48.1555 151.381 49.1515 151.381 50.057 cv
151.38 50.7351 151.168 51.3591 150.738 51.8472 cv
150.572 52.0347 li
151.574 52.9174 li
151.739 52.7299 li
152.259 52.1405 152.507 51.3893 152.507 50.6103 cv
152.505 49.3937 151.914 48.1001 150.819 47.1331 cv
150.423 46.7845 li
151.161 47.3028 li
153.461 44.0303 li
152.643 43.4553 li
150.349 46.7189 li
150.24 46.6227 li
150.24 41.4 li
135 41.4 li
150.24 41.4 li
150.24 46.6227 li
150.193 46.5812 li
149.254 45.7528 148.103 45.31 147.013 45.3092 cv
147.012 45.3092 147.012 45.3092 147.012 45.3092 cv
146.443 45.3092 145.889 45.4315 145.396 45.6872 cv
144.813 45.1727 li
144.77 47.054 li
146.972 47.0765 li
146.468 46.6321 li
146.43 46.5989 li
146.8 46.44 147.21 46.3612 147.639 46.3612 cv
147.64 46.3612 147.64 46.3612 147.641 46.3612 cv
148.475 46.3612 149.378 46.6633 150.161 47.2435 cv
150.188 47.2714 150.214 47.2994 150.24 47.3277 cv
150.24 57.12 li
144.261 57.12 li
145.41 55.4841 li
144.592 54.909 li
143.038 57.12 li
135 57.12 li
135 41.4 li
135 57.12 li
143.038 57.12 li
148.618 49.1821 mo
146.317 52.4547 li
147.136 53.0297 li
149.436 49.7572 li
148.618 49.1821 li
156.668 37.7284 mo
154.368 41.0009 li
155.186 41.576 li
157.486 38.3035 li
156.668 37.7284 li
140.76 85.68 mo
136.262 85.68 li
136.262 84.5227 li
133.78 84.5227 li
133.78 85.68 li
126.36 85.68 li
126.36 82.82 li
129.16 82.82 li
129.16 81.82 li
126.36 81.82 li
126.36 81.2078 li
127.009 81.6641 li
128.91 78.96 li
140.76 78.96 li
140.76 81.82 li
139.16 81.82 li
139.16 82.82 li
140.76 82.82 li
140.76 85.68 li
132.16 81.82 mo
132.16 82.82 li
136.16 82.82 li
136.16 81.82 li
132.16 81.82 li
126.36 80.8484 mo
126.36 78.96 li
127.687 78.96 li
126.36 80.8484 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 198.36 ]ct
[41.3707 -28.0213 47.9349 70.7712 84.2547 107.592 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 197 
/H 337 
/M[197 0 0 -337 0 337 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 197 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 197 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 197 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 197 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcPcM
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcPcM
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcPcM
JcLB&JcLB&JcLB&ec5_],P_<?A0^@>d(c`uirB*`+Sc!>=s*eFli<BSkH3bE!EUB=!!-.Cl2]Y<Tr6oN
!-eJnq#CG?.d@#0k1\tX!!.sZq(2WD/a<?$^QcM%!;-<mI8K_g!L5,!!3rZNXlBB^Gtn)^!K\\o!;ECH
Vu-PY!!/s3q)/8n2X1:Vk.p->!!%oN^AokQ!<)uu^P;gd!<9go!!%HAXT0g8!<91G!4;h,XlBB]H2"3:
-i*i5!<8s]!:BjeVrIaWVYB3Q2X1;Bk1Tg6!<;3A!!.sZr@Rt"!O=<B!<9g-!9!qX^Z,:pI8K_g!MLt-
!<91a!1NugXm,o_!!.@>q'Q35-gC^3Vlg$L!<8tW!!/s3q)/9*2X1;Bk4AY6!<;3U!<)uf!!.s/q#CGQ
/a<?9^UO9d!<9go!!.Ksq#CGD.I$p5Xo8<R!<91]!!.?mq#CG@-gC^3Vo8YL!<8tW!!/rTq#CGm2Y$kD
!<;2?!;6Emk2QFBMCnW(!@&*>!<9g^!3cJ'^Z,:pI4=sl"!A$Q!:0^cXdK1R!<91]!!.?mq#CF;%-dim
Vr%KL!<8tW!!&kr2Yd=R.M:qGs5p0Yg]7B:irB+;/`6X/^[(rd!<9h&!;-<mI4=(Ss/iU-cN+!IirB+*
-f>")Vtg=L!<8tp!9aC`VDd?4s5q)s_>sVuirB+;E8prt!<9fh!;ccr^Z,:pI:hC;s/jNG[/g6/irB+*
@djBf!<8s]!:BjeVrIaXVMF(0s5r#8VuZk[irB7%^Mk%j!9=.[^S(Yd!<9go!!?i8Af'G,s/kGaRfNJj
l2^Y\"(J0;(?,>oVlg$L!<8tW!!A#=LEGLUs5rqRNWB+ApAk0mmJm;?=;g-!s1c&DaoMIVi;`p.:`&-l
s/l8#KE2%Si;`p,9buahs/3g9]`A)1i;`p;C*2aAq#LHWMu`POs5rJE!K&Ja!<9g^!3cJ'^ZPRtI4=[d
li@'fR/lIOs/kGa!I6'J!<8tS!2BPoVrn$\VDeDRhZ3]=V?#BOs5rJE!K&Ja!<9h#!1!Wb^[D0u!!.Ks
g]7AVZN/;Os/kGa!I6'J!<8tm!/U^UVu-P]!!/rTg]7B:^];4Os5rJE!K&Jd!<)uu^P;gd!<9gs!!.Ks
g]7AVblG-Os/kGa!I6'Z!:^'hVj%2L!<8t[!!/rTg]7B:g&S&Os5rJE!K&K)!9=.[^S(Yd!<9gs!!.Ks
g]7AVk5^tOs/kPdrVutE-en_%Vlg$L!<8t[!!/rTg]7B:oDjmOs5s%UrW)Qj!K&Ja!<9gD!6P<A^ZPRt
I4<qOs/l8#KE2%Sk5YO.-en_%Vo8YL!<8t[!!/rTj8euUs5o7?p&P-Tk5YO?/_g@+^X<+d!<9gs!!.Ks
nGqnUs/h[hklCack5YO.-en_%Vr%KL!<8t[!!/rTrW(gUs5p0Yg]7B:k5YO?/_g@+^[(rd!<9h&!;QTq
I4<qOs/iU-cN+!Ik5YO.-en_%Vtg=L!<8tp!:0[dVDd30s5q)s_>sVuk5YO?/`-R-!<9fh!;ccr^ZPRt
I4<qOs/jNG[/g6/k5YO.-gUj'!<8s]!:BjeVrn$\VDd30s5r#8VuZk[k5YO?/boD-!<9g-!9!qX^ZPRt
I4<qOs/kGaRfNJjl2^e`!I6'J!<8t"!7V#KVrn$\VDd30s5rqRNWB+ApAk0mn,NKH/c5SLMCmuks1c&D
aoMIVirB+..Js/HI4==Zs/l8#KE2%SirB+*-i<rFGphbTs/3g9]`A)1irB+W2Z*OUVDdlCq#LHWMu`PO
s5r>A!K)@(=9GC1/Iq"Fs1ct^YQ4^<irB+.Er8`9Q!,UGrW)9bs/h[hklCacirB+*DZ!32OB3e<klCa]
hZ0DOs/4lW!2]a`r+Z>RGW$/u!<;2Y!8ISSk2QFAMYOpeZ8_%Ks1dn#Q2ps"mf<"\!.FXE!MM:6!<91-
!7(ZFXlBB]H2+9<S1s4.s/5YmM#dRRquGp\!2fPR!S9^(!<;2s!5\a9k2QFBMG=!K"H"c2,Gjc-rW)u5
LB.2Os1dRo!I[H8!!I^!!$IQl!<91G!4;h,XlBB^GshK0"F2?p+-?=!nGrTePQ:+Os/4lW!N'0#!!K/W
!%Q"R!<;38!2ontk2QFBA0_$Q"osN4!!&B<lN$t"T`F$Os1dRo!EpWD!!Rd"!!%m*lN$sek5^tOs/kPd
q>^Ot+8c*BGp`RlKdZ0ds/3""e,]NHirB+).f98MVD\DS[l3OPs5rqRNWB+ApAk0mn,NK",Q.THA2aJg
6GFc2!<9gD!6P<A^Z,:p=s3bD#$Nb^!'IA+lN$serW%TOs/k;]!EUBA!!ZLY!!#'X+6rq,Vo8YL!<8tW
!!.<or;[%H6N@*^jsos&q#LHWMu`POs5r>A!K*`PM?U;^!!%Iel2^k!dK$KOs1dRo!I^73I0ZI2!!%%O
!!)?cs/h[hklCacirB+*OSsG.S<*^NDIVl2s/4`SUB(=lirB(V!64u7"kU`o!18Q,!<;2Y!8ISSk2QFB
MO=C#".5pB)<V#"^[(rd!<9h&!;-<mI>\#P",`@l(ZteuXg8#R!<91]!!.A!rcnU"OEhW)!<8tm!/U^U
Vu-PY!!/t+rh]e,`hjj@!<;2s!5\a9k2QFBMBi'"!@'qq!<)uu^P;gd!<9go!!.Kjr;Zj@4QZYDXj$jR
!<91]!!.?er;Zj?3q`RD!<8s]!:BjeVrIaXVCMNE!@gn-!<;38!2ontk1p"=6GFc.!<9g-!9!qX^YJkk
4KTah!<91a!1NugXm,oY!!53Z+6NY(Vlg$L!<8tQ!!5sY.d$g3k4AY6!<;3U!<)u`!!5lD%d*il^UO9d
!<9gi!!5W1%Hd`kXo8<R!<91W!!5N*%-IWjVo8YL!<8tQ!!6Gn&ao_q!<;2?!;6Emk2H@E%WJ8ZIP'X]
s1ct^YQ4^<iW',kAsKK=.Ja&2!<90h!9jL`Xl9<a$t><rDC=NGs/4`SUB(=liW',oLW8JD2WXr=k,&.6
!<;3A!!a">^PZQNZ9m[Rs1dn#Q2ps"mf<"\#7[B/I9LZb4QZYDXg8#R!<91]!!`q&Vg2?]S3#d4s/5Ym
M#dRRquGp\#8,SMVKeK[:Z_ZWk.gu6!<;3A!!6\u)?'U;%]'[#!<)uu^P;gd!<9go!!6>](]FC9%@%Cc
!<91G!4;h,XlBB_=+qFh!!3Rj%/0bl!<8s]!:BjeVrIaYGdedo!!3bP&a'/ok1Tg6!<;3A!!.s9r;Zm!
MCmuks1b6-i;inmirB+.1Ah+QI4==Zs/kGaRfNJjl2^Y\!I6Bs!!.?mk5bO[XoQrOs/4lW!N&6^!!/rT
k5bPEoDjmOs5s%UrW)Ef!Id!+!!3Y9,Nf(,^UO9d!<9go!!.*qr;Zm.TciLus/l8#KE2%SirB*t0`:tQ
%%JF&!<8t9!5/C4VrIaXQp^fP!YO$6mf<.`s5o7?p&P-TirB<9Qo>L"6D^(3!<9g^!3cJ'^Z,;!.>fki
+?YpHqZ,s_s/h[hklCacirB<3KeNoW3fo'X!<8tS!2BPoVrIaW2?pWX&LpSr\)m\jk,&.6!<;3@!!,El
rkAK$,N]"+^[(rd!<9h&!;$6l4JDbV!K&#^!<91-!7(ZFXl9<]3h62I!JMWX!<8tm!/U^UVu-PX!!,mI
roO6j.cpa2k.gu6!<;3?!!<]i=?#CCrW)u5LB.2Os1dLm!t@"^1?8H8Xj$jR!<91[!!<W`9ec2>nGrTe
PQ:+Os/4fU!tdn86f\7Ik1Tg6!<;3A!!.s9r;ZkU=QTV`^S(Yg!![kM]t_=3<oj;^I5:a$!I[f,!<91a
!1j/pBU,[$X`I8(!;ZZrGqf0s!I7E%!<8t"!7q2TBTfBnVf,5i!!/rar;ZkqC?>Nrk4AY9!!Wj?h<*jf
B__Z-!:TsgMYk-gZKM8m<e%m!]r6@k!7(WFFSWZPVbcIU!.FaH!28TV##96AXfRe$M#[N_qlKt&Xd;TA
!!%<AVZ<7N!!Z)7Vl-PXBZL1j!!-N,qPO@W7HXXNVYfKUfBrY9!![,)k2tK.%$(Dc!!!6!joNS3k5YO?
If3@MMHCb^!!,lnq7coOf)W5Z%&(GNZskTi/Rl*%^NSf@!I]"e:]c&A(]4:&!!,WWq5jX(ScJ3Z%#qBk
Ue`09,#>#:X_[,#!I8S]9`fT7(@(r$7?[MF!N9Gf!3#r,Ml3JI:a6#d:njkcBBT<qV?!"^C'(8I+6rn-
@*/6,!!]J(iW'*Rk2rQBrW!'%Vrm-&kPtWo,Q.TC%V4l*%!TJ$ZskTi/Rl*%^S(,tScAlpWkZ;Uq>^Y*
^;#:&p&Oac!EpWE!!*O4lMq?0Xf\Bp+p&raUogbX\H(4]"9FmlX\JWl"APu"G6@+1!EUBA!!*L0lMqE.
Vl-7c,6B)dU8OoH!!&,]"9FdcVb['g!`#Vj!HSA.!!.<or;Zj1Gj>>4O65T&!WE'%!N5)B8B(YO!!7$"
k4eoYjlW-;l2UiO)>jI8MAbg^!s=1j^&VO:!!HZD^T%?t!!/h/!P^Yi!!>6r^Nf#D!B_1r!!.KamJm@l
GHIr@q>^XmXf[rkeH!8_"-0Lc/bf;J/Zl-ll2UiG(An.5Go$,Sp](F!F/Pm1q>^XnVl,d\S,i6_",j(U
0),DK/uY[^l2Ui\+8c*>VB>4+!sG4XjnJfWk2pO>!3cG)9]kL2!!;<FOQlfHMLPM+!bB%jmJm?6^V;f(
!!>6r^S7\-l2Up*^V<S<!!?$2^J*qn!I]"e:]ah&+RT43D69olp](CJXf[WP!2KSs>ck+mp&G1ZXK=q^
!;ZZrH#ERT!`u9AmJm?'Vl26C!!=jPVi.t`h#IO_Vl)fR!!>K`VaKbM!N)7_C'&YB.dd9<OQP^!!!;<F
9`+mW!!3;ck4AWVjlTeJ!<)uf!!%oR^Aqg4!!>p0^/+G&"&H\HE5;P(!!=^c^MWTC")Yfd+RB(.IJ^,H
>4)@m7BNXUp](Ht!'dTf>a,3j+K_bKq#L<m"'Mb,*UEb+H2FK>=7-%j6`6eHp&G1[Vl*hG!65'A+fD5A
oDetsVkkC"!!&nnjoBYo!!6Efjn&NSk2lf3!!E9%k2ld<!!<>cj!X0n!K'5.!!=@W^MWTC")Yff.bk$8
!!8e-TCMs`T>,O8!!.L1o`4Xb"!+GE=nD[r=fneKUB'lc!fO1=nc/`LX_R2&!I6`j!!=4;Vcr]m"'VV#
+mB!/!!7tSM"1NILo4kO!!&kr:[%i]-fa=koDeppk2riIjo>HNk!\b?!^u11li7&2%f?;-IO"=^!d28M
nc/``^Rt3"T`>0@^V;&b!!=L]^E*+Mo`,"8%K$2,EZjiO!c"iqnc/`LXc'jmg&M3pXfWQ5!!=1BXW$R,
!?VaJ!!-sZn,NN%VhjmD!/LZRLmA#C*N,eTo)Jmn*2f\Qm/R/:&c;V0Qn%S*!fc>1nc/_Zk![>lbQ.\*
n,NOPjs06n!@)R]M?:)h6Lk*Y*P]?7rW)Tk"!kXr-'nT7S\L`r!:g*kT"f=5!!+3Sr-\X?TfhlG!ue;D
)tEt2)m-4^fDr\e!f*n8n,NNIX_7#$!?YeKGljM+3qr^P!!=.;V]>7-"!"5:*M3?-!!7nQL[Y9FLSn\M
!!+R)r2'PIf2(r;![Hjin,WLNj8cLd!^5[4n,NMVk)&I*!IgmDM?SmCR#6>1oDer5^Rjop!hR/tX8qVf
!s66P.e!E?._iLrmJm9.Q2H%5To+8=(\@\/B<@'\!!8%[L[kGC!!<8(XW[*5"!F_E"8)Zj!!-u!r-8F8
Km@POoDer'VhaaA!f*\.\H(Of!s,<t+n,I6+fD%:mJm9T`r)\:f=.WE+7oO7M<7.o!!GXN4TGJM!<;3L
!!26>!X&K'n,NK"2uEXVMCnB!!s?*K.e!E?._i_"_uS?g!a3:FmJm<q^HV&c!Eq8V!!.Ksnc/aoW3%38
!;lg!+K_aHR/d:ZXek^kq#CJmXZ5_K!EUuQ!!.?mnc/aoU8K1(!!=CBVZG0FaT)B6VkWSZ!huSNmJm94
6i6obVDduF!X.ECmK!:LQN.'KWpTigWoctA!!,e3r;Zjb)=db/5/4Jm!!9OB=l'.k!!8n0JF3C=JA6Bs
!!,P*r;Zj\(]4:-!!5-^V="<bV6*:b!;-<nNid*b!!6r<D=%<(6PfV#!BM"e!!5'VU@&!_U8LTK!3ZA(
N2LIZ!!6r6C$bm$>p'"F!Dag.!!5gUWpTifWogPdkPtZZjq$k[!Y=FUec5bs^OY_P!eA%[p].#g!l)Jr
mJm;7^U3h;h#ILnX_[>)!c+ou^B!!g!j/REmJm;.XeXGI!bnQJmf3FiCT!,Z!!9'r*Us./!!41=S^mcB
Old2B!!3\n:<W^`!<;3J!!267ec5cY^ErdXo)Jh<^V?3;!\(n!r;c<es1eRUfDkuJXW6a/!Z\>Ef`8kh
!["PHli@'fruBhpqu?ehV]G1*!Ze2:TE+ih![+D>li7-dV]-T-!!1a7li@(JjoDags5rYJs5s>-l2^;R
![#1lli7+%^F-/amJm;s^T-W#"00+&6J2>?*3H@0!!9:)*qTH2!!5otR-XeTR&rJ5pAj4R!Z\,:li7*c
V]WMNi;`pTVj6TK"-ocF3nXK7-KaIW!!;<F!1Elgk&'Gb!,Vf":J]XD!^aZ%li7*e^L>(]f)Pl5^PV:W
",aj(AD$qa4KY"B!;ZZsR&s,Q!!7GJF7fP.!!@>F>?fb\!]m6Eli7*PVbb_@aoDKfVfM,("*:AB=P3ZV
:ZcKom/R0(k*c8N,3AkCli7,+k';7*!!6`HM<k3DMSG2/!5/@6XhS!)!!??<Lkt$jp](A#X`Nh/!d(Pi
V?$;i!h?A^li7,WXa>EJ!!69#EpNc-F/O6K!3cG)RAWUB!!>ciGB`KUlMq!4jr*Lc!ZL2DZN04i!Ia+q
!!;;XUY,VKLqd'Y!!69;Xn_sl!!9XE2s^MH2nt]GquGRR!dh%=li7)VXdm0,g].DSXXi`<""UL1M:hk1
GGe""!!E9%8>hlF!!9!p/FWZ<!!=dMKS8"Y!MefB!!251blH&i!P[^]!!;;k[b1W^QbPKV!:g*k2nuhk
!!9pM-2di5!!=O^USHKB!f=$0li7);Xf0qR_>jY>XW6[-"!"G,PMH6;!!7hO/F3?</>o><!;c`tWi$m(
!!=7>NfMcm!Oh.U!!25rk5_mis5rSH!p7G>l2^;R!i*LVli7)5^V?oOmJm='^D6)8!u8SRY1WdVPH>hk
!!4.BXn2Ul!!9:)&*s8u&$;CnpAj4R!fj0!li7)-VlI?/i;`qXV\&1p!t_AtR+VH?`9-=bs5odNs5rSH
!p7nXf`2)V^D6)8!YrJb`;nKi!l)JSli7+l^U^o.!!8^n&+]et!!3\5Xd]:lXfVa!!;HNr"KeW$f`2)@
V\&1p!YD9.dK%Di!iMq!li7+jVkTp=!!CX2!!)?cs5odNs5rSH/`tsJBP>W5aN)<=_8!^s]"#5WZa$^:
X/`.rUnXQUSXZ%8Q'@GoNfAsSr4`I&!!3A>^Y]%)!!9pM"mc45#/@^Z91tM5OcYW`N/EIJL4t;5JUi6!
I!^0aGBJ"KEH#h(DJX*'BkM$hA([mdli7(iXf\H#p&G/rXTRni!sGa)W7_.P4Jr>K!!3;$VsFDf!!9'r
"7-!i"K.ugmf;YR!>jn`!<;2f!9jL`k3;puk25%r!!*0+#RLhI%M9<f()Ii.*?QCK,UOlg/1iJ01Gq'N
4$5Yk5sn&t^BNs(!X?ESq#I/i!l)Jali7;+^TO^>!!*-(,m=JX$4@4N%hK<c'GVB")&jM8+!;^N,UFcb
.P!##0/,(8]r_D'!!3;*XhXql!!9:)&*s8u&$;Cnf`2))VZZ>e"98E)Vl-!a!iW"-n,WCe!t_AtR+VH?
\)urUs5qQ+cN+"-l2UnJdF$VI!j99PqZ-0e!YrJbRfEN)^EiaXn,NP:^S@RW!!8^n&*s8t&$;tf!5\^;
XfWQ/!!=4CPEXf&r;ZndV[r+o!YD9.T`Fri!ii.<li7,.ViHej!!1L0l2^kHk5_mis5rSH!p7G>l2^;R
!i*LUli7)5^V?oOmJm<t^GkKZ"#mu]Qe;??PH>ej!!4.BXn2Ul!!9+$/*m6</$4YbpAj4R!fj/uli7)-
VlI?/i;`qUV_%07""^@'K\6>+`9-=bs5odN!P[^]!!;;k[b1W^QbPKG!!5*o\&A@!!!9:;=R6"i=MKZJ
f`2)1XXiuCq>^RIXf.]h!h?A^o`4ae"%KD>HeAB#KVpBf!!4^LV:#@d!!8Rd8F-<Y8>gZUf`2,_jo>DJ
!!25rRfEJ;k3;pJk+e^)!!7tk=R6"h=MLuq!5/@6Nk^J<!!A(mAS'j$p](ABX[_XW!_0;^V?$;i!dUni
li7-/X^#,a!!7AB8F-<X8>hmB!3cG)GGfNK!!@8>=BP"llMps\k3;pIk'aQ9kl:c-jr3Rd!u^6IHJ&9"
AA=#g!!8"lO8/dN!!6TDWpB]fWkUkequGRR!aDdKli7*.Xa.\^g].CNXdJGT".62Q4P9]9=Jp6.!!E9%
Ei4/O!!5roQ1+eP!!ALa3]bpo!dWoHli7))js&%Mc2[n-D<q6)D<=Vif`2(?^T./2nc/`k^L<T3![kat
r;c<es1eRUf`2(9XdJGT!gp)bg&Sti!ZnJGli@'fruBhpr;Zm[Vj6TK!gTZZT`Fri![">=li7-dV]6]0
!!5sYD<q6'D<Bs\ZiL-gli@(Js!I"2n,NM3^VB+8!l)K!XoRhh!l)JrmJm;7^U2Sm!Z\>Eli7*hXWR08
VZ6e#XW6a/!Z\>;o`4"P!ZS&9li7*cV]`SOhuEhVV]G1*!Ze20f)Pjuk2u"1!p8VFRK3BMli7%J!n[JQ
fDku[^Er:J![YUr_uS?g!i!G[mJm<=^NnB1!i)k;oDnag!Z\>ER/d;KX_[V1q#CJ3X_lVh!hH50mJm;/
Vl.oBaT)C$Veb]#!c+]Jec5d(joFcKs5o^L!)<RW&+0E!&*B#*!!7G\JF3C=JA7i8!5&:5=hh?3!!9OB
52ZG8!!7#>C[M0(CTWVn!;-<n8?J`V!!9"!37\'2Br>b7!!6r6N9^JI!!5`iU@&!_U8Kp:!9sOcOld2B
!!3\n:9jl_!!25^mJm<gk"F8*!^=B+mJm<q^KL=3U&Y8s^V;8f!!=^c\HD[.h#IL9XekFc!i<"i^B!!g
!s,O++Rf@5+K_REec5b0VkWV[!s#'n8XTP\!N2h=nc/gn!$S87"4dGR9BN8B!!0+^b5fces5r_L!p8AC
ec5dS\\BWm!;$6n._i_"QiI8[^RbE*nc/`_^N.j)!s>L(+Rf@5+K_aHf`8ef!f*n8n,NNIX_6>fqu?g$
U8K1(!!=CBVZEFjq#CJNVhaaA!f*[aeGoXRhra>,s5rDCZN(%ik!JP;!^c%+k5aoM!cl&In,NN]^R_G+
li7,6^V;&b!!=L]^E(f(!b\Wmn,NNIXbZHIV>p]<XfWQ5!!=1BXW$g3i;`piVhaaA!f*\.\H(Le"!+;;
*:a(3*2f\Qe,TQ,k!JP;"@D66!!&Ads5reN!p8VirW(OM"!,.k,k:p;,eq)?_Z80d!h[6"nc/``^NJ!*
!ue;D)tj:1!!=1BXW3W,!fO1=p]10k!fO0qdf9IgVl(O*!!=4=V]F+a`rH0sVhjmD!f3addf9CnjoFQ5
!<;2I!!<3hk!\b?!^u11dJs>k^Rt&s!h[6"g]4nc""M(#D=df1D83b,h>m3K!c"iqnc/`LXc&qSo)Jk8
XfYau!!?B+Wu]Ug!bS?dnc/`IVhjR;XT/GHVl*_j!!?E&V&\e$kPt[Dk!\b?!^u0=YQ3bb!p8VIoDesq
k2Ri;!!=@W^MWTC")Yff.eWk7!!@2T^JFP'"&HYG9_SPA!!=7BX]b8r"'Mb.+M@d-!!?K.XZuLZ"$`lh
7F;);*2TQ:oDenqVZE\=PQ1ekVl)fR!!#7cVPcf/!!=V/job5U!X%TIaT0Ka!X.ZJoDesSk$675"AHSE
:B:+h"&H\HE0:2%U;$`D3VWRV3PW=RcN"&9XfOb\!!>HfX^'EW]`8.pXfX2M!!=gTX_lYiq#CLaVku`Q
!!>KaVd5hnp&G2QVl26C!!=jPVeOHW!aOmLoDesTjoj]EYQ+_uk2u@;!p8X,j8eKG"*hSq3VWRV3PW>'
W;u/_"9PU<^L-g;"CJmXK*0C!")Y0B/bf;J/Zl.8mf9*_"9FmlX\JWl"APu"G6@@8h>dXlVl26C!!=jP
Vi.t`g].HXQ)CNTq>^XnVPeJ;c2[p-k2u@;!p8W=quDu^!c@)^p](EXk+2_T!<)uJ!!ECV^V4(O!!HZD
^T%@N!71]STYJ7K@P%^7@^NnbGK^$i"*^lK:&4hm9s(Ob!KR3cN304X:Efia"AbhqX_c2]"9W_CVG?sf
"AYkmPl],0_Z1+&Vl-7c,6B)dU8Oo&bl@kH"J4c;p](BXk&$:^qu?jjk2rQBrW!'%Vrm-&aoDin^V@-b
/HdY7[(jALfDr;Z!-J%O!N/`H!:^$tCTX_7:Efia:Sb+pNLp4=!!$C%XT=bZaT)`^Vl-7c,6B)dU8OoI
jT)4Z!F_r'VZDrLjoFHB"HV^-VZHbs"9GF_k";]Ti;`i^q;q_"@)r<K:T+$'!-I`2R/dG>W4fs\Ioc(>
ec5_AQhd``?ap*a!![,%XKAUG:<!877?[MF!N9H+!/pm^BTfBnVf,6-!6G3A@*/6,!!^CB`;g)N@GU).
R:sP>#67eS^V@I\I>S%%!<9gN!!Z2>Xf\[iB[?ae!<91J!:p0p95g`+Wfh%^!:BjeVnrE<BUS#Fh-g`J
!2ontk1p$u!<9g-!9!qX^VBjLXlf\R!<91d!7q5NVlg$L!<8t4!<;3R!0.'Zk4\lT!6kND^UO9d!<9gL
!<92#!/(@PXhXr:Vo8YL!<8t<!;QWpk)9<6!<;2s!<9g^!3cJ'^XW>N!<90h!9jL`XhXr:Vr%KL!<8tV
!8deVk,&.6!<;2s!<9h#!1!Wb^[D0N!<91-!7(ZFXhXr:Vtg=L!<8tp!6"s<k.gu6!<;3!!<)uu^P;gd
!<9gL!<91G!4;h,Xj@(<!<8s]!:BjeVn`<4k1Tg6!<;3;!9=.[^S(Yd!<9gL!<91a!1NugXm,o<!<8t"
!7V#KVn`<4k4AY6!<;3U!<)uC!<9gD!6P<A^VBjLXo8<R!<91:!<8t9!5/C4VoSl6!<;2?!;6Emk.gus
^X<+d!<9ga!:0^cXdK1R!<91:!<8tS!2BPoVr@^6!<;2Y!8ISSk.gus^[(rd!<9h&!7ClIXg8#R!<91:
!<8tm!/U^UVu-P6!<;2s!5\a9k/.2u!<9fh!;ccr^VBjLXj$jR!<91J!:^'hVj%2L!<8t4!<;38!2ont
k1p$u!<9g-!9!qX^VBjLXlf\R!<91d!7q5NVlg$L!<8t4!<;3R!0.'Zk4\lT!6kND^UO9d!<9gL!<92#
!/(@PXhXr:Vo8YL!<8t<!;QWpk)9<6!<;2s!<9g^!3cJ'^XW>N!<90h!9jL`XhXr:Vr%KL!<8tV!8deV
k,&.6!<;2s!<9h#!1!Wb^[D0N!<91-!7(ZFXhXr:Vtg=L!<8tp!6"s<k.gu6!<;3!!<)uu^P;gd!<9gL
!<91G!4;h,Xj@(<!<8s]!:BjeVn`<4k1Tg6!<;3;!9=.[^S(Yd!<9gL!<91a!1NugXm,o<!<8t"!7V#K
Vn`<4k4AY6!<;3U!<)uC!<9gD!6P<A^VBjLXo8<R!<91:!<8t9!5/C4VoSl6!<;2?!;6Emk.gus^X<+d
!<9ga!:0^cXdK1R!<91:!<8tS!2BPoVr@^6!<;2Y!8ISSk.gus^[(rd!<9h&!7ClIXg8#R!<91:!<8tm
!/U^UVu-P6!<;2s!5\a9k/.2u!<9fh!;ccr^VBjLXj$jR!<91J!:^'hVj%2L!<8t4!<;38!2ontk1p$u
!<9g-!9!qX^VBjLXlf\R!<91d!7q5NVlg$L!<8t4!<;3R!0.'Zk4\lT!6kND^UO9d!<9gL!<92#!/(@P
XhXr:Vo8YL!<8t<!;QWpk)9<6!<;3A!!-UTq#CG+,O,:/^X<+d!<9go!!-7Gq#CM#+92E.!<90h!9jL`
XlBB^=!.5<!EUB.!<8tS!2BPoVrIaWGQ95h!!.<ol2^kHV?#BOs5r>A!K("T/HM\"l2^k!li<=Os1e"&
o`,#@;#)O@Ppttus/iU-cN+!IirB+*:&-.;O=0;ns/5YmM#dRRquGp\!N'W-2?CfUl2^kH^];4Os5r>A
!/gNc!%mR<rW)u5LB.2Os1dRo!.FUD!%I15s/jNG[/g6/irB()pSS!=q>g$cs/2(]mK!9birB(VpZ;H6
l2^kHg&S&Os5r>A!K("X/c@7%Z7Y>As1b6-i;inmirB+.;#)O@Tdf7,s/kGaRfNJjl2^Y\!I7E8-NT_b
l2^j^XoQrOs/4lW!N'W-2?DDfl2^kHoDjmOs5s%UrW)Ef!K&K)!!.s/l2^k!\,aYOs1dRo!IZEm!!.Ks
l2^jdrW%TOs/k;]!I6'g!!.?ml2^j^`;mROs/4lW!N%dN!!/rTnc8Ics5o7?p&P-TirB+;/boAI,7`u=
s1ct^YQ4^<irB+..JWrG+:S;Nli@'fR/lIOs/k;]!I6'g!!+/Ml2^j^hZ0DOs/4lW!2]`Sq#CFF&aBAr
k,&.6!<;3A!!.s/huNelli<=Os1e"&o`,#@.Gt4+Xg8#R!<91]!!.?mhuNeTq#H6Os/5bpkPtX\2W+T8
k.gu6!<;3A!!.srirK&Ys1a<hqZ-Z2irB+.B&E[hXj$jR!<91]!!.@Sn,VtYs/2(]mK!9birB+WLYr14
k1Tg6!<;3A!!R>VE#AWUj8f4pT`F$Os1dRo"(nZI(ZGGpXlf\R!<91d!;ZZt@]*ZNiW0"VXoQrOs/4lW
",H#o+6!;#k4AY6!<;3U!<)ud!!4`S)<1_s^UO9d!<9gm!!4TG(ZPMqXo8<R!<91[!!4NB(?5DpVo8YL
!<8tU!!5&n+6rq&!<;2?!;6Emk2u^FMCmT`s1ct^YQ4^<k5YO2.IdE)!<90h!9jL`XlfZbGphAIs/4`S
UB(=lk5YO[2Z<^6!<;2Y!8ISSk2u^FMCmT`s1dn#Q2ps"mf<.`!IZEP!<91-!7(ZFXlfZbGphAIs/5Ym
M#dRRquH'`!N%d1!<;2s!5\a9k2u^FMCm]crW)u5LB.2Os1d^s!IZEP!<91G!4;h,XlfZbGphqYnGrTe
PQ:+Os/5#[!N%d1!<;38!2ontk2u^FMCnW(j8f4pT`F$Os1d^s!IZEP!<91a!1NugXm,oc!!.?mg]7AP
XoQrOs/5#[!N%d1!<;3R!0.'Zk4\lT!;$6lMCmT`s1c&DaoMIVk5YO2.GOq'Xo8<R!<91a!!.?mg]7AP
`;mROs/5#[!N%d9!;QWpk)9<6!<;3E!!.s/g]7AhdK$KOs1d^s!IZEe!:0^cXdK1R!<91a!!.?mg]7AP
hZ0DOs/5#[!N%dS!8deVk,&.6!<;3E!!.s/g]7Ahli<=Os1e"&q#CGD.GOq'Xg8#R!<91a!!.?mg]7AP
q#H6Os/5bpli7'`2V\<4k.gu6!<;3E!!.s/hZ3WUs1a<hqZ-Z2k5YO2.GOq'Xj$jR!<91a!!.?mli?PU
s/2(]mK!9bk5YO[2V\<4k1Tg6!<;3E!!.s/q#KIUs1b6-i;inmk5YO2.GOq'Xlf\R!<91d!<)s!GphAI
s/3""e,]NHk5YO[2V\<4k4AY6!<;3U!<)uf!!aa+MCefe=:XHns1c&DaoMIVirB<,I=3OE1/JGB!<92#
!/(@PXlBBd+*i,Z!&.+UjoGFZ`;mROs/4lW#:cUJ2?6*Z&afYp!<;2?!;6Emk2QFHI\gS\%ToQpjoGFr
dK$KOs1dRo#BH)5Taah`MYdD?!<90h!9jL`XlBBdDNIqi$r)h;joGFZhZ0DOs/4lW!13u1Gh3OB`jb(1
s5p0Yg]7B:irB@62ZQr^!!&B2k5bOsli<=Os1e"&o`,8<1&t-I!!%m!k5bOaZN/;Os/k;]#];<r9hbTf
KcfIXs/5YmM#dRRquGp\#adsZC2*_K[jpP@s5q)s_>sVuirB?063%Ll!!&B<l2^e`s1a<hqZ-Z2irB?-
49,hU!!%m*k5bOablG-Os/k;]#Tl)-%$1GhKdZTpnGrTePQ:+Os/4lW#V&UM&]OeN[l3CLs5r#8VuZk[
irB6AMHEuWDutp3)<V#"^S(Yd!<9go!!k?.:f*EhIB==K!<91a!1NugXm,o_!!k9(9hg^YH)DG@!<8t"
!7V#KVrIa_6`+U5`eUGR+6NY(k4AY6!<;3U!<)uf!!%oT^B1]u6KS:J^UO9d!<9go!!%HGXTG2E4QZYD
Xo8<R!<91]!!%<CVZNB63p$GBVo8YL!<8tW!!&npjoX/3:[S5Y!<;2?!;6Emk2QFB2_Eqfs1ct^YQ4^<
irB*8.J3]-!<90h!9jL`XlBB^0IPcYs/4`SUB(=lirB'H!&ia8s5p0Yg]7B:irB+;:&FtlQn@J$s1dn#
Q2ps"mf<"\!I[H8!!.s+k5bOaZN/;Os/k;]!I7'1!!.d$k5bO[q#H6Os/5bpkPtX\?2O['[l3CLs5q)s
_>sVuirB@BZ9eNk%WK07l2^e`s1a<hqZ-Z2irB@5Tf`;T%;)^kk5bOablG-Os/k;]#^Mq$!!!F:V^M3=
nGrTePQ:+Os/4lW#c?3L!!!Udju2B&s5r#8VuZk[irB6n,B.0'QiaS./a!-6^S(Yd!<9go!!laNAm,Y$
Trfd,!<91a!1NugXm,o_!!lXJ@TNtlS>Rat!<8t"!7V#KVrIa_GUeJn&\$BS2Wk)?k4AY6!<;3U!<)uc
!!QK>V'A;Ek5bOs\,aYOs1dIl"]2=d+?UJ'!<92#!/(@PXl'0_9rF'p3YplYs/3g9]`A)1huEpqk/JlH
+7B4*!<;2?!;6Emk2QFI65__fR#2b+%d*il^X<+d!<9go!!k\'180SR(Ea1b!:0^cXdK1R!<91]!!kV$
0V!iB(*<tJ!<8tS!2BPoVrIaW:Bqt/f=.V!.M:hDs5p0Yg]7B:irB@BR(mS?,Gh[tk5bOsli<=Os1e"&
o`,8GMQLIj+I/WLk5bOaZN/;Os/k;]#^M-%@K7L3S1!J"s/5YmM#dRRquGp\#c>)nLB&gDf/Ddls5q)s
_>sVuirB.<^I%o"![GH3l2^e`s1a<hqZ-Z2irB./XZZR_![+Tok5bOablG-Os/k;]!dU\)rW!!AV^M3=
nGrTePQ:+Os/4lW!iG*UrW!!Lju2B&s5r#8VuZk[irB+;:&P%n!(%Rd!<9g-!9!qX^Z,:pI7F,7!B_1]
!<91a!1NugXm,o_!!.@4qu?aY(?Y\tVlg$L!<8tW!!/s&qu?an+6NY(k4AY6!<;3U!<)uf!!OSW)(dEb
j8f4p\,aYOs1dRo"X"6j.4HD#!<92#!/(@PXlBBb*t/o4-QhCLs/3g9]`A)1irB64&K`nh.dR02!<;2?
!;6Emk2H@FAA=tHV3iLi!<9g^!3cJ'^Z#4t>-4'`Q&6^]!:0^cXdK1R!<91\!!ZN&OIVDd+6ES'Vr%KL
!<8tV!![]1`n/5>.cpa2k,&.6!<;3A!!bir/HCY[/XYZ#s1dn#Q2ps"mf<"\#<\\/!.?:FMWOp=Xg8#R
!<91]!!bQT-NJE>-\^[_s/5YmM#dRRquGp\#>`r0!2_Y4\)m\jk.gu6!<;3A!!nHV!!%m.!/`#d!<)uu
^P;gd!<9go!!n!B!!%Er!.?!Q!<91G!4;h,XlBBeGs_Q3Gp`T;+85d*!<8s]!:BjeVrIa_VHj0%VD\FO
.d$g3k1Tg6!<;3A!!S63!!%m.!Y2Lfk5bOsT`F$Os1dRo#^n-%!.?:*Tdf.)s/kGaRfNJjl2^Y\#^Ict
!-oq#S1!J"s/3""e,]NHirB@^2?3`S2A+P!k5bPEoDjmOs5s%UrW)Ef#>IMb!/d/LR-"DK^UO9d!<9go
!!btU!!%G)To.t4s/l8#KE2%SirB<O3WK/*Kq*kZ!<8t9!5/C4VrIa^>u(G#VRP0dmK!%_s5o7?p&P-T
iW'0nA/U91E";"1s1ct^YQ4^<iW'0d=r2U\Ae"V;li@'fR/lIOs/k8\#$4kAH(8=PjoGFZhZ0DOs/4iV
#'bA7VUpS8joGGDV?#BOs5q)ss1dn#Q2ps"mf:c9s/iU-cN+!I^]=D4q#H6Os/5bp`;or#^];4Os5r>A
#@r^L,9qYV,O#4-!<9fh!;ccr^Z,;!>((fA+ED':joGF`blG-Os/k;]#?Q1r+!5B0+8,^)!<8s]!:Bje
VrIa^Gc%>f.[Yu@joGGDg&S&Os5r>A"V,u!%^MH'2l.#I!<9g-!9!qX^Z,;"%<<6oTo(Uj%Hd`kXlf\R
!<91d!;Z[$$uQghS:rYY%-IWjVlg$L!<8tW!!j1(*td,66cK`$!<;3R!0.'Zk4\lT!:TsoE&Rbk^DR$/
/a!-6^UO9d!<9go!!m0l!(O(,!.?<Z!<92#!/(@PXlBBe@P@dLV\T8X-g(L0Vo8YL!<8tW!!n?I!+"_/
!2_[C!;QWpk)9<6!<;3A!!eB?%],$_)._k0s1ct^YQ4^<irB=41(BLs!#Ji9!:0^cXdK1R!<91]!!dd'
%$5`7(0BVus/4`SUB(=lirB(V#"'!BV>q]_joGGDV?#BOs5r>A#WK&c^F`QnMAbRWs1dn#Q2ps"mf<"\
#Vr*=XXR)?I2D&Hs/iU-cN+!IirB?=S<0Wr9q6JEk5bO[q#H6Os/5bpkPtlUf>cr2C=f=)k5bPE^];4O
s5r;@!\IM+jT,8[s1a<hqZ-Z2iW'$/:atB(s/jNG[/g6/iW'$-9dfK3nGrTePQ:+Os/4iV!]FdOiW0#@
g&S&Os5r,;j8f4pT`F$Os1c>Ls/kGaRfNJjl2]E9s/3""e,]NH^]=DsoDjmOs5s%UrW(1Cs1c&DaoMIV
^]=D:rW%TOs/j':s/3g9]`A)1a8l#9s5o7?p&P-T^]=DLdK$KOs1d(ali@'fR/lIOs/j':s/4`SUB(=l
iW.j9s5p0Yg]7B:^]=DLli<=Os1e"&dK'<LZN/;Os/j':s/5YmM#dRRquF\9s5q)s_>sVu_Z9Z9s1a<h
qZ-Z2^]=D:blG-Os/jWJnGrTePQ:+Os/3X4s5r#8VuZk[h#QL9s1b6-i;inm^]=D:k5^tOs/kPdf)YiK
XoQrOs/3X4s5rqRNWB+ApAk0mblIdY\,aYOs1c>Ls/l8#KE2%S^]=D4`;mROs/3p<q#LHWMu`POs5q)s
s1ct^YQ4^<eH"q9s/h[hklCac^]=D4hZ0DOs/4iVhZ3]=V?#BOs5q)ss1dn#Q2ps"mf:c9s/iU-cN+!I
^]=D4q#H6Os/5bp`;or#^];4Os5q3!rW)u5LB.2Os1c>Ls/jNG[/g6/ciES9s/2(]mK!9b^]=Dsg&S&O
s5r,;j8f4pT`F$Os1c>Ls/kGaRfNJjl2]E9s/3""e,]NH^]=DsoDjmOs5s%UrW(1Cs1c&DaoMIV^]=D:
rW%TOs/j':s/3g9]`A)1a8l#9s5o7?p&P-T^]=DLdK$KOs1d(ali@'fR/lIOs/j':s/4`SUB(=liW.j9
s5p0Yg]7B:^]=DLli<=Os1e"&dK'<LZN/;Os/j':s/5YmM#dRRquF\9s5q)s_>sVu_Z9Z9s1a<hqZ-Z2
^]=D:blG-Os/jWJnGrTePQ:+Os/3X4s5r#8VuZk[h#QL9s1b6-i;inm^]=D:k5^tOs/kPdf)YiKXoQrO
s/3X4s5rqRNWB+ApAk0mblIdY\,aYOs1c>Ls/l8#KE2%S^]=D4`;mROs/3p<q#LHWMu`POs5q)ss1ct^
YQ4^<eH"q9s/h[hklCac^]=D4hZ0DOs/4iVhZ3]=V?#BOs5q)ss1dn#Q2ps"mf:c9s/iU-cN+!I^]=D4
q#H6Os/5bp`;or#^];4Os5q3!rW)u5LB.2Os1c>Ls/jNG[/g6/ciES9s/2(]mK!9b^]=Dsg&S&Os5r,;
j8f4pT`F$Os1c>Ls/kGaRfNJjl2]E9s/3""e,]NH^]=DsoDjmOs5s%UrW(1Cs1c&DaoMIV^]=D:rW%TO
s/j':s/3g9]`A)1a8l#9s5o7?p&P-T^]=DLdK$KOs1d(ali@'fR/lIOs/j':s/4`SUB(=liW.j9s5p0Y
g]7B:^]=DLli<=Os1e"&dK'<LZN/;Os/j':s/5YmM#dRRquF\9s5q)s_>sVu_Z9Z9s1a<hqZ-Z2^]=D:
blG-Os/jWJnGrTePQ:+Os/3X4s5r#8VuZk[h#QL9s1b6-i;inm^]=D:k5^tOs/kPdf)YiKXoQrOs/3X4
s5rqRNWB+ApAk0mblIdY\,aYOs1c>Ls/l8#KE2%S^]=D4`;mROs/3p<q#LHWMu`POs5q)ss1ct^YQ4^<
eH"q9s/h[hklCac^]=D4hZ0DOs/4iVhZ3]=V?#BOs5q/u#$-5g^V-Romf8aU#(<G`^V>8!nGq&=##96A
XfRe$[K+_U#&':'XfZY>_uL!7Dl9M5P%aanMuX&qP,bFXDbL'0`rH<WRHEYf@1:$R`;g)N@GU).R:sS?
!)ETmq7coOMuWkYFSWZPVbbA6!D&RQXT2_V!4i.1?hpf)QUoU+o`,"]P5;'WW*u(oo)Jf"W;<CmP"!Fl
!FX%Fjo>VC!3H5$#5RB^a^F'-kl;-9^V@-b/HdY7[(jAKVZ>l[%&(GNZskTi/Rl*%^NRa"$uE&JUe`09
,#>#:Xc2WIT`>L\Xf\Bp+p&raUogb7mf;,C$tuQ:U/3'9,>b,4Vi%h]g&MP>Vl-7c,6B)dU8Oo%aoDR*
k2rQBrW!'%Vrm,4q>c`["A7h=VZHbs"9GF_k)]E?rW(FJ"9X:k^0g^:"CJpYWWKs9dJsCOWkZ;Uq>^Y*
^;#:&c2[tLGHIr@q>^XmXf[rkOT5LbR'!Jbqu?p$!)9PsG6?+j"9W_CVG?sf"AYkmPl],0`;g#AQ)CNT
q>^XnVPeJ;cN"(J"J4c;p](BXk&$:^r;Zn9k2uF="6J[:"O6uLGe_!Rp](CV^V?Ms!4W"2U;+H'p](CV
^V>$K!:p0mD69olp](CJXf[VW!:^$kNifE8p](CJXfZHc!!?r5W%RiF""pOMMrt)@!!A.WW%RiF""pOM
C$>W[!!88Ek4ScVk2o@?!9=+]9]kL2!!;<FOO!n/9Y\;;p&G1j^V=a\!1s5nE50.`p&G1j^;!A9!87DT
7BNXUp&G1ZXfYj@!8%8R>ck+mp&G1ZXK=q<!!>TdVEjhT!^NZ]!*tcg"'qh&5kY0X5Q[g\6dPf7>it/?
!!;<F"N^Ye!!3;ck4AWTjlTgq!!OLY^MNrNp&G23^V;7`!!=^c^MWTC")Yfd+OU5l*NQ;FoDetrXfW_t
!5AL9+K_bKoDetrXfEJq!;ZZt*2TQ:oDetsVl(]0!;HNr+fD5AoDetsVkkB]!!=V/job5U!X%TIirH=a
!p8VIoDesqk2RiO!:9afFhaR>!!8e-T;qtX!!8e-TCMs`T>,Ns!!6o;Mt-iLMlhp-!2TYsMlhp.!!8(\
C@_G`!!6c1M"1NILo6'=!8[\WLo6("!!7tSB$pY\NTNY"!!5RN7/d1R!!5RN7.L<[7-9I/rW(OM"!,.k
,k:p;,eq)?_Z83e"!t^s,k:p;,eq)7e,TRhXfWQ9!;um")m-4^QN.+-XfWQ;!;c`u)m-4\e,TRhVl(O*
!!=4=V]F+aa8c;_Vl(O*!!=4=V]+%b!@-_,k3rBNk*>uK!9WG5!!;<F,Lc\pEke48!!8b,S_X:X!!8_+
T'u^]T"f='!;6BoB<@'\!!8%[LSOqB!!7qXMXUTIMQLO@!!6]/L[Y9FLSoml!3Q;'L8Tgr!!7qRAF'<\
!!8#>6LXsV6KUG9!9X=`4m#*#!!5LLM:DS."1c/rn,NP?^V9jF!29Gq!l)K"n,NP?^UXIC!8RVW"/r=E
n,NP5XfVW=!8@JU!NiIHn,NP5Xf)?Q!!<=tV]kO0"!OS?!LWoi!N2h=nc/gn!$S87"4dGR"Q/A0!<;3)
!6kNDk3`3Nk2-<m!!5@![/9pq!!9OB=d]6k=hh?C!:^$j[(efU!!5-^V="<bV6*;A!5SX:8?J`V!!9"!
384H2!!5'VU@&!_U8LSU!;ZZs8Z/<N!!8mm2V%j09BN8B!!0+^jT)Ue!TpEM!!91_9BZBE!!7G\JF3C=
JA7h\!:9afU;)6H!!7\cH.DrsD67UA!!6r<Nq37K!!81_C[M0(CTVIH!9*t[Br>b7!!6r6N4K#I!!8+W
C[M0(CStmt!!8;F&+0E"&*?UeRK*Cajq$k[!>";oOT5C6!!9OB-11a7-,745!7h,O^V;)_!!4I][+53Y
UTGO.!;c`t*3H?2!!9:)*;0C.!!4.BUXfDHSYmLr!!41=VpPLd!!9'r*UWn/*N,IZ!!:g8!:9ddk*Z2L
joFQ1!!267f)Pjo^VB+8!l)JthZ1=i!\(n!li@(#ru^5#p](@8Xf^pi!j/RGV?$;i!["PHli@'fruB\l
!Z\,:li7*cV]Y7*YQ+_IVl8q^"/r+:)t*dm!!4M0k3N*Jk->!N!<;3J!<;3]-.r8"6GKPe!!918@JKnu
!!6TDWpB]fWkUkequGRR!^*TPli7*SX\QY3g].CNXdJGT".62Q4P9]93iA82!!E9%Q)@EI!!5roQ1+eP
!!ALa3]bpo!`.rqli7''k0*hN!!25!li7-)k"ee+!!6`HM>I;D!!8%mNgg"MO2$PM!:TsjMSE\4f`2(Y
X`Nh/!d(Pig&Sti!dUnhli7-0X]o#c!;um!=Jp3+!!75>GG,$6!!7DCEpNc.F/N,Bf`2)"jr*Lc!ZL2D
k5_mi![?bEli7,+k';7;!:TsiLqd'Y!!69;XjI+P8?q7:Yt3pUmJm<j^KBh&"'E<oLtMb0H`]d(!!5Wl
SFcg<!!Os'['Y96d/X6<X[_XW"%KD>HhRO#!!7AB8F-<X8>hm'!!NrX,9n?DnGqMJ!h#rWli7,YVg!@<
!!/kWl2UkIIF%rr!<`N+ci=)pk3;pJk+e^)!!8M%2s^MG2nuiM!!&5[rrA8\!7q2P\%alg!!>0pQ^?A*
!f=$0o)SUe!\:COdJs8Xqp5=RdJs?IXXj&Ep](CHXbhnf!!7hO/F3?</>o>m!!");.0(F;!!9!p/F3?=
/>n/Sf`2,_jo>DJ!!25rd/a%Ld/X3]k3;pJk-h_O!!8q1-0tU5-,74P!;-<u@fQAde'm@Ts'jFW!l)Jr
li7,6^S@R`!;HNqPH>hk!!4.BXj[7V5L@TVSXlq,cp-@ep&G/rXW6[-"!"G,PM#p;Ni*oa!!41=WpB`L
!!3la-2dfF,q0SX!!90u*UEb.*N+pXmf;YR!Q=-c!<;30!!*?0r;Zj&#jMES!<;3H!!;<$`7Y+lY.k_<
!!3nM^\Ila!!9h5hu1h%huC@<!!9pM($ko&'u-oSquGRR!hHG(li7(tXf^%P!f54'rKRGad"qGsg].DX
XUjau!tVN)S_3uER&:M`!!E9%&>uJU!!+;nqZ$XG,LZVoW2C3r!;um"&>tn_f`2'#k3;sHk0j;2!=8W(
!rr<,!Rh&Kk3;pJk0_T0!!9^G#5\Dk!!3A>^XE/as8UIEc2uDns3grL^V:!O!:Tsj#/@^Zf`2)PXT[tj
!X,X-g&UsL!mo;\rKRGPd*U5A!j/R-li7+jXf/2S!;um!U8J.\!!3;$VpbYG.Jj,F.G4^u!!9'r"RH*j
"K.ugf`2'1k3;sHk2ua3!<3?%!<3>R!<;3H!#aqVhe6]IbK.`D`504&]XkV^[Bm-AY,eS%';hS"TqIsG
R@0>)P*(caMi.GI"mc4F#/C2`:sN@l?-Z9l?-Za$BsNGfPa%qg_.h2#c;;elc<\^lc<\_$c=sS<UQh"<
H1M!mrQZG@s4GUnc<\_$c=sS<UQh"<H,44??-Z9l?-Za$:_h8]c<\_0ZA#'<PbWN?C!L#0:sRPoli8XB
^U^mJ99bX&OH5B[MM[.DKnP)0J:E#qH[9p\F`_\EE,TW1CMIQrAn>K)XTRni%g9#lPqJ=[Pr=m[Pr=mc
Pp8J9;eTKDBLmkAPr=m[Pr=mcPqJ=[Pr=mkG#N'\?>)mHd&R&01TJfuPqJ=[Pr=mkG#N'\?>)la5*\$k
/sS>[2O,n[2O-1c5'Bk<?=%;9L-Ck\PqJ?6"7-!i"KeW$pAj4R!^*@_li7(iVc_CJ!>R'\!!+Mho)R\K
!LX&V!!<A%U8$<@!>jn`!!24Sdf9CM#l=T&#QiES!6j^.!p8Ct.KBGL!sT#;$4RIW&el)t)&sY=+<r-Y
-RpZ!/i#4?2E<i]4[;;#7+f6gli7)%^VA4t$"Er4j3uK;rVp@*!7q2P^V:KL!%o#$Y-%a)!<NB-"pYJC
$OmUX&J>cm()Ii-)]^"C+X/0X-7:8n.kE>-0J^,>&+]et!!3\5Xj[7V5L@TVSXlq/cp,tZ!j/R8o`4ae
!tVN)S_3uEEi0H7!!3_0W7(_H'`fa0r;ZmD.2C;3!iW"-li7,!VjNk)!!B=b!!)?cs5q`0!=/o.!!*90
dK'=0l2UnJdF$VI!i*LUli7)5^VAY+oDelTqu6Y[dJs?`^Ei.G"!t^WUZ):K!!8@d)sdP+*3H?k!!$R,
ci@V4!;6BoXfWQ/!!=4CPEXZ"!fj/uli7)-VlK(`k5YK'q^DLddJs?KV]>%'"!+;"Npcu6!!1%#l2^kH
d/a%LklBrJs5rSH!p7G>f`2)?^GkKZ!]Rm'q#K(J"\>oZjKV8'!!9XE2s^MH2nt]GquGRR!f=$0li7);
Xf0VI"YG21[!jV#!8IPUW3%T:!!=aRM2Bmc!edI&mJm@i!%b%Ed/X=^+X83T&^^R[V5Gm6!;um"/>n/S
f`2&]k3;pIk.]1B!W`E,!!1FH!P[^]!!;;k[b1W^Lqd'h!:g*k=MLu-!!9:;=T&6h!!??<Lks^a!dh%=
li7)VXdn)F_>jY-X[_XW"%KD>Hee]#!!7AB8F-<X8>hlL!;c`tRAWUB!!>ciGB_^?!MefB!!251k5_mi
!Ia+q!!;;XUZqjK!!6]GMX1<EM8,+S!:BggNk^J<!!A(mAS'Np!aDdKli7*.Xa0O=VuQmEX`Wn0"*:SL
>k\6Y!!69#F6il.Ei4/o!9!nZGGfNK!!@8>=BO5V!dWoHli7))js$8p![-VDli7#'!p4fTf`2(?^T-W#
!ij"D`;nKi!b&jDli7-f^Ht9?!!59bR.C=S!!8Oi:7D4b:9BoV!;HNrR&rJ5f`2(7Vj6TK!gTZZdK%Di
!`,_Zli7-QV`Hll!!?$ZD#ir'!H$te!!)-]D<q6)D<=Vif`2'q^VB+8!l)K!hZ1=i![katli@(#ru^5#
p](@8Xf^pi!j/RHV?$;i!ZnJGli@'fruB\l!ZS&9li7*cV]b=+YQ+_HVl8q^"/r+;*:Emn!!4J/k3N*J
k->!N!<;3J!<;3]-J/;"[(dpT!!4I]^\@f'!!9pM-11a7-,6h`!8RVVUTGO(!!4.BXhOkj!!9:)*:<e.
*3H!e!!8^h*U`t1!$.u8R/d;dV]G:-rW!!?Vk)B=!SHQ$!<;3*!6tTEk3N'Kk1J5b!dVP2quH<g!eA%[
R/d;_^OZ:`nGiW@^NnB1!c>&TmJm<(XcD'7_#OOsX_[>)!c+oTgAq-O!bnQJmJm<(Vi78Kq>^SUVeb]#
!c+]Jec5c6jq$k[!Y=EgjoDag!`%kgmJm;!k)nj-mf3DQ^U3D/!jo^FXT7_g!a3:FmJm<q^HU3K!][<Y
mJm<bX[r$`VZ6chXekFc!i<"Yo`3tO!]HsNmJm<_Vb+H"huEgMVkWSZ!huSNec5bEk,RhL"01J`!1<ff
k,RhL!NP8`9)ntE!!<>6^FJ^Q""M(#!lP)i!!<;;^FJ^Q""M'r"4dGS"/r=Eo`4mi"!F_J!LWoi!NiIH
pAk$i"!F_E"4dGS"/;\:n,NP6Vl'RC!6G3C!N2h=n,NP6VkO:E!!3;\k3`6Lk*H)Jk3`3Nk2-<l!!72U
T'u^]T"giP!4r44S\Lcc!!8b,Eo-lj!!6f8MXUTIMQMZ0!;$6mLTQI'!!8%[B@Hn_A>b4P!!7qRL?\cA
!!7nQL[Y9FLSn\L!9jIbM<7.o!!5LL4g>"M!!5=G6LXsV6KX-S!!=7V^Ei@M"!kXr-2.D5!!=O^^Ei@M
"!kXr*Vf]j!!=.AXW-g2!unAE*52F,!!=4CXW-g2!unAE)Un`h)Q0JQnc/Y0!iMq:QN.+.Vl(O+!!E9A
Vl(H_!!4D-k3rBNk/m\J!<;3N!!;<F,LZVoFhaRJ!;-<nT>."`!!Ak.T)eH_!h[5MdJs>`Xc)`M!fO1=
f)WPc!fO1=nc/`LX_QMhq>^S/VhjmD!f3b1ScJNc!f3b1nc/`IVe4?W!fc>1nc/_Zk!\81Z2aqok!\b?
!^u11joFcK"!G:lD=df1D83h8WrVGc""M(#D=df1D83b,dJs@iX0#Os!!?B+XW[-6V#UT?XfYau!!?B+
Wu^d3huEj!V5IMh!!?E&V]iPMh>dX$Vl*_j!!?E&V&[n`""3-k"7uQp"6SbE!1*Zek2ld<!!EDdj!Oj+
!7_&O9Y\;;p&G1j^V=a(!7LoME50.`p&G1j^;!@g!!>ZlX?ZI["TSNeXfYil!!?K.XZuX^r;ZpaXK=q<
!!>TdVEjhT"$ic^?-WGi!!?N)Va0qU"$i`]6dPf7>it/?!!;<F"I/ri!!!/ak4AWTjlTgo!!@J\^H)&h
"$+-2U=oUW!!At1^H)&h"$+-2Gh`;j!!@)?XY';J""gXWNhHIC!!A7`XY';J""gXWD9`+`Br@m^p](CK
W2GR:!36)%Ml3L+p](CKW2F@o!9O7_OQP^!!!;<F9WeBV!!5jVk4ScVk2qcN!!ECV^V4(O!!HZD^T%A-
!1j/n!ij#M?hsa*?bX:-"82`J!!ECJXfP7n!!H#uXdB.$!7q2R!LU!k:&4hm9rtI@"3plL"*:B;:AOqn
:8b"T!Kd?b!L9R\:AOql:8XoiEs'\f!sG4XjnJfWk2pO$!6G3BD<C!U!!D?FScm7;!Hu3b^U.H%">+)i
^V?J%!">O8^U.H%">+)i^V>!8!"<YFXe\`:![:F9Xf[T3!4r4>N304X:Efia:Sb+pCt/OZ!"<M<VkR!4
![CO9Vl,HA!;$7"MPmAH:a6#d:njkcBZ^;XO65T&!WE'%!N5)B9&K]P!!GjTk,/7Z!!E>#k2q`a!9aC`
:T+$'!-G(<jo>C'q7cs.:WNM:8=0.S!+5'mTE"t!q5j[a8F?K4!!,NOqPO@m@C#se!!-N,qPO@W7E>H0
@*/6,!!`6!P5kReq;q_"@/Bs'!7(WL<e%m!]r6@k!6kKJIAjio^OK;&!!Z2>Xf\[iBSQQjBU,[$XT<K<
_uL!7Dl9M5P%_o:^]4RPP,bFXDbJ4QqZ$h6RHEYf@181sq#CU-@GU).R:sG;s1ct^YQ4^<eH"q9s/h[h
klCac^]=D4hZ0DOs/4iVhZ3]=V?#BOs5rDC!G!GN!!-UTkQ(Xtli<=Os1e"&pAb4t+Sc!<=s3#/s/iU-
cN+!IjT#<_+8Gm;=!-W+s/5YmM#dRRquH!^!I-*i!!.<okQ(YF^];4Os5rDC!K("T/HM\"lN$nas1a<h
qZ-Z2jT#=0;#)O@Pptnss/jNG[/g6/jT#=,:&-.;O=0f'nGrTePQ:+Os/4rY!N'W-2?CfUkQ(YFg&S&O
s5rDC!/gWfrkAFbkQ(XtT`F$Os1dXq!.FUD!%I+3s/kGaRfNJjl2^_^!."=:!%6t1s/3""e,]NHjT#:X
pZ;H6kQ(YFoDjmOs5s%UrW)Kh!K("T/HN./kQ(Xt\,aYOs1dXq!I[f?.06+kkQ(XbrW%TOs/kA_!I7E8
-NT_bkQ(X\`;mROs/4rY!N'W-2?DDfn,W7as5o7?p&P-TjT#==/boAIMCn#ls1ct^YQ4^<jT#=0.JWrE
I4>*pli@'fR/lIOs/kA_!I6'g!!.?mkQ(X\hZ0DOs/4rY!i@jUq>^Pn2Wt/@k,&.6!<;3C!!.s/q#CF?
%d3om^[(rd!<9h&!;?HoI4=sl!?_j8!<91-!7(ZFXlTN`GpiCf!?Va6!<8tm!/U^UVu-P[!!/rTq#CFF
&a05pk.gu6!<;3C!!.s/i;iiWs1a<hqZ-Z2jT#=0.Gb()Xj$jR!<91_!!.?mmJubWs/2(]mK!9bjT#=Y
2VnH6k1Tg6!<;3C!!.srqZ,[Ws1b6-i;inmjT#=0B&3OfXlf\R!<91d!;lftH",V1s/3""e,]NHjT#=Y
LY`%2k4AY6!<;3U!<)uh!!@2TE#IR6s1c&DaoMIVjT#BpX_&C-!<92#!/(@PXlTNb@]*ZNhuNeT`;mRO
s/4rY",H#o+6W_#!<;2?!;6Emk2QFC/Q`nL!<9g^!3cJ'^Z,:q.8UiS!:0^cXdK1R!<91]!!4NB(?#8n
Vr%KL!<8tW!!"nXC*2C7s5p0Yg]7B:kl:aA/_U4)^[(rd!<9h&!;c`sI4<kMs/iU-cN+!Ikl:a0-e\S#
Vtg=L!<8tp!:BgfVDd-.s5q)s_>sVukl:aA/_pF+!<9fh!;ccr^Zb_!I4<kMs/jNG[/g6/kl:a0-gC^%
!<8s]!:BjeVs+0^VDd-.s5r#8VuZk[kl:aA/b]8+!<9g-!9!qX^Zb_!I4<kMs/kGaRfNJjl2UkcGph;G
s/3""e,]NHkl:a]2VJ02k4AY6!<;3U!<)ul!!.s/g&V/f\,aYOs1ddu!IZEN!<92#!/(@PXm#fdGph;G
s/3g9]`A)1kl:a]2W=`4!<;2?!;6Emk32jHMCmN^s1ct^YQ4^<kl:a4.IR9'!<90h!9jL`Xm#fdGph;G
s/4`SUB(=lkl:a]2Z*R4!<;2Y!8ISSk32jHMCmN^s1dn#Q2ps"mf<4b!IZEN!<91-!7(ZFXm#fdGph;G
s/5YmM#dRRquH-b!N%d/!<;2s!5\a9k32jHMCmWarW)u5LB.2Os1ddu!IZEN!<91G!4;h,Xm#fdGphkW
nGrTePQ:+Os/5)]!N%d/!<;38!2ontk32jHMCnQ&j8f4pT`F$Os1ddu!IZEN!<91a!1NugXm,lf!-osG
!<8t"!7V#KVs+0^VDd-.s5rqRNWB+ApAk0mp&G8R/H>bq%fHA.,7`c7s1c&DaoMIVkl:m8.0'>j%K-8-
+:[B3s/l8#KE2%Skl:m4-NF,g%/g/,*t731s/3g9]`A)1kl:ma2?3_,&cD\1.M;"Iq#LHWMu`POs5rDC
!K("X/HM5Xj8f4pdK$KOs1dXq!I[fC.05<<q#Ka]s/h[hklCacjT#=,:&QF?Kjs*Cs/4`SUB(=ljT#@Z
C,Z&L!OmjF!<;2Y!8ISSk2cRCMYb'f%cm]j^[(rd!<9h&!;?HnIJU&G%HRTiXg8#R!<91_!!%<@VZ7.e
!<8tm!/U^UVu-P[!!&nmjo?"T!<;2s!5\a9k2cRDMF.:o"#jaL%d3ol!<9fh!;ccr^Z>FrI6@KX"#=%8
%HRTiXj$jR!<91_!!.@+r[.e%="k'U!:^'hVj%2L!<8tY!!/rmr\ajGGXE))!<;38!2ontk2cRD65f_%
!=kIs%cm]j^S(Yd!<9gq!!,1ur;Zm.M@JYIs/kGaRfNJjl2^_^!BM"p!!3R_%-7KhVlg$L!<8tY!!,k;
r;Zm2[h7^%s5rqRNWB+ApAk0mli7*9^E_h?s1c&DaoMIVhZ*^uXWZ^*s/l8#KE2%ShZ*^qV]Y"#s/3g9
]`A)1hZ*_Fjso`uq#LHWMu`POs5r>A"W8mD,7YsZ!<9g^!3cJ'^Z,:t(F^dU%3YHHli@'fR/lIOs/k;]
"VrI5*t07P!<8tS!2BPoVrIaW*s=J[.M4/k!<;2Y!8ISSk2ZLHAA=tHV3iLg!<9h#!1!Wb^[D0r!!ZW/
Q(aJ#+QNP&Xg8#R!<91^!!ZN&OIVDd+63G%Vtg=L!<8tp!9jIfGim#t`j[GY!<;2s!5\a9k2cRJ6F&0C
MCgEIk5bJ]s1a<hqZ-Z2jT#NJTd]ti.4L/8!<91G!4;h,XlTNf3h.PtGpatnoDnC]s/2(]mK!9bjT#N]
f/<W+2E&&*!<;38!2ontk2cRJMG4'NMCegc!$gS*s1b6-i;inmjT#R77K<F:.0+c=jT,=_k5^tOs/kPd
qu@"J6N@+3-NJE6jT,=YXoQrOs/4rY#c:l-!2_XSVCL[-s5rqRNWB+ApAk0mnc/rQ/H>d./Io'<jT,=q
\,aYOs1dXq#^n-%!.?:*Tdf('s/l8#KE2%SjT#R3-NF-l-OcLmjT,=Y`;mROs/4rY#c9K[!2_Xdf/E!r
q#LHWMu`POs5rDC#>IMb!/d/LR,e8I^X<+d!<9gq!!btU!!%G)To/XGli@'fR/lIOs/kA_#=CNP!-s9g
L#`76Vr%KL!<8tY!!6G%!!E;!\(A+M!<;2Y!8ISSk2ZLHA7QR8Z>^<7!<9h#!1!Wb^[D0r!!ZV1(O_uh
%HINhXg8#R!<91^!!ZM+(3uEZ%-.EgVtg=L!<8tp!9jIfG^(=-f7st!!<;2s!5\a9k/.2u!<9fh!;ccr
^VBjLXj$jR!<91J!:^'hVj%2L!<8t4!<;38!2ontk2cRJ2o!+%!*G+'j8f4pT`F$Os1dXq#;WE`7K?85
+QNP&Xlf\R!<91d!;lg%0W1g9!)7_\j8f4XXoQrOs/4rY#=IY9>l\W:.c^U0k4AY6!<;3U!<)uh!!eC=
2mO;[E3eO)[_KnujT#O6I57K411m6@!;rsNXlTNfH$M*6(,03fj8d)q];O`j#H"@cf,mA8fB`M5!/fq2
k2cRKE%M&VDu]lq/`cuZ^TP?5!!m0c!'Fin!.?<m!:0]PXllhJ!!m$]!'4Qh!-osR!8XQHVr[m[LGf,9
:PSoMVDdN9UupCnjT#Pr9`P0i%M#<ec2`FrpAbI.7K<FR%1SROPlS&h#Rj'#!0@TtO=/c_JcP'9#SC>B
!6,T_`\sOkU]:[&V2C/9R'O"-kQ$27h#I^WQ$n(SMP6^QY5jmh#YgD+H(9SYS.,&jJcO-t#\qAVVUr</
f+GXqM?![+R/VsEITRhH!5ed;Ef0jE!ch*[a8gelqu?b8L&Q?!DG;46!4Dk.R(*'l!gm^PeGt1$rW)Kh
!CAC:!!+;SR/j;g!B_h0!!+2OhZ/6.jT#<B-iF#G*t5"HT)\mf2Z3UV.M;"IJcOF'!K("X/HM5XZN--g
!I[fC.05<<q#H!Hb5_Qg:&QF?KjqgtK`D1OC,Z&L!Omi>!58F5MYb'f%aG'+!;?HnIJU&G%@$pu!!%<@
VZ7.[!.k49!!&nmjo?!f!2KSqMF.:o"#jaL%d3nE!8RVUI6@KX"#=%8%Bfbu!!.@+r[.e%="k'U!.k3t
!!/rmr\ajGGXE(U!/^aW65f_%!=kIs%YFc!!!,1ur;Zm.M@IZ-JcP]K!BM"p!!3R_%$1It!!,k;r;Zm2
[h70kJcPcMli7*9^E]0IV>p[<XWZO%JcO[.!cFnXVZ<+b!gr+"m/V_<dJs:X,I7B/!!*NOq#H!H`;foI
+2@l.!<)s!&LrP9JcP$8!MqCH!!/p8jo>Ea^\\!4)8AN8!!-3:ciBg@!L5,4!!/?skPt\b!)Tfp!!3t=
4So*Z:p$&ag].A:-iF#GOCI>P!DTKh!!3q63r8mX9rHeIQ2gs*2Z3UV`eX3enc/]*k5,,[+6HAr!!-is
U]B'J"/WcIV>C5nV*b.]!i<YNhZ+$%^V<)8!(&7;=MMW9!0[BbQ*%0RqZ$Y^4T5<]Q)t$uhZ+$#XfX\c
!'D\1:p$k)!6bEFOJf"<qZ$YY3rT*\OJcRF!"0R?V`FeX3[Xo%Vl07hL&_=qk2s\\!!1)8rW!#>k(hgo
$QnNn:B1Aj2?7LSk.Ui2!"t/,!!'d1!!"Uc/W(FBDu]m7E8CR")8AK<!/`?.!WZ?;K`LoK&q(Pr!3MLd
!%G$!I2A/\!!&9rh>dm!XZQR`I45-r:p%n@ZN(V`('"?4O8o8.V^Ha*OCA1iOCI5Mqu@'>V`FeXGp`Rl
9rF-Sli7Zq*rl<'`W,usju0(Y`eONo`eWCN$6SD+!!&lS!!$crfDtmNWW3&;/cG_V6GFB<!(+GXV2G6P
!Msc&!:g*s)8AK<6GG)P!*I"+!94%[(Ff=`#s>=+!!#-`I?f6[!!/?sh>dm!XZQSGXXO5M:p&^WSH&[+
-iO)P3i<_n!'7$'OEpg*!K^de!9F1f(8j1n3i=>*!)9Aj!7h,N+#a)u#uB\*!!#gWVT,M4!!1)ph>dm)
k"btQju*2>C?FsbMZ<c0^]"386GL:3!/gaU"f60?^V<nG!"VE2^PW#f^V<kN=ML[4MMhB5#"$)>6GGih
rP&O:=MFj4^SSLA_uKfeXo8;'4KY`NIJs3MQ"EjpX\ecm%m6trI/oP7X\]!oXd&m7IJs3N4KY_JXZTGY
XTni&XT4WgPlQC9r;ZjGVu?Z!3iAm;H2[dIOCCq^VbQpd%m$VdGlWr(VbI.cViUn(H2[dJ3iAl:V`IQN
VZm,qVZ;gVON.@1!!,"?rW!'sk2s[\rW!,ALMGu6CA7c>:Zgf:!640`C&i#2`W2m5rW!*tk2oJ%:B5/.
jotg#joEE``f:&g!#&IR!!"Uc/W(FBDu]m7^K:J<^I%\q"rY0-!!$-9rW!jU!/eOK!!#@#!!%nk63&UP
/H>cQ^SMec^I$HNWW3]/AcMf[XXSZ7Q"C!rQ*!j_:oukT!!X7A.0'?EXo8;#Af1SsXaL0L4KSS`IB>U3
.BP$!!)Te_(Dj29S,hRL'2;p9!%4ZlGnuKN!!&+Y9`Rnc3qr[Z(8iM[!)9Bj!#f;HH)Gof!'7"X!-tJ'
!%4Zl!!#`kO;8V03oU.1!#'+&!!"q>2PqS9LB%=ok%Xm2k"kgR#QOiHju*2>C?GKq)M\<ik,&+Y:Z_WW
VWLYS2Wcmt!,CZ9+!9W@W;tKL!2]Pm!P^u"!!/p8rW)tUpAcG7=9&=f^Hqo<63%"CM?!Xk63%!'^HqoP
^F]Ec=MG^R!2Wfd!0@0\Q2:O^XZZO^!0mOrrW)tHpAcG':]LJXXZQS"49,A0I/j8L49,?tXZQS4XXO5M
:otN6!0pBh!6G3@OS]"YV`ObV!K^di!<7?=!$dS"!!#'X3WKpV!!%:i!!&oX!!!e43WLP*-NF-@V\T74
OA5WQK)bnkqZ$ZZ:]17o`eXNns/,Mj,K=Hu!)M`Q!$=u:!2cUn!9R&W!$C?!!&ist!!$cr*rl;\C;U%b
!!-1RqZ$Yn/c>YMV/ZD6!H=n0!#o%:!!$tqM?$`r!!%n6!%kr'!!!nO63&UP/H>hP=MOh8!Msam!;6Bn
:au8A!L5,4!!/?srVut2Q1k8":mD"\Apo(-:_s*3I=2)EXVUs;(Tfe".BP$!!)Tfs!!/?sciC9M!DOs=
!!/0/r;Zk[@f??.@Z^<a%S`#b!+L5!!)44/!-rhi%k"7j!!!e43WLP*-NF-@Vu?YsOCFOVkl:a!2Z!IT
`]!bq!QKoo!!.kppAc7L`W-!oVPX?.*rl;<V>rO:*rl9_k"bt8ju*2>C?GKq!QKoN!<)tr!!,DgoDeog
E;fh<E2E:/"<"s+/OBPA^Ar6P!"t0H!%kr'!!!nO63&UP/H>cQ^]"36V/W+.huEd?;"O_gQ"L!q!G7Vk
!!jCC.4IAUXT2u4!"s^.!%G#d!!!h;49-h4.0'?EXo8;$Q"K1ZRK*@L:%SDdOCJ1h"(I>l!;QU#(8iN-
3_cLP@f???H$KB;V\T74(8j1n-`8<l!)9Bj!!/0jXoQoN!DdJ&!!1)prVutS`qKH=+6GI>:MT"lL].8d
VPX>OjrXR'+6H?!2Wcmt!,CZq!!1)poDjmO!A/9b!;uluV/ZD6!K("Q!!f?&Du^cj=BPP&&rMPH)8AK<
!#`O<!%kr;!!$-9rVutqE4Z+j!!+N\o)JfVB)Vc2I8KV;#F/+t!#Mb6;#UG-I=2)3XZQR`(Tfe".BP$!
!)Tfs!!/?sJcGiP-XuZI!K^di!!.@>p&G>Z9k")<VbKnb!"sR&!#DIn!!!e43WLP*-NF-@Vu?YsOCH92
\c;ahL[tKH`eXNn!N'W*!!gMYLB&FYC23_J$Ds[#+6H?!!$C?!#66[E2?3_lk5G>]`eTTToDenDMZ!MT
MY@)SV8!!1=MOM/#?[gA!!%nk/cG__MM_B6MSC#/=MMUQ)8AL)/Qfde!!/p8eGu`P!@`Hq!!%HA!!SXi
!!#ito`,7oQ"C!rIB=pu'EA,]I/j7qXVUt6XfYD9XZS]p:p']s!L78e!9X=_-[GXj!.";="d#V^!)9Ba
!!c5[@K6CRV^MHD&p\a&!-tIX!)9Ah9bsWf3[[Y"rVut\@c@B]!!,!Tr;ZhppAbB:jo>Brk4o#U!!d8Y
LB%=Oju32=&uMN+!2em#!,CZYC*2S6:GutMrVuu=LT(:.!!#@_^AokZ!!A+n^P_X`"tdS-!!#@#rW!P,
^V?TF!2[HFE5+^>!/eO1E;mTP)?.ANMXUV2!!#.YXT0gD!!@YOXaTgA"t?Yj!!#-`rW!OqXf[ig!0s[g
B!"/q!.Ct]B)\n4(]LN:ICB4%!!#(WVZ8+<!!@MEVg7n7"t-;a!!#'XrW!OlVl,UV!0F+V@])6e!-tJO
@fE8*(B133H2R`!!!#gmjoOU&p&G2lk2rQ5!!Y@D*rl::k5G>m`ocF'!!(%$k(i(p!!&nYLPPlk!$D4&
!2d[7JcLB&JcLB&JcLB&rW%NMJcLB&JcLB&JcLB&JcLB&JcLB&JcLB&g]7/b!2Zn"Q2p`_!1!6XJcO*s
q544S]`<lhqW7h@`e4>D!.k3&!.k3&!.k3&!.k3&!.k3&!.k4M!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&
!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k4M!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&
!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k4M!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&
!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k4M!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&
!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k4M!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&
!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k4M!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&
!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k4M!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&
!6kLo~>

%%EndBinary
grestore
np
133.333 91.9069 mo
128.979 91.9069 li
128.979 86.3795 li
133.333 86.3795 li
133.333 91.9069 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 198.36 ]ct
[6.09011 -4.12496 4.2672 6.30011 125.976 108.13 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 29 
/H 30 
/M[29 0 0 -30 0 30 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 29 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 29 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 29 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 29 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcLB&JcLB&JcN^h3L$:a_.h2#c;;elc<\^lc<\_$c=sS<UQh"<H,3g#8;9<n2O,n[2O-1c/sS>[2O-IL
;eTKDBLmmR!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3r!.Y~>

%%EndBinary
grestore
np
136.262 91.9697 mo
133.78 91.9697 li
133.78 85.68 li
136.262 85.68 li
136.262 91.9697 li
136.262 85.68 mo
133.78 85.68 li
133.78 84.5227 li
136.262 84.5227 li
136.262 85.68 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 198.36 ]ct
[5.4601 -3.69824 4.40944 6.51011 130.06 108.733 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 26 
/H 31 
/M[26 0 0 -31 0 31 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 26 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 26 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 26 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 26 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcM,;!%R@9qu?^>kPtT+c2[j:kPtU@n,W7a!/Th=!(?&O!@>MF!!+(Akl:`)Vt0o^!!)0G!!/Y*kl:a>
Xm#fdL8X89!BoT=!;-<n!l)M8!!32'Xm,lf!N2j[!<;3H!!6<<[.s^m!!5]nV<S$^8Z/<I!!25^l2Um[
^OYSL!fjBuquH0c!fX$ml2Ul\jq$_W!l)Jrl2UmfXW6U+"K/.<!!)?cs5rSH!%Io^lMpo,riPJd"!FM?
W9OB_joFQ0!!?ZEWiG@b"&>tcR-O_S:T'JCl2UnJD/JS="-:3RM<b-DH*)./lMq$3VfHhD!!=G-)&_`?
"0K=?=RH1g!!Aan7Rl\D".?&X8F$6VIHKbo"1Q$(2sUGGW3%R#nGrFd"/VnH/F*9:^?4Y[s1eR[lN$se
ruC>)"0/7>*V9@,!<;3G!<9h6($bl"XoApt!!B0t&.n.-s5rtSo`5$,rs%chs/l;(lN$s_rrhWf,j+4h
!+!lHc<\_$c=sS<UQh"<H,44??-Z9le--"6PqJ=[Pr98?5'Bk<?=%;9L-Ck\PqJ?6!s@fg!gs,ml2Uh.
klCaurtOc!s/l;3r;c9d"/r+.&*j5qk32mG^],SF!<92$)s[J,Wi$gV!:0^ck32jJ\%aj\lMq$cXXbpf
!!B'q/1g)e!P[^\!!B@<=BOkh".ZJ_7dC$VRAWSHlMps6k3;pL!04gOMX(6EH*)11lMq$2VfQqF!!=A+
)B.oA"(AsEWp]rd!!>uuR$d1>"&Gh[Q0J>Nk&"u$!!"DG^Ztk"*r`;4!;ZZt+/c'9l2^hGl2Un#^Er.F
!j/REl2Um`V]GF1p&P-Tkl:dZ^OYSL!fjBul2UmEVebPt!`%kgp]0mc!a3:Fl2UlVXek:_!_K;akl:bH
Wp0Qc!l)MI!:Tsi!NiKh!!32!Vs+3]k3;pJ!hI*k!!31VXo8=f!!31UVs+0^4m%7~>

%%EndBinary
grestore
np
grestore
140.76 95.76 mo
111 95.76 li
140.76 95.76 li
140.76 95.76 mo
140.76 95.76 li
140.76 85.68 li
140.76 95.76 li
111 95.76 mo
111 95.76 li
111 78.96 li
111 95.76 li
140.76 85.68 mo
140.76 85.68 li
140.76 82.82 li
140.76 85.68 li
140.76 81.82 mo
140.76 81.82 li
140.76 78.96 li
140.76 81.82 li
140.76 78.96 mo
128.91 78.96 li
140.76 78.96 li
127.687 78.96 mo
126.36 78.96 li
127.687 78.96 li
126.36 78.96 mo
111 78.96 li
126.36 78.96 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 198.36 ]ct
[28.5605 -19.3446 17.3533 25.6205 102.829 107.878 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 136 
/H 122 
/M[136 0 0 -122 0 122 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 136 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 136 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 136 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 136 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
LB.@hrW%NMr;cl"L]I&Is/1tZlN$tIRK2=Is1b</f`;&SX8pTIs/37)`rQ/%^&YkIs1cSS[/g6/ciC-I
s/4NMUB(>ViW,DIs1dk"OT>E`oDj[Is/5eqJcPcMs5o(:o`5$,O9"VIs/h[hirK+WU&`mIs5p?^d/a3]
ZiJ/Is/is7^B";3`W3FIs5qW-XT8C9fDq]Is/k5[RfNJdl2ZtIs5rnQM#dRjquD<KrrE)$o`0aIs/5hr
JcP`Ls5o+;oDnp+OT=\Is/h^iiW0"VUB&sIs5pB_ciF*\[/e5Is/j!8^&\22`rNLIs5qZ.X8r:8f`7cI
s/k8\RK3AclN!%Is5rqRL]IIir;_ELrW)u#LB-uIs/1qYli@(JR/l7Is1b9.g&V/TWrUNIs/34(a8l8&
]`>eIs1cPR[K-?0cN('Is/4KLU]CGWi;f>Is1dh!OoYNao)OUIs/5bpJcPfNs5rtSLB.@hrW%NMr;cl"
L]I&Is/1tZlN$tIRK2=Is1b</f`;&SX8pTIs/37)`rQ/%^&YkIs1cSS[/g6/ciC-Is/4NMUB(>ViW,DI
s1dk"OT>E`oDj[Is/5eqJcPcMs5o(:o`5$,O9"VIs/h[hirK+WU&`mIs5p?^d/a3]ZiJ/Is/is7^B";3
`W3FIs5qW-XT8C9fDq]Is/k5[RfNJdl2ZtIs5rnQM#dRjquD<KrrE)$o`0aIs/5hrJcP`Ls5o+;oDnp+
OT=\Is/h^iiW0"VUB&sIs5pB_df9T#W4fs\Ioa#YaoDWZQ)q*iF&'LN_#O[QP,bFXDbJ1P\,Z^A@GU).
R:t"KYlFcGq7cs.:Yc#L!!$C%XT=bZjoD"R!F_r'VZDrLmf8XR!!`8]!QeaE!0.$eTte@L@P%^7@^Nnb
!-X(s!fa=a$)C?@![:F9XfZAt!;ca)Ml3JI:a6#d:njkcB9`Jf!!GpVk,/7Z!!E>#k2qa$!!0)$VZ?#_
"9PU<^L-g;"CJmXK*2#O!LNnl!9*t]!LU!k:&4hm9rtI@"8i-"Pl\Dqf`2-UQ)CNTq>^XnVPeJ;qu?_6
_#Vd]!c@)^p](EXk+2_R!!0j/b5fQ_"/<QF3VWRV3PW=Rqu?c"Nmn'C!!A7`XY';J""gXWD>XA7Vi0@2
[/^;eVl26C!!=jPVeQ&/!Tm)<!3?/%9]kL2!!;<FOSf([^V=aW!2KSsE50.`p&G1j^;!A?!!9:)>knAh
!!?K.XZuLZ"$`lh7K!5dVZ:"d!!?N)Va0qU!'gU_VaLC_!p8VJP5kXek2uUBp](BWk$7ib")Yff.[9u9
._i`8p&G6r!,]Ka+T;?C=fneKPlLt1XfY_+!;6Bp=fn_FrW!%(Vl(]*!<)s#+fD5AoDetsVkkC4!!38b
k+D_H!!;<F"7uQq"6SVkrW!%mT>."u!:0[eT>.#h!!8e-FoD@CMi4]qZN0"c!fO1=nc/`LX_Rh8",Mc2
LqE`A!!7tSM"1NILo4ka!!>VWk![/gd/X59k!\b?!^u11rW!'H,eq)?cN)&e"!t^s,k:pB,eq)7!!!rW
XfWSq!5JR:*3H=^nc0"9XfWKA!#uuVV]F^r[f?LNVl(O*!!=4=V],L6s5rPGXT8C`n,NOPjs0g)!hR/t
o)PTe!hI)tn,NN]^N08Q!fF+8quE5e!f*n8n,NNIX_7V5!s"+SL6hlAL8Tgu!<)s"LSn\]!!5LL4dQ-M
4m#*/!;-<n6KX.'!!=^c^B0f'!s66P.e!EF._iLr!rr<DXfVVu!;HNr!NiIHn,Ne<Xf)=(!!"1?VZEgu
mf3FjVl(^-!!FICU&tMs!<;2f!9F4\k3`3Ok2-:ErW!#,^KJ5Mh#ILZ^U3D/"15g,55kN`V6*;.!7UuM
8?J`V!!B("3&pm;!huSacN),g!_K;amJm?`V`$I4!!0+^f)WVe!TpEM!!B7`92#6a!eA%[i;gCg!i!G[
mJm?>^Nk,(!!6r<Np6VK!!81_C[M0)CTVGjrW!"8Vi:3IVZ6dWVeb]#")FfKC&S)6&*?Xb!1j/l:?E)T
!!NnqOc]VD!rsX^^R5''^V;)b!<)s#-,6gorW!!>Xf[uk!j/REq>g0g"!"G<U](5p*N,g'!!9'r*V0:/
!!=7>SXo]Zs5o^Ls5s1Ync/aRf\$-&!l)JtRfEL=^VB+8!l)Jlr;Zo$XWF8<p](@;Xf^pi!j/REr;Znt
V]W#@mf3D3Vl8q^!iW"9r;cl[[/f:gs5rYJ!p8Vkr;Zo!^L=kWh#ILb^T-W#!ij"%r;ZndX\Qq;e,TPF
XdJGT!gp)Pr;ZnaVbb\?b5_T>Vj6TK!gTZEr;Zk8k1KaN!!25!li7*(k"kpU!fFaQirHUi!ft*Qli7*E
^L[9C!d(Pili=6i!dUnhli7*/X]t`(!ct8`o`1li!dLV`li7*.Vc`lt!ZL2DrW&Mi![?bEli7,+k'6t+
!!69;XjI+P8?q7:Yt37B!j04>nGrIe!a*3nr;ZmgXdmc="YG21[!jUS!!8[m7f!,V!!5WlHi3pG8>hm'
!!NrX,9n?Dd/X07!N/KT!!5]hGPhFAk'bSV!s&N-!S@DJ!!.N1l2UkIU\t/o2nuiM!!&5[rrA8C!:Tsi
\%alg!!5*oQi-mc/$5bu!!$R,ci@VC!9X=`W3%T:!!4[QM>[DU/>o>m!!");.0(F^!8[\WV5Gm2!!4^L
K_tfNk.]4Cq[!-#eGoWak3;pIk-k3g![YUrdf9GYs83)]e'm@Ts'jFW!l)Jrli7)5^SC`-!Z\>Ef`:mL
#sZe[Y+;,dbKrK&!!9:)*:*Y,*3GG'!!41=Wo=$L!!3la-2dfF,q0SX!!90u*UEb-*N+qq!<;3I!9aC`
#R:5-!<rhX!<;3H!!26#r;Zm6^VBC@huEhks53e#!oO$jdf9Ha^D6)8!YrJQr;Zm0Xf_O%f)Pl.d&R&0
!ijV'df9HOXUjau":qW*!!!-%!"c',df9Cn.Jj)G.3m:A!iW".n,WCe!YD8squHcZdf9CL#l=T&#Q`BS
s5s(Vo)JgRdJX%H#/@q%!!<3#d/D5kdJs6q!!9pM#4_ck!!3A>\buL0"KefT!!:NoQi30NRF'=0!!9:)
"T&2i!!3;*W;Q\t"K/0H!<4MF!<4Ls!!9'r"RH*i"K/!l!<;31!<3?%!<3>[!;HQok3;pIk26+;1BtVo
c;;elc<\^lc<\_$c=sS<UQh"<H,44??-Z9l?-Za$:sN@l?-[/iKqjlsUNuG1hu1hAhuD?S:sN@l?-[/i
KqjlsUNs[ic<\^lc<\_$c;;e#?-Za$BsNGfPa%qg_.h2#c;;g9"mc3j#/@_I!&Fb[hj#gZ2O-1c/sS>[
2O-IL;eTKDBLmkAPr=m[Pr=mcPqJ=[Pr=mkG#N'\?>)mHd&R&0'roWWPqJ=[Pr=mkG#N'\?>)la5*\#H
PqJ=[Pr=m[Pr=mcPs0@iBO5"Y8;9<n2O,n[]*%C"!X,X(r;Zm%Vc_CJ!>R'\!!+MhpAitK!LX&V!!3;$
UAOulk"=)&!<NQ(!!3E-!7LoJbj#0/k26+;!YrJbdf9DXrs/J^e'm@Us'jFW!l)Jali7)%^TRM8!Y;E8
g&UsL#sZe[Y+;,dcHnf)!!9:)&*s8t&$;E$!!3_0W8dmJ!!3la-2dfF,:OAV!!9*s&*s8t&>ton!<;3J
!9X=_#R:5-!<rhX!<;3H!!260r;ZmF^VBFAh>dP>qu6Y[dJs?`^Ei.G![YUVr;Zm=Xf_R&eGoS[qp5=R
dJs?NXW-U,"!"G,!<)s"*N,pc!!");.0(F;!!90u*:X%,!!41=Nr/nWk0X2+#giYPk4o#J!!26#r;ZmX
^UMSj"\>oZjKV8'!!'J/^GkKZ!]Rl\r;ZmLXf0VI"YG21[!jU[!;QTrW3%T:!!4[QM>[DU/>o>l!!NrX
,9n?DiW/HJ!i;eGli7)<VhFsJ!Tq,C!!<6)"9Icfk5YOsk3;pIk-k3g!a*4>^&[!i!j04>li7)h^PMgg
!_0;^`rOWi!h?A^li7)VXaC!H!_B5WciD8i!h#rWli7)XVg&%=!Tng`!5ed;IHKep!Tp0U!!8"lO5^/N
!!81qMX1<EM8*X#!!75DH0YI8!!7GJFR/u/F0/^G!!72=Gk;!7!!7ABF6il.Ei3%<!!4&#,5hM6!!4;*
)XIG,)<Q5F!!E9%WkVu3!!6TDWpg#e!!9186N$lcR&s,Q!!5otR/$aS!!8Oi4T,6]Q)@EI!!5roQ1=qP
!!8F`3rK$ZD<@5d!Tn7r!:g*kD<=Xm!!9pM.@U;=-bmF_!!9pM+8l0@XfW\@!;HNq*j)R2!!9:)*;oj=
W2Cc?!:Kmh+/c((!!9*s*;om;k-Y3N!<;3J!!;<F-N3uH-,74/!8IPU^V;)_!!=O^[']f4!Z\>E`rOQg
!j/REmJm>/XeVZj!!41=VpGFd!!9'r*UWn0*N,I!r;cl[f`8hgs5rYJ!p8.frW!"M^S9]f\,ZT)^OY_P
"+\.3H2[dFCTWW_!3ZA(Nid*b!!@#=D/K7P!c+]moDk`g!fX$mmJm?)VeKlE!!3\n:Ak0`!!5pX&+0E#
&*B":!!E9%[(fb3!!6<<[.44q!!BUC5!JrG!i<"iR/d:ZXekmpoDeuiXZ/<>!!8mm8XTP[8Z/<N!!Asn
2E(O7!NP:U!;?Hok,RhL$**,\9)nrA^V9iN!:Kmi!l)K"n,NeF^UXFK!!".DXT>d/jo>JaXfW`8!"'jN
Vum,%!$S8<!PJKh!!<8"V]kO0"<j\;!sAN&s5q9#dfBF1mJmOThZO&^!1prrc2bue!hI)tn,NN]^N08Q
!fF+8f)WVe!f*n8n,NNIX_7S4!f*\.huL7e!f!V.n,NNFVe#`+!^c$4kl@me!^5[4n,Nb]k(s'<,UC.>
-1V&5!!=O^^Ei@M$7*C$*<6'Y)m-4^qZ*/e"!"GF)tEt6)m-4\!!!uY!iMq:QN.+.Vl(O+!!E9AVl(I3
!<;2H!<;3Y!;6Bqk2mlg!!Ajc^Rpbk!h[6"o`4sk!h[5MrW!%YMlho&!!8(\MuE_L!!8(\CAn28Lkqsb
QiR*c!f3b1nc/`IVe5o."%5Q>7%jVR!!5RN7.L<Z7-9L.!!@)Q^FH5`li7,;^V=XX!!@)Q]cd:S"'Mb.
+L;(.!!=@GX]b8r"'Mb,*W?$@>,S8A]E$Xc"!OS?>4_ds>,S2:rW!!%k2sS^ci=.0job5U!s@]G-iO)I
^V=a4!65'AE50.`p&G1j^;!A?!!9:)>h/nh!!?K.XZuLZ"$`lh7K!2fVl*hX!4;e/?)OScp&G1[VPcf[
!!;<F"R#ie!!3;ck4AWTjlThH!!0j/n,T0_"/<QF3VWRV3PW=Rqu?c"Nqi[C!!A7`XY';J""gXWD>XA6
VZ;X;!!A.WW%RiF!%n>OVeQ&/!Tm(<!!H!Xjo>DV!!;<FOSf(ZWWJFcr;Zs%WkZ;Uq>^Y*^;#:&qu?bb
!M0;`!!E=iXfY=o!!H#tX`jmF!!/>cVZ?#_"9FdcVb['g"AYhlEs)=?!,\n>i;`prk2uF="6J[:"L8$Z
!">O8^U.H%">+)i^V>!'!6tQQN304X:Efia:Sb+pCr-1k!"=a_VkR!4![CO9Vl+4O!5&:78ET'4!WE'%
!N5)BO4408!!%-:^B(6.g]4;R!+5Q(!LH@=!2';m@As%#!Kon>!1*Zc#5RB^a^FiCMuX'1W4fs\IocOK
K)bmb"dQ0kX`I83!/^a]BTfBnVf,3.JcH#U$t7uSk*]n?!;$9k^QAN^!<90i!9+"YVkX7F!<;2_!71`G
^U4'^!<918!58I5VoJeF!<;3.!3?2#^Y&U^!<91\!1EofVs=>F!<;3R!/LXT^\n.a!<)uuXbQoL!<8sY
!:0^ck*Z50!<9g.!87GQXfDHL!<8t(!6>0?k.Lc0!<9gR!4Dn-Xj7!L!<8tL!2KVpk2?<0!<9h!!0R?^
Xn)OL!<8tp!.k4N!<;3S!/CRS^]"4b!;uotXbZuL!<8sZ!:'Xbk*c;0!<9g/!8.APXfMNL!<8t)!65*>
k.Ui0!<9gS!4;h,Xj@'L!<8tM!2BPok2HB0!<9h"!0I9]Xn2UL!<8tq!.k4M!<;2:!;-?l^Q8H^!<90h
!94(ZVkO1F!<;2^!7:fH^U+!^!<917!5AO6VoA_F!<;3-!3H8$^XrO^!<91[!1NugVs48F!<;3Q!/U^U
^\e(`!<3'!Xn;[L!<8tr!.k4L!<;2;!;$9k^QAN^!<90i!9+"YVkX7F!<;2_!71`G^U4'^!<918!58I5
VoJeF!<;3.!3?2#^Y&U^!<91\!1EofVs=>F!<;3R!/LXT^\n.a!<)uuXbQoL!<8sY!:0^ck*Z50!<9g.
!87GQXfDHL!<8t(!6>0?k.Lc0!<9gR!4Dn-Xj7!L!<8tL!2KVpk2?<0!<9h!!0R?^Xn)OL!<8tp!.k4N
!<;3S!/CRS^]"4b!;uotXbZuL!<8sZ!:'Xbk*c;0!<9g/!8.APXfMNL!<8t)!65*>k.Ui0!<9gS!4;h,
Xj@'L!<8tM!2BPok2HB0!<9h"!0I9]Xn2UL!<8tq!.k4M!<;2:!;-?l^Q8H^!<90h!94(ZVkO1F!<;2^
!7:fH^U+!^!<917!5AO6VoA_F!<;3-!3H8$^XrO^!<91[!1NugVs48F!<;3Q!/U^U^\e(`!<3'!Xn;[L
!<8tr!.k4L!<;2;!;$9k^QAN^!<90i!9+"YVkX7F!<;2_!71`G^U4'^!<918!58I5VoJeF!<;3.!3?2#
^Y&U^!<91\!1EofVs=>F!<;3R!/LXT^\n.a!<)uuXbQoL!<8sY!:0^ck4J_N^Yus#!3WHVXn;\'VpD:6
!5Ra:k4J_r^V.DT!7J!VXn;\KVlQ`g!9E::k2?;l!.k3&!.k4@!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&
!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!:^&@!.k3&!.k3&!.k3H!!/oJr;Zkp
E9@3&!*I#5!!4%Q6Mg``=MM$>!L5,4!!/?sn,W1_!Dooq!!3t=4So*Z:p$o$!K\]-!!/0jq#Kg_!DTKh
!!3q63r8mX9rG/p!QI%r!!("=LZSR;C?GBn![$Q#qZ$Y3k.(HoV8'dAr;Zp"!2W$]!!9"3E8LX')8EpQ
!!#>;!*I"N\c;j5Q*%0RqZ$Y^4T5<^Q*"ZU!"0UFXZQR`4=L8,Xf]J@pAb;WVl,XR!!/0BrW!"]VdeN`
$PoY<3WK.@-NHl=Vp#//!!C7'k/R8u!QIq7!!:1&LYi(>+6M]]!!#eQ!,CZYeH"_3&rIP,!5G?1!%kr;
MA`70!!&j7h>dm#^Hqo#MCef.=MN\mh#J(9(B=H;PlLe5XXSZ7Q"C!rQ"JkQ$5]g,!!%Er!!#itk5a!3
&pY5m!2knY!%4ZlGnuKN!!&*ih>dluV`FeXGp`Rl9rII\b5`0P*rl<'`W,usju0(Y`eONo`eWCN$6SD+
!!&lS!!$crq#J;4!?!Kg!!u!,)#sY'^P\kFrVutqE8CR$)8AK<6GG)P!*B69])VjJ.K0;R4KTD"!'IB3
Q$rW3!L79R!!!fAXZQSGXXO5M:p%>0!>['^!!t]a('"=qVg4ALrVut\@cd[d!"'L>3WM4=-NF-@Vn2p0
+#a)u#uB\*!!#gWVT,M4!!1)pmf;hW$6SD+!)M`8!!$cr[K$=[^]"396GL:3MZ*SZV/TPO^KCC6r;[?p
^V>X+V8'cI!*I"4!/c[5!!Yd)^I#\%=T,u=!*Hu9V8&k<!!+ONrW!'`Xf[k:rVutaAckl3X\ecm%m6tr
I/oP7X\]!oXd&m7IJs3N4KY_JXZTGYXTec%XT4WgQ+?qr-`?qD!'14[ViZ3'!!SHn9rFm`p](gcVl+e?
OJf!N!)9AQ!-rkh!!YK^V`L_::&Uso!)9?kOJe2R!<)s!2Wju="Ae1B`hr_8"ic=4k2pFR!"Vlfk,&-u
k2pCYC?EM9VPa=m##FCD:ZbGfrT4:aC?>N9k/PC@o`,Y-Du]ki^Fb<\V/QD7V8$+4=MI2t!!X=U/H>cQ
^]"3ODubd1M?!WC^An7k^HqoP^F]Ec=ML[M)8AMb!:0\!:hB\-.BP%I(R8S4!0sZ_!)Td[p](L7XXO5M
:p']s)J/ttXaL0L4KSS`IB>U3.BP$!!)Te_(Dj29f`:%4'2;p9!%4ZlGnuKN!!&+Y9`Rnc3qr[Z(8iM[
!)9Bj!#f;HH)Gof!'7"X!-tJ'!%4Zl!!#`kO;8V03oU.n!#'+&!!"q>2PqS9LB%=ok%Xm2k"kaP"s;tc
!!$crrW!jl!2enU!!#gW!!&nY:B3<82?3_lk/JJbk"k:CnGqMJ!2]Pm!P^u"!!/p8rW)tUpAcG7=9&=f
^Hqo<63%"CM?!Xk63%!'^HqoP^F]Ec=MG^R!2WfY!8%8OQ2:O^XZZO^!L79r!<7KA!$db*!!#-`49-0[
!!%Fq!!',`!!!h;49-h4.0'?EXVUs;Pu-iJcN!s,qZ$Yp3rK$ZOCJ1hs*=>=,EPV"!'7#=!#@Tq!-rhi
!2hjX!#DIn!%4Zl!!#`k('">r:%eS,!!(%9!!24Xr;Zl<L].;RVY:':`bGJR:ZbFQ+&;k:VPX=nk"bsW
+6H?!2Wcmt!,CX<!!(#R!!'_5!E^rN!!/oJr;ZkpE;fh<E2E:/**B$;!-!gQ!*C*=!/cX6/\`/'!#`O<
!%kr;!!!4*^DR"OV/X'I!Dk6B!!/?6r;Zk`B)Vc2AsN)j'2Xqo!+pY-!)OI3!.B7q.BOBd!"TmJ49-h4
.0'?EXVUs;Q"IZ/!DOs=!!/0/r;Zk[@f??.@Z^<a$;HT^!+L5!!)44/(]\i,!%4Z[!!!e43WLP*-NF-@
V\T74OCGj&!GXOi!!1(tr;Zl<L].8SLW9&g!G]Ut!!%eOV>t?Q!!&mn!&is]!!",':B3<82?3_ljrXR'
`eW:KJ,~>

%%EndBinary
grestore
np
1 /1 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: CDAAAA+CambriaMath Initial
ct_T42Dict begin
-1.473 -2.461 2.867 3.113
 256 array 0 1 255 {1 index exch /.notdef put} for  /CDAAAA+CambriaMath
Type42DictBegin
[<00010000000c000c000c000c4f532f328822ca99000000cc000000606376
7420030315980000012c0000089e6670676db5b31812000009cc000010b3
676c796692d9e97900011dbc0000020468656164fa71ceca00001a800000
00366868656112c430f600001ab800000024686d74784cbb822600001adc
000076f86c6f6361002f2a24000091d4000076fc6d617870282f03630001
08d0000000206e616d65d5aa9dbb000108f0000003a370726570664ecf85
00010c940000112867646972000000000000000000000000000304ec0190
00050008059a05330000009c059a0533000001f7006601fe020f02040503
050406030204e00006ff420024ff02000000000000004d53202000c00000
ffff0639fe39016118ef13b52000019f0000000003bc0555000000200003
058d000a000005550010002b000000000000041700100000000000000000
03bc001000000000fff0ff9d0000fff00000000000000000fe52fff00000
000000000000000005b1000d033d000d055500100215fff002e00010ffa0
fff000000000000000000000000000000000000000000000000000000000
03e000100000000000000800000008000000040000000042007d00000000
000000630000000000000063007000000000005600000000000000000000
00000000000000000000000000000000000000c200000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000ce00c900bb00830000000000bc00b300ac0000
0000000000ac00b5008500c200bc0078000000000059004f008400a0004f
00540078005a00490055005e00690000007100a400a50000000000000062
0060003100310000003e000a008a00000000000000ca00e800b601fc00a4
009b0000000000000000000000000000000000930085007200b800c2009b
004a0069003e00910063009400ab009f004b008600910000000000000000
000000d60000000000e00261006a007300a700b000850064006800000000
004d00810048005c0078004600560071006e008a005a00af00b4006500b1
0099007800bc0052009e06be00080274000d033dfff3023afff3008b0000
009602740281028e03800074007c009e00de00f40090008ffec2fff00000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00900098004b0084008e0042005a033d03500360007d0000000000000000
000000000000000000000000000000000000000000000000000000000000
00b700a400c10072007800b300a600ac009e00900125009a0087007d010c
009d00bc0132009100000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000b7008c00a60000000000000000000000000000
00c300b900af00a50055008e00520073009b00a800420050000000000000
000000000000000000000128010a0083006a005a010e00fa005f00000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000700063007800540082
006a00720087005800660031007500580068005800750000000000000000
0136013e0088007100a3012d00e400750042007e006e0121013000c60088
0118007a0068009d0042009400ba0130013e007300b4012800f90070005b
008e000000000000000000000000000000000000058d0010000005550010
000000000800011600ce0000040003fa0000000003ea001000000000fff0
00000000fff00000012400c80000fe52fff00000000000000123010d00bc
00b700aa00c600a2009b011b010300f500e100fe012f011c00bc012900d1
012900c600fa00ba00c1010e00ec011b011800d701010000000000000000
00000000000000000000058d001000000555001000000000080000ba008b
0565040000000000000003ea001000000000fff000000000fff0000000b1
008d0000fe52fff0000000000000008100a7009c00c2007d00ac00b400bb
00c1009200b600bb008c00b400a00085009700ad00a600a60091008000a2
00000000000000000000055a0033000005670033000000000800010e00c3
0000040000000000000003c000330000ffd1ffcd00000000ffcd00000000
00000000fe8effcd00000000000000d5006900db003e0050004900000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000207fce305df0249050f
0501ffeb04aa0704fe5b01f5000000a50070009300a5007b007b00670000
000000000000000000000000000000000000000003fd03e805afffee05ba
fe4205110524fe71fe7c000a00d700d900cf00c500e300d300d500ca00e7
033003c503e103f20460040605cd05a200b5042e00770096000000000000
00000000000000000000046e0468045104a4045a042e05270000041c004d
00520057005c00600062006b007200000590073104920556056403f203fa
05980000006c00780086008e0093007e000040718574737271706f6e6d6c
6b6a69686766656463625f5e5d5c5b5a595855545351504f4e524d4c4b4a
4948474644434241403f3e3d3c3b3a393837363534333231302f2e2d2c2b
2a292827262524232221201f1e1d1c1b1a191817161514131211100f0e0d
0c0b0a090807060504030201002c0118b0184358456ab0194360b00c2344
231020b00c4ef04d2fb000121b21231120332f592d2c0118b0184358b005
2bb000134bb0145058b100403859b0062b1b21231120332f592d2c0118b0
1843584eb0032510f221b000124d1b2045b00425b00425234a6164b02852
58212310d61bb0032510f221b0001259592d2cb01a435821211bb00225b0
022549b00325b003254a612064b01050582121211bb00325b0032549b000
5058b0005058b8ffe238211bb0003821591bb0005258b01e38211bb00038
21595959592d2c0118b0184358b0052bb000134bb0145058b90000ffc038
59b0062b1b21231120332f592d2c4e018a10b10c194344b00014b1000ce2
b00015b90000fff03800b0003cb0282bb0022510b0003c2d2c0118b0002f
b00114f2b00113b001154db000122d2c0118b0184358b0052bb00013b900
00ffe038b0062b1b21231120332f592d2c0118b018435845646a23456469
b01943646060b00c2344231020b00cf02fb000121b2121208a208a525811
331b212159592d2c014bb0c85158b10b0a432343650a592d2c004bb0c851
5800b10a0b4323430b592d2c00b00c2370b1010c3e01b00c2370b1020c45
3ab10200080d2d2cb0122bb0022545b00225456ab0408b60b00225234421
21212d2cb0132bb0022545b00225456ab8ffc08c60b0022523442121212d
2cb000b0122b2121212d2cb000b0132b2121212d2c014bb0c85158b00643
b00743650a592d2c2069b04061b0008b20b12cc08a8cb8100062602b0c64
2364615c58b00361592d2cb1000325456854b01c4b505a58b0032545b003
2545606820b004252344b0042523441bb00325204568208a2344b0032545
6860b003252344592d2cb00325204568208a2344b003254564686560b004
25b0016023442d2cb00143588721c01bb01243588745b0112bb00d2344b0
0d7ae41b038a45186920b00d23448a8a8720b0a05158b0112bb00d2344b0
0d7ae41b21b00d7ae4595959182d2c208a4523456860442d2c456a422d2c
01182f2d2c0118b0184358b00425b00425496423456469b0408b6120b080
626ab00225b00225618cb0194360b00c2344218a10b00cf6211b21212121
592d2c01b0184358b0022545b002254564606ab00325456a6120b0042545
6a208a8b65b0042523448cb00325234421211b20456a4420456a44592d2c
012045b00055b018435a584568234569b0408b6120b080626a208a236120
b003258b65b0042523448cb00325234421211b2121b0192b592d2c018a8a
45642345646164422d2cb00425b00425b0192bb0184358b00425b00425b0
0325b01b2b01b0022543b04054b0022543b000545a58b003252045b04061
4459b0022543b00054b0022543b040545a58b004252045b0406044595921
2121212d2cb0032520b0072587052e23208ab00425b00725b0142b1021c4
212d2cc02d2c4b525845441b2121592d2cb00243583ded181bed592d2c4b
505845441b2121592d2c01184b52588a2fed1b212121592d2c4b53234b51
5a58b003254568b003254568b003256054582121211bb00225456860b003
2523442121591b212121592d2cb00243583dcd181bcd592d2cb002435c58
462346608a8a462320468a608a61b8ff8062232010238ab10c0c8a704560
20b0005058b00161b8ffba8b1bb0468c59b0106068013a1b212121212159
2d2c2045b0032546524bb013515b58b0022546206861b00325b003253f23
21381b2111592d2c2045b00325465058b0022546206861b00325b003253f
2321381b2111592d2c004bb0c8515800b00743b006430b592d2c8a10ec2d
2cb00e4358211b2046b0005258b8fff0381bb0103859592d2c20b0005558
b8100063b003254564b00325456461b0005358b0021bb04061b003592545
69535845441b2121591b21b0022545b00225456164b028515845441b2121
59592d2c21210c6423648bb84000622d2c21b08051580c6423648bb82000
621bb200402f2b59b002602d2c21b0c051580c6423648bb81555621bb200
802f2b59b002602d2c0c6423648bb84000626023212d2c184b5358b00425
b00425496423456469b0408b6120b080626ab00225b00225618cb00c2344
218a10b00cf6211b218a11231220392f592d2cb00225b002254964b0c054
58b8fff838b008381b2121592d2cb0134358031b02592d2cb0134358021b
03592d2cb00a2b2310203cb0172b2d2cb00225b8fff038b0282b8a102320
d023b0102bb0044358c01b3c59201011b00012012d2cb0482b2d2c01b002
2510d023c901b00113b0001410b0013cb001162d2c01b00013b001b00325
49b0031738b001132d2c4b53234b515a5820458a60441b2121592d2c184b
5358b00425b004254964b00325b00325496468b0408b6120b080626ab002
25b00225618cb00c234421b004251023b00cf61bb00425b0042511122320
392f59cc21212d2c0118b0184358b0052546234564611b21b00425b00425
4a59b00e23442310b00eec2310b00eec2d2cb01b435820b0016045b00051
5820b0016020452068b0005558b0206044211b212121591b20b001602045
2068b0005558b8ffe06044b01c4b50582045b02060441b21591b21212159
591b21592d2cb0022546206861b00325b003253f2321382d2c462346608a
8a462320468a608a61b8ff8062232010238ab10c0c8a70456020b0005058
b00161b8ff808b1bb0818c59683a2d2cb0402a212d2c2035b001602d2cb0
024354584b53234b515a58381b2121591b21212121592d2c49b00e23442d
2cb0024354584b53234b515a5820458a60441b2121591b21212121592d2c
8a10b002435821b0301ac9181bb0401a18ed592d2c4b53234b515a582045
8a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b515a58
381b2121592d2c4b5458381b2121592d2cb002435458b0462b1b21212121
592d2cb002435458b0472b1b212121592d2cb002435458b0482b1b212121
21592d2cb002435458b0492b1b212121592d2c4b52587d1b7a592d2c2320
b000508a8a64b10003255458b0401bb10103255458b005438b59b04f2b59
23b0622b2321235865592d2cb108000c215460432d2c0146234660234661
23201020468a61b8ff80628ab140408a704560683a2d2c208a2349648a23
53583c1b21592d2cb012004b014b54422d2cb1020042b123018851b14001
88535a58b910000020885458b202010243604259b12401885158b9200000
40885458b2020202436042b12401885458b2022002436042004b014b5258
b2020802436042591bb940000080885458b202040243604259b940000080
63b80100885458b202080243604259b94000010063b80200885458b20210
0243604259b12601885158b94000020063b80400885458b2024002436042
59b94000040063b80800885458b202800243604259b12801885158b94000
080063b81000885458ba00020100000243604259595959595959b1000243
5458400a0540084009400c020d021bb10102435458b2054008ba01000009
0100b30c010d011bb18002435258b2054008b80180b109401bb901000002
435258b2054008ba0180000901401bb901800002435258b2054008b80200
b109401bb2054008ba010000090100595959b9400000808855b940000200
63b8040088555a58b30c000d011bb30c000d0159595942424242422d2c45
1868234b51582320452064b04050587c59688a6059442d2cb00016b00225
b0022501b001233e00b002233eb10102060cb00a236542b00b234201b001
233f00b002233fb10102060cb006236542b0072342b00116012d2c20b820
00628a6023622d2cb0072558001b0159b0042510b00325b0022520b8ffff
545821cd1bed5921b006255cb006255a58b0092b5920b005254ab0042547
b004254760b0062547b0806361b00225b0005558b00325b00725496359b0
082558001b0159b00425b0062549b009255cb009255a58b0092b59b00725
46b0806361b0032520b0005558631b2159612320b0005558b080631b21b0
8059b0592bb006255c586959b00425202010b00048233ab0062658001b01
59b0052658b003252f598a12233221212d2cb00625b00a2587b00625b009
254ab0005358b00625b00a251bb00925b0072559b00225b00225070cb005
256323b00625636020b94000040063535821b00426b00426b00a1bb94000
040063655158b0042665b0042665b00a1bb00426b00426b000b00325b003
250b0d0ab0092eb00725b007250b0d0ab00b2eb00525b0052507595920b0
005558b00525b0052587b00725b007250bb0092510b00b25b0092620b8ff
ff545821cd1bed59b00525b0052507b00825b00b254923b00625b0062587
b00a2510b00b25c15920b00051b800522378b00161b00225b00725b00725
07b00a25b00d254961b08062b00525b005250bb00a252338b00625b00625
87b00825b008250bb00a2510b00b25c4b00625b0062507b00925b00c2549
b0032554b8ffa723792121212121212121212121212d2c23b0005458b940
0000001bb900004000598ab0005458b9400000001bb90000400059b05b2b
2d2c08b0005458b9400000001bb900004000590db05b2b2d2c8a8a080d8a
b0005458b9400000001bb90000400059b05b2b2d2cb00426b00426080db0
0426b00426080db05b2b2d2cb0022563b0206066b00225b8200062602362
2d2c0020b200400325b0062649618b3812342d2c204569442d2c234ab102
4e2b2d2c234ab1014e2b2d2c238a4a234564b0022564b002256164b00343
525821206459b1024e2b23b000505865592d2c238a4a234564b0022564b0
02256164b00343525821206459b1014e2b23b000505865592d2c20b00325
4ab1024e2b8a103b2d2c20b003254ab1014e2b8a103b2d2cb00325b00325
8ab0672b8a103b2d2cb00325b003258ab0682b8a103b2d2cb0032546b003
254660b004252eb00425b00425b0042620b000505821b06a1bb06c592bb0
032546b00325466061b08062208a2010233a232010233a2d2cb0032547b0
03254760b0052547b0806361b00225b00625496323b005254ab080632058
621b2159b0042646608a468a4660b02063612d2cb00426b00425b00425b0
0426b06e2b208a2010233a232010233a2d2c2320b001545821b00225b102
4e2bb0805020605920606020b001515821211b20b005515821206661b040
2361b100032550b00325b00325505a5820b00325618a535821b000591b21
591bb00754582066616523211b2121b000595959b1024e2b2d2cb00225b0
04254ab0005358b0001b8a8a238ab00159b004254620666120b00526b006
2649b00526b00526b0702b236165b02060206661b02061652d2cb0022546
208a20b000505821b1024e2b1b452321596165b00225103b2d2cb0042620
b802006220b80200638a236120b05d602bb00525118a128a20398a58ba00
5d10000004266356602b23212010204620b1024e2b23611b2321208a2010
49b1024e2b593b2d2cba005d10000009256356602bb00525b00525b00526
b06d2bb15d0725602bb00525b00525b00525b00525b06f2bba005d100000
08266356602b20b0005258b0502bb00525b00525b00725b00725b00525b0
712bb0021738b00052b00225b001525a58b00425b0062549b00325b00525
496020b0405258211bb000525820b0025458b00425b00425b00725b00725
49b00217381bb00425b00425b00425b0062549b002173859595959592121
2121212d2cb12501885058b94000020063b8040088545cb0164b525b1bb0
01592d00000100000006fd71fab9931e5f0f3cf5001b080000000000b9e6
983d00000000d630eee4f434ec4a16f118ef000000090002000100000000
00010000063bfe390161175af434fda416f1000100000000000000000000
000000001dbe00>
<054400be0000000001c3000001c3000004fc000604e4007904800077054b
0078049a0079044b007904e30077057e0079029800790274001d05090079
044b00790686007505720075053a0077048b0079053a007704f8007903f8
007004be0042052f005a04d40016075f00160492001504900012044d005e
04fc000604fc000604fc000604fc000604fc000604fc000604fc000604fc
000604fc000604fc000606ee000006ee0000048000770480007704800077
0480007704800077054b007805510032049a0079049a0079049a0079049a
0079049a0079049a0079049a0079049a0079049a007904e3007704e30077
04e3007704e30077057e00790588007902980033029800790298001f0298
00010298004002980035029800140298007902980079050c00790274000d
05090079044b0079044b0079044b00790451000d04fa0079057200750572
00750572007505720075053a0077053a0077053a0077053a0077053a0077
053a0077053a0077053a0077053a0065053a0065076e007704f8007904f8
007904f8007903f8007003f8007003f8007003f8007003f8007004be0042
04be004204be0042052f005a052f005a052f005a052f005a052f005a052f
005a052f005a052f005a052f005a052f005a075f0016075f0016075f0016
075f001604900012049000120490001204900012044d005e044d005e044d
005e05720075055100320497007903e80050046100300387006904700069
03e70068026c004f03f4003f046a004002390053022100050432003f022c
003f06a8005304770053043f00690473004904600068034f00530370005e
02b50025046b0049040800130632001d03de00170408001403a3005103e8
005003e8005003e8005003e8005003e8005003e8005003e8005003e80050
03e8005003e8005006050050060500500387006903870069038700690387
006903870069056c00690470006903e7006803e7006803e7006803e70068
03e7006803e7006803e7006803e7006803e7006803f4003f03f4003f03f4
003f03f4003f046a0040046a003402390023023900530239fffe0239ffd3
0239001f023900150239fff00239005302390053045a00530221fff20432
003f043f0053022c003f0314003f022c00390278000d0302003f04770053
04770053047700530477005305850047043f0069043f0069043f0069043f
0069043f0069043f0069043f0069043f0069043f005b043f005b068c0069
034f0053034f0053034f00530370005e0370005e0370005e0370005e0370
005e04d8004f023c004f039b002502b5002502d30035046b0049046b0049
046b0049046b0049046b0049046b0049046b0049046b0049046b0049046b
00490632001d0632001d0632001d0632001d040800140408001404080014
0408001403a3005103a3005103a3005104680053043e006904610031045d
fffe0471006803ef006904aa006a0417006803d50068044d006904e30068
02610068023b00070476006803b7006805bb006504c40064048300690433
006804830069046a006803a4005e04390039049300470447001406a4001d
041b00160416001603db0050045dfffe045dfffe045dfffe045dfffe045d
fffe045dfffe045dfffe045dfffe045dfffe045dfffe061efffe061efffe
03ef006903ef006903ef006903ef006903ef006904aa006a04b200440417
006804170068041700680417006804170068041700680417006804170068
04170068044d0069044d0069044d0069044d006904e3006804ed00680261
003502610068026100130261ffe602610034026100290261000302610068
02610068049c0068023b00010476006803b7006803b7006803b7006803c5
0042046e006804c4006404c4006404c4006404c400640483006904830069
048300690483006904830069048300690483006904830069048300600483
006006790069046a0068046a0068046a006803a4005e03a4005e03a4005e
03a4005e03a4005e04390039043900390439003904930047049300470493
004704930047049300470493004704930047049300470493004704930047
06a4001d06a4001d06a4001d06a4001d0416001604160016041600160416
001603db005003db005003db005004c4006404b200440444006802ef004c
0346003802ab005d034e005d02ee005d01eb004b02f700410349004101c2
004e01b400150319004001b9004004db004e0353004e032c005d03500047
0346005c0284004e029b0056021c002e034b0047031300270497002f02e8
00240313002702bf004d06d1004f093d004f04d8004f06d6004f0942004f
04a5004f0711004f048d004f06f9004f069e004f090a004f0497004f0703
004f05800059050500590247003f0247001f0000fde60000fddd0247008b
024700720000fe600000fe30024700060247fff60000fdc30000fdb40247
00060247fff60000fdc40000fdb400e8ffbd0247ffda0247ffda0000fd98
0000fd9802470026024700170000fde40000fdd50247001b0247000c0000
fdd90000fdca0247fff60247ffec0000fdb40000fdaa0247004102470041
0000fdff0000fdff0247fffc0247fffa0000fdba0000fdb8024700c70247
00c70000fe850000fe850247003c0000fdfa024700880000fe460000fdf8
0000fe7901a40018021c0049021c00aa01a4006d060400f902a8006c02a8
006c024900c0024900b6024900b60361005c0361004b0361004b01c50069
01c5004701c5006901c500470301006903010047030100690301004701a4
002e02e2002f026c0064026c0064026c0064026c006403e7006403e70064
03e7006403e7006403ec003e028800f70400005a0400005a0800005a0800
005a0600005a0600005a038c00950242009901fa008e030e00b4030e002b
030e00b4030e002b02cd00e402cd002b02cd00e402cd002b0319005f0319
002b0319005f0319002b036b004e0422006d0422006d0400005804b40051
04fc000604e40079044a007904c40033049a0079044d005e057e0079053a
0077029800790509007904d80006068600750572007504930072053a0077
05650079048b00790462003004be004204dcfff106480074049200150643
0032056f003f04f3000605a6000006800000039a00000298004005e30000
063a000004dcfff1060d000004980068047100ae041b007b040effe50433
0066038d006a033300690458fffb0460007b045e0000024600b204370048
03e70016045e00b503db000b033d0064043f006904d1000d0442008d0493
00640373006903d3000c0454000005b2006805c7006803e3fff605c10045
0602006404980068038d006a0458fffb024600b2024600240246ffd2043f
006904540000045400000454000006020064045dfffe0471006803b90068
0431001e0417006803db005004e300680483006902610068047600680445
fffe05bb006504c4006403fc00610483006904c400680433006803e1002d
043900390433fffa0556005b041b00160599002804de003f045dfffe0417
006804e300680261006802610034048300690433fffa0433fffa04de003f
024700c00000fe7e0247ffd20000fd9001f4009601f4009601f40096021c
0049019000460190002a04fc000604cb007904e4007904460079053d0025
049a00790762002504580071058900790589007905330079056c00240686
0075057e0079053a007705650079048b00790480007704be004204cd0025
063b0068049200150560007b0502002f076a0079076a007905db004206cd
007904c700790496006f075e0079050c000e044600790404007905e90042
048f007703f80070049a0079049a007902980079029800400274001d0589
007905330079077b0024077500790606004204cd00250556007b05c60042
053a0077054a002003e800500454007f042f006a0393006a0477002503e7
006805b6001203aa005004b8006a04b8006a0452006a0479002505620068
04b6006a043f00690489006a04730049038700690417003904080014057b
006803de0017048f006a043f00290668006a0668006a04f0003905fc006a
041d006a03c300500623006a043f00170393006a0356006a044e003303c3
00680370005e03e7006803e7006802390053023900200221000504b8006a
0452006a061b00250662006a046a0034040800140489006a04fa0039043a
00690471001e043b0069045dfffe045500680471006803d2006804960024
0417006806b6003603e6005d04e7006804e70068049d006804c0002405bb
006504e300680483006904c400680433006803ef006904390039041a0028
055a005c041b001604cb006a0476002a06c1006806c1006805320039064c
00680449006803fb005d068300680490001803d2006803a4006805530039
03ed005b03a4005e04170068041700680261006802610034023b000704e7
0068049d00680687002406be0068055e0039041a002804c4006a05360039
0483006904b3001e0247ffdd0247ffda0000fd9b0000fd98046e009d05b3
007d028800f703ec003f02f7000001e50091032500910715008907150089
06ce006e06ce006e056f002606d70064045a007c05070023043600230507
0023046e0023040c007004360085040c0070046e00a203870069043a0043
0436003f043a0043046e0061047cff9804e0004f0436002604e0003d046e
00330356006e036c0078084f007504f4006e0436007b02bf002b03ae0031
03b000330436003c03b700570438008103ae00480436006e043800640436
007b043600b10436006f043600810436003c043600a70436007e0436008e
0436006e04360067046e008102e5002c03e0002903e3003f0464004803ea
005c045a007803da0048046e006f0459005a046e0081046e00b2046e0081
046e0090046e004d046e0096046e0082046e0094046e006f046e00640342
00690342007e03420063034200730342003a03420086034200670342007c
034200630342005603420066034200680342006602560092025600320342
00690342007e03420063034200730342003a03420086034200670342007c
034200630342005603420066034200680342006602560092025600320342
00690342007e03420063034200730342003a03420086034200670342007c
0342006303420056046e004f06ec007e071e007e06ec0070071e00690a1b
0069046e007c046e007f046e007c046e00a801fa008e046e007f00eafe72
046e007c046e007c046e0042046e007c046e007c046e007c046e007c046e
0071030100540425002706ce006e045c0054036700460541002304c40033
056f003f045a00b5067f005b05ab001a04500099036b005c034200690342
007e03420063034200730342003a03420086034200670342007c03420063
03420056026c004f03b000150395005d0351006403d9005d035b005d0314
005d039b006403f6005d01ef005d01e7002503af005d031a005d04af005d
03f2005d03d500640357005d03d500640399005d02fa0062035c002c03d4
005303940021055b001e03660023036400230322004c03b000150395005d
0351006403d9005d035b005d0314005d039b006403f6005d01ef005d01e7
002503af005d031a005d04af005d03f2005d03d500640357005d03d50064
0399005d02fa0062035c002c03d4005303940021055b001e036600230364
00230322004c02ef004c0346003802ab005d034e005d02ee005d01eb004b
02f700410349004101c2004e01b400150319004001b9004004db004e0353
004e032c005d035000470346005c0284004e029b0056021c002e034b0047
031300270497002f02e800240313002702bf004d03b000150395005d0311
005d03890036035b005d0322004c03f6005d03d5006401ef005d03af005d
039a001604af005d03f2005d0355005a03d5006403e4005d0357005d0334
002c035c002c0389000f0478005503660023049400380400003f0382005c
03520090033000190321005b02ae005e026e00240353000f0341006a01ef
0090033e0047031e00210352009002e4001c02860024032c005d038f0016
032a00760372005a029a005d02b300160338000f041f005d02f9000f0436
00440448005a03b000150395005d0311005d03890036035b005d0322004c
03f6005d03d5006401ef005d03af005d039a001604af005d03f2005d0355
005a03d5006403e4005d0357005d0334002c035c002c0389000f04780055
03660023049400380400003f0382005c03520090033000190321005b02ae
005e026e00240353000f0341006a01ef0090033e0047031e002103520090
02e4001c02860024032c005d038f0016032a00760372005a029a005d02b3
00160338000f041f005d02f9000f043600440448005a046e006803180060
022900b302290032034d006b034d006b04f60061034d006b034d006b034d
006b0328005203280071032800240328003a0328002d0328003703280066
032800590328003b03280060022900b302290032034d006b034d006b04f6
0061034d006b034d006b034d006b0328005203280071032800240328003a
0328002d0328003703280066032800590328003b032800600000fd6f0000
fe2c0000fe980000fe130000fd730000fd8c0000fdb40000fe740000fe45
0000fe290000fe1d0000fdfe0000fe250000fdfb0085fecd0000fe3b0000
fdd10000fdd10000fdea0000fdf30000fd620000fe8c0000fe850000fde4
0000fdff0000fe980000fddb0000fda40000fdc40000fdc30000fdb40000
fdb40000fd980000fdd90000fd1b0000fd1b0000fd7f0000fdb30000fcc2
0000fd9f0000fd650000fe5f0000fdda0000fe230000fd880000fdfa0000
fe590000fd1b0000fde60000fe600000fd710000fe740000fea00000fddb
0000fdf90000fe120000fdfb0000fd8a0000fd8c0000fd9d0000fd560000
fde4000000000000fe3b0000fe3b0000fd8b0000fdfa0000fe3b0000fe3b
0000fd5f0000fe5f0000fdb80000fdd90000fdd90000fda20000fdb80000
fdd90000fe0d0000fe1b0000fe860000fe0b0000fdf20000fe230000fdf4
0000fdfe0000fd730000fe540000fe390000fdec0000fdf6044f007b0477
000904dcfff105a70067065f000d04590049053a0077043f0069043d0074
036f0064044b00790376009b03c7004d037500460472002204600022048f
000d043d00890380006902210005053a007703a8006903a8004104000000
08000000046e000001a40000015500000072000000000000045a005a045a
005a043b00f70211006c0371006c04db006c041f00b702f2000004d50077
073c0054052d005a048c008d0491006f070700540516004b058a00140670
007904b5007f0542001506af004705c2007506ce006e063a002805880079
061d00770613003905f5007904d2005e03a30047056f003e0555ffd90243
ffe90509007904fc0006053b007203e30055044b003b0527005f04c60093
045a00220356002c03cf002b032e006c074c00690539000f049b0079065c
007905db001a04cf009403d3002803d30028047c001f06760039058d0069
04e6008c0349005c0362ff560568008c0586000b06b4007303bf005106b4
007303bf0050075e007303bf005005380087053800600538006005380087
06b4007306b400730715007307150061077c007303e60064077c007303e6
006406eb007306eb007306fa007303bf005106fa00b003bf005003e70064
0696007306960088072100730721006909870073079a007304a200660487
0073048700d404870073048700d405140073048600740679006d0679007d
0551005a073b00bc0641007c0641004d06b4007306b40073037701360376
005006b4007306b40073037701360377005106b4007a0645006206b4007a
06b4007a0663008406b4007a0663008406b4007a06b4007a0701007308a2
00730701007a06ed007304b0005a06ed003304b0005a0848007304b0005a
05d9008705d9005505d9005505d90087071d0073071d00b907d6007307d6
007303e6006403e60064070e007303bf0051070e007303bf005106e600b0
06e6007306e1007f04bf006306e100a504bf006304bf006304e0007404e0
007404e0007404e0007404f6007f071700b3062e00aa062e006004e00074
079000730645006206e4008406b4007306b40073079a0073071800730718
007307fe007307210073072100730893007305070031042d007704b20089
04d500890506007a04c4004d04fc0091051f0091046e008c04fc009304fc
0093046e009306400118067f005a05fa009505fa0095046e004d03dd0087
038c00850516002305160023059f006e058700de0544005205440052056b
0075025800de02ff003903b600de045a003904b8003404b80036057300a0
057300a004b10063076300630a15006304cf006e0799006e0a49006e0511
006e050e006e0533006e0496009a0496009a027000b804be00ae05c8007b
077b00950636009505e2009505b3007d05e300950675006e057f004202ed
00c805b2007e05fa009505fa009505fa009505fa009505fa009505fa0095
05e3009505fa009505e3009505fa009505f9009505fa009505fa009505fa
009505fa009505fa009505fa0095077b0095077b009505fa009505fa0095
05fa009505fa009505fa009505fa009505fa009506b6009505fa009505fa
009505fa009505fa009505fa009505fa009505fa009505fa009505fa0095
072000950720009503d500b405fa009505fa009505fa009505fa009505fa
009505fa009505fa009505fa009505fa009505fa009505fa009505fa0095
05fa009505dd009505dd009505dd009505dd009505e4009505e4009505dd
009505dd009505fa009505fa009505fa009505fa009505fa009505fa0095
05fa009505fa009505fa009505fa009504db009504db009504db009505fa
009505fa009505fa009505fa009505b900de05b900de07f600a207f600a2
07f600a207f600a207f600a207f600a207f600a207f600a207f600a207d0
00c807d000c807d000c807d000c8056400de054b007c054e007c03b80052
054e007c03b80052042800de042800de05c200de060700de071e00de073d
00de05c200de05c200de068300de073d00de046e005f046e009705c8007c
05c8008c05c8006b05c8006b0835008508350085073e007c05c8007c033c
006d04b8005204b8005004b80052058700de059a00590552003405520036
062b00de062b00de039a0082024200ad042700500496007506a300de0609
00de0609007a05b900b405b900b405c8007c04b8003604b8003605bb0089
05bb0090061500c8061500c8057d00c8052f009505fe009505fe009509eb
009509eb0095060200950602009505fe009505fe009505de009505dd0095
05dd009505dd009505fa009505fa009505fa009505fa009505fa009505fa
009505e4009505e4009505ea009505ea009505fb0095060b0095027c00c4
06da009504f200a004f200a005dd006d04fe00a60470008c04fe009104fe
00910470008c04fe009104fe009105dd009504fe00950470009505110095
0470009505d8008c02cd00e402cd002b02cd00e402cd002b02e0007d02e0
006a09d3047209d300e7061100ec061100ec061100ec0611001e0611044f
0611001e02cd004e02cd004e02cd004e02cd002502cd01ad02cd0025057a
0254057a00a9057a0254057a0254057a0025057a0254057a002509d30472
0434000005c600d305c600d30be700850be7003504ed000004ed000005ca
006e05250019038500e40385002b02e0007d02e0006a06f6006c06f6006c
06f6006c059100b405db00be0648008c043f0064056e00160554006f04b4
007605c1006f04bd006f0487006f054a007605e4006f02ea006f02d80032
0592006f0486006f06e3006c058d006c05ae00790507006f05ae00790572
006f04390063053b00510587005b052c001f07ca002504f3001504ef001b
04a6005f0466004b04d9003d03de006a04e5006f045d006a0356004d0451
003d04e4004902a200580289001d04df004902950049073d005804f20058
04ac006a04e5004b04d9006f03cf005803ca0060030a003404e5004f0453
001d06770025043400100453001d03f300510511fff30540003904c60087
058a003904ff003904e30039050a008705d3003903080039030eff480596
00390441003906cf003705dc00370569008704f600390569008705190039
043c000f04c30046058300a60501005f079900690529ffeb04d2006804bd
000a047500690450005c03ae006904a3006903f800690466fff104e5001e
0470005c0289008c02e0ff60046a005c0287008a06b50018049700180443
006e04760018044f006903ce001703b200320328007504970018045a0046
05e900370442001e047a000703de0019039e001003ae002e033d005f03e1
002e036d002e035f002e038d005f0411002e021c002e02a5000f03e6002e
02f5002e04c3002e0419002e03c8005f0386002e03c8005f038f002e0306
00290353002803f90093038c00370550003703d1001d0365003703610028
034b005a03230053029e005a0352005a02cc005a0319000e0360000f0344
005201d500730263000f0322005301da007104e90023037200230312005a
035400280323005a02c50023026a001e024e00640372001e02c400270444
002703170014035b001a02bd0014039e001003ae002e033d005f03e1002e
036d002e035f002e038d005f0411002e021c002e02a5000f03e6002e02f5
002e04c3002e0419002e03c8005f0386002e03c8005f038f002e03060029
0353002803f90093038c00370550003703d1001d0365003703610028034b
005a03230053029e005a0352005a02cc005a0319000e0360000f03440052
01d500730263000f0322005301da007104e90023037200230312005a0354
00280323005a02c50023026a001e024e00640372001e02c4002704440027
03170014035b001a02bd00140511fff30540003904dd003904e7000f04ff
003904bd000a05d300390571008703080039059600390501000f06cf0037
05dc003704d2001e0569008705ba003904f600390571008704db000f04c3
004604fc003205d9005a0529ffeb0619006d056e000e04e700b104cc0069
04d9000f0434000f044d006403a4005a03cc005a04320018048000730214
00570454005c0424000f0463000f0412000e03db004b0443006e04be0023
0484000f04ae005a0375005a03ab0023040c0018056b005f04a6ffd205a1
001805ce005f0473006e03b9006904b1000f049d000a0577006304490065
06640023039e001003ae002e0359002e036a000f036d002e036100280411
002e03c8005f021c002e03e6002e038c001004c3002e0419002e03930034
03c8005f0411002e0386002e03c8005f0359000f03530028039f00320446
005303d1001d0477005f0400002a035f0055037a005a03a4005303240010
031d005a02a2005502c60053033c0023035a006e01c90067032000530311
001a03880053030c000f02da00500312005a03780025036f0050036a005a
028e005502a5001b0311001e03f6005503940014042e001e0443005a033d
005502b7005a0399001e037500200407005a032b006904970025039e0010
03ae002e0359002e036a000f036d002e036100280411002e03c8005f021c
002e03e6002e038c001004c3002e0419002e0393003403c8005f0411002e
0386002e03c8005f0359000f03530028039f00320446005303d1001d0477
005f0400002a035f0055037a005a03a4005303240010031d005a02a20055
02c60053033c0023035a006e01c90067032000530311001a03880053030c
000f02da00500312005a03780025036f0050036a005a028e005502a5001b
0311001e03f6005503940014042e001e0443005a033d005502b7005a0399
001e037500200407005a032b006904970025054bfff305c9003905050087
06010039053f0039051c0039055f0087064e0039037c0039035fff480623
003904870039074e00370614003705dc0087057f003905dc008705930039
048a000f04fd004605d000a60531005f07de0069058affeb05140068050f
000a04f8006904db005c040a006905260069046500690482fff1056a001e
050e005c02f8008c031dff6004e5005c02f6008a076b0018052d0018049d
006e04f7001804d60069044b001704040032035b0075052a001804cd0021
064e0037049d001e04c8000704220019054bfff305c90039051500390569
000f053f0039050f000a064e003905e60087037c0039062300390531000f
074e00370614003704f0001e05dc0087064e0039057f003905e600870517
000f04fd0046055c00320697005a058affeb06b4006d05de000e056900b1
055f0069056b000f04d3000f04a40064041f005a0423005a04d0001804fe
007302aa006704de005c0482000f0516000f0489000e0421004b049d006e
057c002304f8000f050b005a03d6005a0414002304920018060d005f0541
ffd2063800180666005f04dd006e03f90069053f000f04fc000a061c0063
04b4006506fa002307230025056e001e04d0005a05e0001e048a00500596
0000049900000777000003a3000004f2000a06f6000004b9000008d40000
07bd0000054c006405d200000535002e05e6000004970025055e000d0625
000c05720000086b00000693000005e7000c058000000526004b05eb0000
03d6004a0546004b0491002305df000003b4000003d6fff605ae00000840
000005fa000005b5000e04f9004b05dd0000044e0000045b001505ed0000
05ec00000817000004cc000505d70000047500180787002505e4001e0534
005a066b001e04dc004e05fa0000051e0014080d0000042900000560000a
0760000005160000098200000818000005cf00690660000005ad002e0699
000004c7002505d0000d06a1000c05a8000008ae000006fa0000066d000c
05b6000c0550004b06110000040f004a0570004b043a005504e100230558
00360605fffb03d200000437000505cf0000047c001b0868000006220000
0563006206070015055b004b05fa0000047f0000046e0022060e0000060e
000008550000052b00050614000004cd001805bd003c063000390661003e
0549007d054b004206090072052d001305b4001404e400100801003c0628
003c06700026062300350683002605fb006405b40047056f003206190035
07c600350510000f05c6003203e8007303fa002c02ee006e03e700500334
006e027200270400006e04070032022c0034022b000502b1002b02290039
064a0000043dfffb03d80050041c002603f9006e02f2001903590036027a
00200449001a03dd002a060f00320354000d0416002b0300003d059a0006
05db0079064700780519007904e5007905d8007303630079033f0009061e
007904d2007907440075061d007704ab0071056c004205a0005a05620016
083b0016057100150546001204c1005005280030042800690538006904b0
0068038f004f048e004b055b003f02fc005302e4fffc0526003f02ef003f
07af00530568005304ee0069053b004a0528006803f7005303d9005e035a
0025055b00490486000f06e7001d049e001704870010044b00500677003c
065d003905cf00640688003c05cf00640579004b0662006405f90010055c
001e056b001e0628001e052a001e086d0044068b003c06a700260658003c
06cd00260680004105fb006405f4004605dc0032065c0035089300350582
000f0633003c05a700140466007304570037033a006e04450052038d006e
02b700270462006e0458003802990017029b000f02ef00280297003f06e0
000a04ea000a044000580485001e045a006e037600140394003202ab0028
04d8001e048a00140681001403fb0009048b0014034900380491000d04b7
00cc04230076052f00cc040000cc03dd00cc04cf0079053a00cc024900cc
0249ffe0049a00cc03d300cc065800cc057300cc053a0079045f00cc053a
0079049200cc03c90054041a0028051900b9047a0016075d001a04410005
044f00170414004b03ed004b046800ac0377006d0468006d0402006d02ba
003904030046043c00ac01ff00a301ffffca03ce00ac01ff00ac066d00ac
043c00ac0447006d046800ac0468006d030a00ac0348004f02bf001e043c
00a403b700170610001903a6000a03b7ffdf038000460527000d052000b9
0459006b058f00b9043200b9040d00b90536006b058c00b9029600b90296
ffe3050400b9040100b906cd00b905c600b9058c006b04cb00b9058c006b
050800b90417005204560028057100aa04f6001607d8001b04b9000504c0
0017044600460459004b04c3009f03ac006004c30060045b006003090037
0475004b049e009f0254009f0254ffc90457009f0254009f06dc009f049e
009f049d006004c3009f04c300600359009f037a004302fb0028049e0097
04160017067b001c0414000a0416ffdb03ac00410509000004db00400499
006e054c0040048400600464004004c3006e054e0040025d004002a6ff60
05460040034e0041066c0040058700400558006e04b9004a0558006e04a4
00400409000e04190021052a00780501009607e500a00585000f0459001e
04bf000f0429004b0476004003c0006404d00064041f0064037f004304aa
fff1043c00400259004002afff60045a0040025d0040066d0040043c0040
045b006404a4000f04720064036a00400348fff9032b007d043c00760414
007306700078047100000471ff6003e4000f059a0000055b004004dc006e
05cf004004bf0060049d0040052c006e05c6004002d000400301ff6005c3
0040039b0041070700400600004005bf006e0538004a05bf006e05330040
0455000e046300210596007805780096085a00a005f3000f04ca001e04fb
000f049b004b04e600400405006405410064047c006403cc0043051afff1
04b5004002c600400303ff6004dc004002cc004006f3004004b5004004c4
00640514000f04e3006403ce0040037cfff9035f007d04b5007604750073
06d5007804df000004d1ff600424000f056e00160554006f0487006f052d
003204bd006f04a6005f05e4006f05c3007902ea006f0592006f054a0016
06e3006c058d006c049a007205ae007905da006f0507006f05ae007904a0
0030053b00510544000006ca007404f3001506bc002c05e30046052d0042
051b006a04e300ad0485ffe704a500660403006a039b00680501fffc04c5
007602d500a804e000540487002604fa00b50435000b039f006404ac006a
053f000b04b5008c03cd006904f700640407000b049bffe3062100640461
ffe706850052066f006404b1006403e30069050c00060495000d06350064
04a6006e06f2000b04c9007704c900a404c9007204c9008504c9003a04c9
00a304c9007404c9008404c9006604c90063055b008103b3002c04720029
047f003a04f60048047d00630515006e04430048052d006f0515005a046e
0081046e0091046e006c046e0069046e0051046e00a7046e0083046e006b
046e0067046e005b04e6008104e600b704e6007904e6008804e6005b04e6
00bc04e6008304e6008804e6006c04e6007304cd00b004cd00bc04cd009a
04cd00ad04cd005d04cd00c504cd00a904cd009204cd009604cd00880466
00280221000502840049026b000e01c2004e01b4001501c2004e01b40015
0289008c02e0ff60021d008701b1ff75021d008701b1ff7502f8008c031d
ff6003b4000003d6fff603d2000004370005022c0034022b000502990017
029b000f02fc005302e4fffc01ff00ac01ffffca0254009f0254ffc90259
004002afff6002c600400303ff6003080042029a004d03340011036e003c
040700580335006d045b001404a1009004a100b704a1008804a1009d04a1
005104a100af04a1008d04a100a604a100810469006d05d200a905d200a9
05d200a9036600af0366002205a4007205a40072059700140574008a0509
008e05e2008a051f008a04bc008a057b008e0613008a02ea008a02d4002d
059d008a04c0008a07310088060b008805d6008e0515008a05d6008e0583
008a047c008a0532004705d00072056e0027083000250526002705210027
04ca0070046b006704f000470402008205010082046b008202d400670478
005704f900570298006b027f001404b40055028900550769006b0507006b
04ca00820503006104f0008203c6006b03e900780321003a04fb0061049b
002906f5003604610029049b002b04210069059700140574008a04b8008a
055c0047051f008a04ca00700613008a05d6008e02ea008a059d008a0574
001707310088060b00880517008405d6008e05f6008a0515008a04e3003c
053200470566000606e600820526002706fb004906130055053e00820505
00d104b6000804bc00800408008403a5008204f9000a04eb009702c300d3
04d7005f0495002704fb00d3045d001d03bf008204ca00820568001904ca
00ac0530007e03eb00820430001904df000c064f00820471000c066a005d
069a007e04df008003da00820494000d048f000d05fc0082043d00740689
000d04ac0086033701090337004005e5008405e50084076400ac05d200a9
04ff009a04ff009a054c0008056d004204da008b05ba0042051d00420502
0042053b008d060300420320004203db000005c3004204600042070a0040
060c00400595008b052c00420595008b05420042046c002904ea004205c9
00c50537005807d8005c0581000d04ff005c04f3002504ff008004ca0074
040a0080051d00800457008004cd000d0548001b04f9007402ce00a603c1
001904d7007402d200a4077b00290532002904b600820509002d04ca0080
043c002903df00310386008e0532002504860032068c003c04ba00210511
0019043c001d0593000805b6004204fb0042050d00130562004205360025
0654004205510084034a0042061100420537001307690040065e00400527
003905e0008b05f700420599008b0572004204fb0013052c004205420040
0631006c0581000d0676007f05c500290504009605530080057d004f04be
001404c6007e04080074043c007204d1002905110097028b008204ca0074
04a8001d052c004f049900140455006904b60082054800310526004d0536
007a03e10074040e0027049b0025060900760558fffc06560025067d007c
04f2007e04260080056000210538001f061d007c04cf008a070e00310298
006b027f001402ce00a603c1001904c2009904c200b804c2009004c200a8
04c2005504c200c404c2009604c200b504c2009004c2007d05fa00a905fa
00a905fa00a9037600af03760032061a0087061a0087060d002205e00099
057100a40650009905810099050d009905ea00a406800099032c0099031f
003d060b00990517009907af009906790099064900a4057b0099064900a4
05e7009904e200a1058300480648008805df003608c90031059300390590
00390524007d04d0007d055f005c04610099056c009904ce00990326007b
04dd006b0564006b02e2008002cb00220515006902d4006907f700800574
008005340099056f0074055f0097042100800446008d0376004b05670074
050b00400788004d04c5003b050b00400481007e060d002205e000990508
009905cd0059058100990524007d06800099064900a4032c0099060b0099
05e9002407af00990679009905770094064900a406620099057b00990541
00480583004805cd00190755008b059300390783005c0690006705c10097
057300ec053b0029052200950465009a03fc009905740019055700ae032c
00ec05520074051d0036057300ec04be002e042400990534009905d70024
053100c205a7009404450099046e00240548001906c3009904e0001906e9
00700706009404df006e03da007004b4000b048f0008061a008204610074
06a1000f0513009d038b0126038b005205e5008405e500840824009f05fa
00a9056a00b0056a00b005ef001a0609004b0550009c065d004b059f004b
0588004b05d3009c06ac004b0376004b045700190665004b04da004b07d0
004b06b9004b0634009c05c8004b0634009c05d7004b04f6004305740042
068400f105d2005a08b7005a064300300592005a058b0042056700940525
0088044b009405730094049700940515001705890019055c0087030100bd
03ea001905240088030a00b9080e003905a70039050a0094057600420525
0094048b003903f6003103c800a405a700310499002e0700004005120021
0581002b047e002105ef001a0609004b057e004b059a0019059f004b058b
004206ac004b0634009c0376004b0665004b05d2001a07d0004b06b9004b
05dd00550634009c06ac004b05c8004b0634009c057e00190574004205f1
005207030088064300300753009c069000450588008b05b4009405f90088
0527001a051c00940452008b048d0088054e0039058000b402ee00a90520
00880508002b05cb00880500001904ae0083050a009405b1003d05a20083
059a00940431008b0457002c050800310680008b05df002106db003106fe
00940550008b0474009405e7003105ac0034069b0094053300ac0788003d
02e2008002cb0022030100bd03ea00190371000004890000078f00000371
000004890000078f00000371000004890000078f00000371000004890000
078f000002f2000002f2000005000334052503ab044f0000044f000002f2
00000000fccb0000fcc80000fcc80423000005c500000000f7ca0000f7c9
0000f43404f600000000fc910000fcb10423000004ed0000065a000005fa
009505fa009505fa009505b700b4024200ae05fa0095041d003205fa0095
05fa009505e3009505fe009505fe009505fe009505fe009505fa00950645
006c0498007d0499006a04690032066f0032087a00320a8500320319005f
0319004b032c004b052a006e0319003c0319003c032c003c052a004602d9
00e4030800e4033100e4035f00e402d9002d0308002d0331002d035f002d
039800b403f400aa04e000a005de00960398004103f4004104e0004105de
004103c000e403e400e4040e00e4043f00e403c0002d03e4002d040e002d
043f002d02e0007d02e0007d0315007d035c007d02e0006a02e000350315
0035035c003502d900e4030800e4033100e4035f00e402d9002d0308002d
0331002d035f002d02d900e4030800e4035f00e4035f00e402d9002d0308
002d0331002d035f002d02cd00e402d900e4030800e4033100e4035f00e4
02cd002b02d9002d0308002d0331002d035f002d02cd004e02cd004e02cd
004e02cd004e02cd002502cd002d02cd01ad02cd002505f100230452001f
06010023061e00230624002305fe002306a9002206c70022077100220822
00220bcc002204c1006906740069084600690a6e0069079c006909a20069
0c4300690a7700690cd000691040006904db006f0674006908460069079c
006909a200690c4300690a7200690cd00069104000690516006906740069
096e01910516006906740069084600690516006906740069084600690913
01b50a9b001a10a600ad17310096081400690c12006911310069175a0069
033f000004890000078f00000e7300000321000004710000078900000e6d
0000033f000004890000078f00000e730000033f00000471000007890000
0e6d0000032100000489ffff078900000e6f000003210000048900000789
00000e6f00000321000004700000079000000e7400000321000004700000
079000000e7400000321000004700000079000000e740000032100000470
0000079000000e74000004f0000007f700000bbc00000ddd000011110000
04f0000007f700000bbc00000ddd00001111000007f300000bb800000dd9
0000110d000007f300000bb800000dd90000110d000004f0000007f30000
0bb800000dd90000110d000004f0000007f300000bb800000dd90000110d
000004ed000007f300000bb800000dd90000110d00000498007d04cd007d
0502007d0498006a04cd006a0502006a0357005f0357005f03b1005f03fa
005f034300730357008703b1008703fa0087028800f7029500f702a700f7
043b00f7046600f704a000f707db005a07db005a079f005a079f007309f8
0073096f0073096f0073096f0073096f0073096f0073096f0073096f0073
096f0073096f0073096f0073096f0073077c0073077c007306ed007306ed
007a08480073077c007306ed007306ed007a03d2005a03d2005a05bd005a
05bd005a070e0073070e0073070e0073070e00730858007306b4007303be
005003be005006eb007306eb007308580073085800730858007306eb0073
06eb007306eb007306eb0073070e0073070e0073070e0073070e007305f8
008705f8008705340087053400870534008705340087063c008705ea0087
063c008705ea0087059500870595008705ea008705ea008705ea008705ea
0087063c0087063c008706c6007306f6007306f600730482007304820073
03430078034300780677006d0677007d0677007d0677006d053e004b053e
007d061a007d061a007d06b4007a06b4007a06b4007a06b4007306b40073
06b40073075e007303e6006406b4007306b4007303f4005103f4005106b4
00730377013606b400730376005006e600b006e600730377000003770000
06e600b006e60073037700510377005106fa007306fa00b00377000a0377
000a06fa007306fa00af037700510377005106b4007a05b6005006b4007a
05b6005006b4007a06b4007a06b4007a06b4007a06b4007a06b4007a06b4
007a06b4007a05b6005005b6005006b4007a06b4007306b4007306b40073
06b4007306b4007305c800730858007305c8007c061e0089075e0073061e
0073047300880473007304c8005004c800500a8700ad110600c30a8700ad
110600c30a8700ad110600c3082e00f00c6300fa082c00f00c6300fa05db
00be076d00be076d00be07ca003c0a11003c07ca003c0a11003c09d900be
05ab001a091301b510a600ad05ab001a091301b510a600ad0cc700630d52
0069143d006904b1006304c100690846006904b1006304c1006908460069
04b1006304c100690846006904b1006304c100690846006904b1006304c1
00690846006904b1006304c100690846006904b1006304c1006908460069
04b1006304c100690846006904b1006304c100690846006904b1006304c1
00690846006906960073069600730846006904b1006304c1006908460069
04b1006304c100690846006904b1006304c100690846006904b1006304c1
00690846006904b1006304c100690846006905d1000005d1000005d10000
05f2005804b80034057300a005b6004605b600de08290064082900a00932
00640616007c0616007c09c8009509640095073e0085073e008f073e007c
0370007804500099056e0078061d0064061d007806be006406be00820514
00de037400aa02f800960341005f03410064038d00b4038d0064034100a0
034100c803110064031100c802cd00e402cd002b02cd00e402cd002b02cd
00e402cd002b02f9007d02f9008205fe009505fe009505fe009505feffff
031a00e4031a0078024600b4025300820544004605b600de05b600de0562
005205580059056b00690562007805440046054400460544005205440046
05a7005005a700500544005205440046054400520544004605c5000505c5
002005c5000505c5002007f600a207f600a207f600a207f600a207f600a2
08c8007807f600a207f600a207f600a207f600a207f600a207f600a207f6
00a207f600a207f600a207f600a207f600a207f600a2095700a2095700a2
05970082059700820597008205970082059700820816008205ca009605ca
009605ca009605ca004605c60082068b0064068b0082064c00a0064c00a0
064c00a0064c00a0064c00a00461006404610064025d00aa025d00aa0389
00aa038900aa06ce006e06ce006e06ce006b09bf00850597008205c8006c
05fa009505fa009505fa009505fa009505fa0093046c009605ca009605ca
0096062b00780450009906b2009606b20096051700960517009605170060
05170060051700840517008406b400a0041d0032041d0032041d0032066f
0032066f003205fa009505fa009505fa009505fa009505eb00b4084c00a0
0514006402e0004607a200950377013605fa009505fa009505fa009505fa
009505fa0095063b009505fa009505fa009505fa009505fa009505fa0095
07f600a207f601cd05b7011905b700b405b7009705b700b005b700aa07f6
00a207f6020807f600a207f600a207f600a207d0001e07d0001e07d0001e
05fa009505fa00950266004605eb0078057300a0057300a0057300750573
0075057300a0057300a0048d00a0048d00a004c800a004c800a0072c0096
072c009605af003c05af003c05db00be05db00be05af003c04b8003404b8
003604b8003404b800340614003406140034052000be0520001404b80035
04b8003304b8003304b8003404b8003404b8003404b8001704b8001705fa
009504b8001704b8fffa05ee006405ee00a005fa009505fa009505fa0095
05fa009505e2009505e2009505fa009505fa009505fa009505e3009505fa
009505fa009505fa009505fa009508ac00a009b200950d06009505fa0095
05fa009505fa009505fa007905fa009505fa009105fa009505fa009105fa
009505fa009105fa009505fa009105fa009505fa009105fa009505fa0091
05fa009505fa009105fa009505fa009105fa009505fa009505fa009505fa
0095060200950602009505fa009505fa009505fa009505fa009505fe0095
05fe009505fe009505fe009505fa009505fa009505fe009505fe009505fa
009505fa009505fa009505fa009505fe009505fe009509820095078e0095
0b2c009505fa009505fa007305fa009505fa007305fa009505fa009105fa
009505fa009105fa009505fa009505fa009505fa009505fa009505fa0095
05fa009505fa009505fa009505fa009505fa009105fa009505fa00910961
00950961009505fa009505fa009505fa009505fa009505fa009505fa0095
05fa009505fa009505fa009505fa009505fa009505fa009505fa009505fa
009505fa009505fa0095096800820968008205fa009505fa009505fa0095
05fa009505fa009505fa009505fa009505fa00950b2e00950b2e00950573
00a0057d00c8057d00aa057300a0057300a003bb007c054e007c054e007c
054e007c05c200de0607009505c20095073d0095060700de054e007c054e
007c054e007c054e007c054e007c05fa009505fa009502ff003903700078
037000780370007804e6009504e60079051400de0612007c024600b407d7
009507d7009505fe009505fe009506ab0032051400de0564003203b600de
03b600de0449004c04de009507b300c8046e009d046e009d046e0090046e
009002db008c0a7507ea0a7500000a7507ea0a75000005fa009503b800a2
07aa007c07aa007c05c6007c049d000a03de005808c500bc08c500cf05fa
009505a6009b04fc009b05550000055502ab05550000055502ab07ac003c
07ac003c073400950734009509c300de07fb00de0a4e00de0428002403d1
0069057100de057100de06eb00c805ec006407fb00de04db00de07fb00de
07fb00de07fb00de07fb00de07fb00de07fb00de07fb00de07fb00de07fb
00de07fb00de07fb00de07fb00de07fb00de07fb00ac07fb00de07fb00de
07fb00de07fb00de07fb00de07fb017307fb00de07fb00de07fb00de07fb
00de07fb00de07fb00de07fb017307fb00de07fb00de07fb00de07fb00de
07fb00de04db00de069100bc07fb00d704db00d407fb00de07fb00de07fb
00de07fb00de07fb00de07fb00de069100be04db005504db00d407fb00de
07fb00de07fb00de05b3007d07fb00de04db00de069100be05b1007c05b1
007c04db00de07fb00de07fb00de071f007c071f007c024600b20442008d
060200640498003c03a80069024600270602006404980068055b0037077e
00bc079d0058078300da02f800fa05ec006407fb00de07fb00de07c1007c
064700de057800de0566007c06bf00950518007c056c00bc056c00bc056c
00bc0676007c064a005805fa005805440058054400580544005805440058
0544008305f1006907fb00de03c600de064f00de064f00de068600bc0686
00bc04070000040703ab04070000040700000407000004070000070c0358
070c0358070c0126070c0064070c0064070c00af070c0064070c0064070c
00b4070c0064070c0064070c0064070c0064070c0064070c006407fb00de
0637005007fb00de0527000d052000b9040100b9052d000c043200b90446
0046058c00b9058c006b029600b9050400b90527000d06cd00b905c600b9
04860062058c006b057d00b9058c006b04cb00b90462002f0456002804c0
00170632005f04b900050612005f05e3005f052d000c04fd006304e300ac
0425001404a5006603d50071039b00680501005704c5007602d500a804a9
009d047c002a049e009704350041039f0067049d00600522003204a80098
03cd006904f7006403c3004604c40023060d0064043bffd506380096066a
006404b1006403cf006004db0041048500210635006404a6006e06f20032
059a0000055b0040051300b90577002504bf006004fb000f05c6004005bf
006e02d0004005c30040059a000007070040060000400534006205bf006e
060d00b905bf006e0538004a050a002f0463002104ca001e0675006e05f3
000f0650006b065c0049052d01100577006d055c000f0493004d04c50064
04310064045f007704b7004004f000640264004004c1004004c6002a04ee
000f044500730458006d04c400640577006904f6000f042a007a0559006b
03e6006204d00054062e006404d1ff4706380069069d0064050400690446
006405170057056000210655006404ef0064074d004a04ce000504ce004a
04ce008004ce004a04ce004a04ce004a04ce008004ce004a04ce00f904ce
005e04ce004a04ce004a04ce001b04ce004a04ce005304ce009d04ce0053
04ce004a04ce00c004ce002b04ce003604ce000504cefffb04ce001f04ce
000504ce009f04ce00a604ce005504ce00c304ce008d04ce00b104ce00d4
04ce009004ce005704ce00cd04ce00a604ce008704ce00e104ce003404ce
005604ce008e04ce005504ce009004ce00b004ce00c104ce008c04ce005a
04ce003104cefff904ce004704ce003104ce00ab0454003f02cd00e402cd
002b0b2300be0b2300be1132005a1132005a0f0900a1053f008205ca0096
057700820494005d04ce005e0270000006b10000075d000006b1000005dc
000005dc000005dc000006b10000075d000006b1000005dc000005dc0000
05dc000003bf019904b0014002da0095036900b204a50095058600b2066d
009507a300b2082b009509bf00b2075a00aa0539000005390264056e0000
056e0000039200e40392004206c200aa06c200aa06c200aa0539025904b0
00c904b000c904b000c908c8011b052503ab032100000321008803370000
033700b004340000033700b00337000001c9000002c1000002c100000304
00000304000007c300a001b6000001b70000025a0000025a000002960000
02c40000022e00000270000001c5000002cf0000081400690c1200691131
0069175a0069074c00370b7b003c074c00370b7b003c076d00be0b2300be
076d00be0b2300be025800000641007306410000067300730673000004ae
007a04ae000004ae007a04ae000000f700000000fe700000fd9f04910000
065e0000035200b4035200260319005f0319003c02cd00e402cd002b03ec
00b003ec004202ec00e302ec002d036400610364003e049700a804970042
031200e30312002d03fc006503fc00410574009d05740041034400e30344
002d04c2006b04c2004502ec00e402ec002d02ec00e402ec002d02ec00e4
02ec002d03d200e403d2002d029100f70521015b031200e40312002d0312
00e40312002d031200e40312002d03f600e403f6002d02a200f704cc00f7
034400e40344002d034400e40344002d034400e40344002d042600e40426
002d02b900f7050e00f702c500f7054e00f70000ff400000ff360000ff49
0000fe3c0000fe400000fdd40000fdc20000fcfb0000fcb40000fdd40000
fdc20000fdad0000fdb00000fdb40000fdaa0000fdb40000fdaa0000fdb4
0000fdaa0000fdad0000fdaa0000fe8504fc000604fc000604fc000604fc
000604fc000604fc000604fc000604fc000604fc000604fc000604fc0006
04fc0006049a0079049a0079049a0079049a0079049a0034049a0079049a
0079049a00790298007902980079053a0077053a0077053a0077053a0070
053a0077053a0077053a007705ce007705ce007705ce007705ce007705ce
007705ce0077052f005a052f005a0609005a0609005a0609005a0609005a
0609005a0609005a04900012049000120490001203e8005003e8005003e8
005003e8000403e8005003e8005003e8005003e8005003e8005003e80050
03e8005003e8005003e7006803e7006803e7006803e7006803e7001e03e7
006803e7006803e700680239005302390053043f0069043f0069043f0069
043f003a043f0069043f0069043f006904cb006904cb006904cb006904cb
006904cb006904cb0069046b0049046b004904fc004904fc004904fc0049
04fc004904fc004904fc0049040800140408001404080014045dfffe045d
fffe045dfffe045dfffe045dfffe045dfffe045dfffe045dfffe045dfffe
045dfffe045dfffe045dfffe041700680417006804170068041700680417
002704170068041700680417006802610068026100680483006904830069
048300690483005b04830069048300690483006905140069051400690514
00690514006905140069051400690493004704930047055f0047055f0047
055f0047055f0047055f0047055f0047041600160416001604160016046e
006804be004202b500250439003904ce00960544007905530079053f0079
0494006804a300680494006802390053026c004f0000fd6f0000fe980000
fe130000fd3d0000fd940000fdaa0000fe790000fe4d0000fe730000fdfb
0000fd770000fdb30000fcc20000fd970000fd650000fe180000fe630000
fd1b0000fddd0000fe300000fddb0000fd8a0000fd970000fda40000fe3b
0000fe3b0000fd940000fe5f0000ffb10000ffb10000fe140000fd550000
fe280000fe1e0000fdb50000fdae0000fdd90000fda20000fdb80000fe11
0000fe1e0000fe870000fe0e0000fdf50000fe260000fdf80000fe010000
fd7a0000fe550000fe3b0000fdf00000fdfa0000fdf60000fdf10000fdf6
0000fdf10000fe620000fdbc0000fdec0000fd830000fda00000fd830000
fda00000fd830000fda00000fd830000fda00000fd530000fd7d0000fd53
0000fd7d0000fe540000fe510000fe510000fd5f059d000a04cb007904c7
00610480006e04800077055100320604000a04cb005f04a40070053a0076
0458007a044bffaa04e3007704f200160286006702980029050900790757
00690572ffaa053a0077068b00770544000a04ab007903f8005504620030
04be002d04be0042052d0079052d005a04f70012044d005e044300710448
0064047b00650998007808ee007806c00079066d007907e6007507930075
04fc00060298001f053a0077052f005a052f005a052f005a052f005a052f
005a04fc000604fc000606ee000004ed007704e3007705090079053a0077
053a0077044300710998007808ee007804e3007707610079081a00790503
00670572007504fc000604fc0006049a0079049a00790298ffa702980014
053a0077053a007704f8007904f80079052f005a052f005a04580071057e
00790554007904aa007a044d005e04fc0006049a0079053a0077053a0077
053a0077053a00770490001204fc000604800077044b002904be004203fa
006004e4002c052f001c04d80006049a0079027400170546007704f80029
0490001204fc000604e4007904e4007904e4007904800077054b0078054b
0078054b0078054b0078054b0078049a0079049a0079049a0079049a0079
049a0079044b007904e30077057e0079057e0079057e0079057e0061057e
00790298000202980040050900790509007905090079044b0079044b0079
044b0079044b007906860075068600750686007505720075057200750572
007505720075053a0077053a0077053a0077053a0077048b0079048b0079
04f8007904f8007904f8007904f8007903f8007103f8007103f8007103f8
007103f8007104be004204be004204be004204be0042052f005a052f005a
052f005a052f005a052f005a04d4001604d40016075f0016075f00160492
00150492001504900012044d005e044d005e044d005e045500330455ffeb
048b002c04f800790582007905560079044d005e0480006e03d500790461
00240461003004700033043b00690470006904330064026cff9e026cff9e
06780040045700490432004f0278000b03e700160463005305760068045b
003b0371006602bf002502b500250519001403a3005103a7003203820041
03ab002308130069044d003f0698005303e8005002390000043f0069046b
0049046b0049046b0049046b0049046b004903ee005503e8005003e80050
0605005003f4000803f4003f0432003f043f0069043f006903a700410221
fff40813006903f4003f0477005303e8005003e8005003e7007a03e7007a
0239ff9a0239ffef043f0069043f0069034f0025034f0053046b0049046b
004903d40041046a0040058e0069041e006403a3005103e8005003e70068
043f0069043f0069043f0069043f00690408001403400035059c00530343
0025068b0069068b006903a500470370005e03a300510311002803e70038
026b000b027f001504600068035e0015040800140289ffd103eb0029035c
003b020600c0034400c00256000c022700aa03e800500461003004610030
0461003003870069047000690470006904700069047000690470006903e7
007a03e7007a03e7007a03e7007a03e70068026c004f026c004f03f4003f
046a0040046a0040046a0040046a0040046a00400239ffda0239ffda0239
00210432003f0432003f0432003f022c003f022c0000022c0013022cfffd
06a8005306a8005306a8005304770053047700530477005304770053043f
0069043f0069043f0069043f00690473004904730049034f0053034f0053
034f0053034f00530370005e0370005e0370005e0370005e0370005e02b5
002502b5002502b5002502b50025046b0049046b0049046b0049046b0049
046b004904080013040800130632001d0632001d03de001703de00170408
001403a3005103a3005103a30051046a004002b500250632001d04080014
03e80050023c004f026c004f0278000b03e8003302ddffcf047400400454
003f03a300510423fffc03b1005a03a2003c02ea006a05b20068051e0005
045500680449005a03ee005e03ef006904b2004405570005045500550421
00620487006903ed007d03d5ffa5044d0069047a0014026100680261001d
0476006806a7004e04c4ffcf0483006905c3006904e000050444006803ce
006903e1002d0439002b0439003904750064048c00470474001603db0050
03e6005d03e6007903f50058086c006a0926007805de00680686007906ff
006407ad0075045dfffe0261001304830069049300470493004704930047
0493004704930047045dfffe045dfffe045dfffe044d0069044d00690476
0068048300690483006903e6005d086c006a09260078044d0069071c0068
079e0079047c005504c40064045dfffe045dfffe04170068041700680261
ffaa026100030483006904830069046a0068046a00680493004704930047
03e6005d04e3006804a400680430006903db0050045dfffe041700680483
006904830069048300690483006904160016045dfffe03ef006903b7001d
043900390396004b047b0027049300100447fffe04170068023b0007049b
0069046a001d04160016021000c6034e00c7028c0027020b00a5045dfffe
04710068047100680471006803ef006904aa006a04aa006a04aa006a04aa
006a04aa006a041700680417006804170068041700680417006803d50068
044d006904e3006804e3006804e3006804e3004604e300680261ffe70261
003304760068047600680476006803b7006803b7006803b7006803b70068
05bb006505bb006505bb006504c4006404c4006404c4006404c400640483
00690483006904830069048300690433006804330068046a0068046a0068
046a0068046a006803a4005e03a4005e03a4005e03a4005e03a4005e0439
003904390039043900390439003904930047049300470493004704930047
04930047044700140447001406a4001d06a4001d041b0016041b00160416
001603db005003db005003db005004e300680439003906a4001d04160016
045dfffe03c1002703c1ffd20433001d046a006804e3006804a8006803db
005003ee005e03d5003003550068045c00ac03b1005a0470006904780069
04a8006903f8005f03b9006d045b006804a7006804080013027f0015027f
001502390053028cffdb069b00490477ffa3043a0069034f0053042b0061
0225ff870255ff8702b5002504b1000b04320069042700490408fffe03a7
0041023900530000fef50000ff370000fe7b0000feef0000fe1c0000ff07
0000fdf40000fdb50000fda70000fdbc0000fd850000fe520000fdc50000
fdad0000fd8c0000fdf50000fd5d0000fe520000fda10000fda10000fd71
0000fdd90000fdb40000fef50000fdda0000fda70000fdc50000fd8c0000
fdb50000fda70000fdb50000fd8c0000fdda0000fdda0000fdb50000fdb5
048000770480006e048000770480006e063a000004dcfff1064f007504aa
007904420000038000360380006903800036046d00b5046700b204830069
03ef006903ee005e03ef006903ee005e0433fffa0433fffa0433fffa03d5
006804840069034a004b05b1006503a6001c039f005a042b006804fc0006
05e9ffce0646ffce0524ff9c04fcfff50605ffe2063f000005baffce04fc
0006052d000004fc000604fc000604fc000604fc000605e9ffce0646ffce
0524ff9c04fcfff50605ffe2063f000005baffce072c0006072c00060819
ffce0876ffce0754ff9c072cfff50835ffe2086f000007eaffce05a50000
06b3ffce06acffce0563000006cfffe206a5000005ab0000059300000689
00000797ffce0790ffce06c8ff9c0647000007b3ffe20789000006faffce
068f000006770000057e0079068900000797ffce0790ffce06c8ff9c0647
000007b3ffe20789000006faffce07ae007908b9000009c7ffce09c0ffce
08f8ff9c0877000009e3ffe209b90000092affce03a3000004b1ffce04aa
ffce03e2ff9c0361000004cdffe204a300000414ffce03a9000003910000
029800350298001405fa000006feffce075bffce061c0000071affe20754
000005f60000064200000554000005f500000761ffe20737000006a8ffce
063d00000625000004dcfff104dcfff106160000071affce0777ffce0655
ff9c063800000736ffe20770000006ebffce06120000065e0000056f003f
06160000071affce0777ffce0655ff9c063800000736ffe20770000006eb
ffce079f003f08460000094affce09a7ffce0885ff9c086800000966ffe2
09a00000091bffce04980068049800680498006804980068049800680498
006804980068049800680498006804980068049800680498006804980068
049800680498006804980068049800680498006804980068049800680498
006804980068049800680498006804980068038d006a038d006a038d006a
038d006a038d006a038d006a038d006a038d006a0458fffb0458fffb0458
fffb0458fffb0458fffb0458fffb0458fffb0458fffb0458fffb0458fffb
0458fffb0458fffb0458fffb0458fffb0458fffb0458fffb0458fffb0458
fffb0458fffb0458fffb0458fffb0458fffb0458fffb0246009f0246001f
0246ffd20246ffb0024600700246fff00246ffb70246ff880246ffcc0246
ffcc0246ffb1024600a6024600470246ff9c024600050246ffe0043f0069
043f0069043f0069043f0069043f0069043f0069043f0069043f00690442
008d0442008d045400000454000004540000045400000454000004540000
045400000454000004540000045400000454000004540000045400000454
000004540000045400000602006406020064060200640602006406020064
060200640602006406020064060200640602006406020064060200640602
006406020064060200640602006406020064060200640602006406020064
060200640602006406020064045dfffe045dfffe045dfffe045dfffe045d
fffe045dfffe045dfffe045dfffe045dfffe045dfffe045dfffe045dfffe
045dfffe045dfffe045dfffe045dfffe045dfffe045dfffe045dfffe045d
fffe045dfffe045dfffe06b0fffe06b0fffe06b0fffe06b0fffe06b0fffe
06b0fffe06b0fffe06b0fffe06b0fffe0417006804170068041700680417
00680417006804170068041700680417006804e3006804e3006804e30068
04e3006804e3006804e3006804e3006804e3006804e3006804e3006804e3
006804e3006804e3006804e3006804e3006804e3006804e3006804e30068
04e3006804e3006807360068073600680736006807360068073600680736
0068073600680736006807360068026100680261003f0261fff20261ffd0
02610068026100100261ffd70261ffa80261ffec0261ffec0261ffbc0261
0068026100670261ffbc0261002902610003048300690483006904830069
048300690483006904830069048300690483006904330068043300680433
fffa0433fffa0433fffa0433fffa0433fffa0433fffa0433fffa0433fffa
0433fffa0433fffa0433fffa0433fffa0433fffa04de003f04de003f04de
003f04de003f04de003f04de003f04de003f04de003f04de003f04de003f
04de003f04de003f04de003f04de003f04de003f04de003f04de003f04de
003f04de003f04de003f0731003f0731003f0731003f0731003f0731003f
0731003f0731003f0731003f0731003f04fc000604fc000605e9ffce0646
ffce0524ff9c04fcfff50605ffe2063f000005baffce074f0006074f0006
083cffce0899ffce0777ff9c074ffff50858ffe208920000080dffce057e
0079068900000797ffce0790ffce06c8ff9c0647000007b3ffe207890000
06faffce07d1007908dc000009eaffce09e3ffce091bff9c089a00000a06
ffe209dc0000094dffce056f003f06160000071affce0777ffce0655ff9c
063800000736ffe20770000006ebffce07c2003f08690000096dffce09ca
ffce08a8ff9c088b00000989ffe209c30000093effce0247008a024700b2
024700a1024700790247ffb30247fff00247ffec0247ffb30247fff10247
00040247ffb30247ffe30247ffe30247ffb30247008a0247001b0247fff6
024700a3023000a802980079025300630589007904c7002e048b00790446
002904d30079079000250458007105630079056f00790533002e06440042
058200790705007907990079059700750480007704be0042049000120490
001204e2001506d100420503002f0502002f04ff007905c4ffe205c4ffe2
02980079076200250557007905700024056c0079058200790502002f068a
007504fc000604fc000606ee0000049a0079053a0076053a007607620025
04580071044300710589007905890079053a0077053a0077053a00770496
006f04cd002504cd002504cd00250502002f0446007906cd00790446ffaa
048300150492001504c7005b06db005b069e005d0456005d077900240789
007904df007705bf00420458007a055a002404b8006a0427002404730049
03a200140423006a05d3001203aa0050045c006a048b006a04370034052e
003904bd006a05d6006a0658006a04570067038700690417003904080013
0408001303f8001705ed00390444002904450029046a004004a6000004a6
000005b600120477006a0479002504ac006a04b6006a043f002905620068
022c004f03e8005003e800500605005003e7007a03f8005f03ee005505b6
001203aa005003a7004104b8006a04b8006a043f0069043a0069043a0069
03c30050040800140408001404080014043f00290393006a05fc006a03a2
ffbb03cf001703de001704700069062c00690583004703b70047060f0025
0655006a0401006804d9003903b9006d0465002504e700680449001d0433
006803d200270431006806b8003603e6005d04a1006804d90068049d001d
057f003904e30068063100680688006804ac006a03ef0069043900390416
00160416001604580016062000390476002a047c002a046d00680538000a
0538000a0261006806b6003604a2006804b0002404d9006804e300680476
002a05bb0065045dfffe045dfffe061efffe041700680487006904870069
06b6003603e6005d03e6005d04e7006804e7006804830069048300690483
006903fb005d041a0028041a0028041a00280476002a03d20068064c0068
03d2ffa5040c0016041b001104490049060e004905d3004c03eb004c066a
002406a10068043f00690512003903ed007d049d002403f6003f046f0068
0473004a03af006903e800530563005f03aa005005220050042c0069027f
0015045b0068042800680472001e045c0049046a0050045b005002460061
0263ffed02180030048f003f068c0049069900530472005304920062061e
006905ee006405c700680342002203420022033300220346004a032f004e
03370022043100640370005e0256ffa7027effa7032d0022023cff74026c
ff7402b5fff3063200060408000803a5000003a3005103ea005103a70039
02e7000602dc000a0305001e03a900730642005a042f006a0428006d0474
006804b600680225ff740423fff6039d00610460006804a7006802e70006
02dc000a06ca006906d300690711006905460025043500250465002505c1
002506a8004f04c9003f049a003f04ac0032041a00aa056b0022056b0022
0418fffc05a8fff40611005f0447004103d00069047700680486004603f5
006603ab0050024800540236000704490066039d002905730065048d0053
0457006903c7005a0491005a0490005a04a5001d068f0055041c0071043f
0069043f006903fd006704400021041a002103fe00320459004904ac0078
05e5005a04b70078040e0013062c002003970051039f005403be0050046d
00250393006a040f00000489006a03f50068053f00230479002503b00015
04d0002f0395005d03a0002203d9005d035b005d0365004f039b006403f6
005d01ef005d01e7002503af005d031a005d04af005d03f2005d03f2005a
03d50064037800580357005d0399005d035c002c03d40053055b001e02ef
004c02ef0031034c005d046f005303460038034e005d02ee005d02ee004e
02a2004a0294003602f7004101c2004c0319004004db004e034a004e032c
005d02c60053032c005d032c005d03500047021c002e034b0047030b004a
04d300470313002702fd000c03530090033100190322005b0420005d02f9
000f01c2004e0284004e034b004703130027035300900331001903080061
0420005d02f9000f06850049046bffbe04700069028affe906dafff804a9
fff8047dffd1036dffee034dffda03ac003502ddffdc03ba005103f40008
0374005003da002806f700250282001702a7002604be000b049f000804aa
fffa0461003004700069026c004f054200680432003f022c003f06a80053
0477004104730049034f00530370005e0306ff870408001303de001703a3
005103e80050046f00680478006903e7005603b9006d03aa0050049a005f
0239005303b1005a0289ffeb046b0049038f0041034c004302ab005d02d2
005d0330005d029f004001eb004b01cd000e0342005c034b004701ea000f
01c2004001cb005001f30015020efff101ef003601b9003d02a4005004d2
004e04d30047038cfff6039d004e034e004a032c005d0435005c029b0056
01f6fff6021c002e037300080325005d0336003b0318003f0313001902bf
004d0351004d02ea004d02b7003e0342006a034900410349004f01b40015
0284004e027b002c02c0002c030800160497002f0313002701e500910325
009101c5006901c5004701c5006901e3005001e30050020e0005020e000a
046e007c046e007c046e0074046e007401810082022900370229003c0181
0082024c001e022900050229006e0231006e0209005a021f0078021f0064
022c001e022c001e022c001e022c001e016bfefb02d400290309002701b9
0040029b005602e800240218000a03340064033400640334006403340064
0334006403fc006403fc006403fc006403fc00640334002003fc001603fc
001303fc001403fc001703fc00170334000803fc000403fc000403fc0004
03fc000403fc00040334ffff03fcfffe03fcfffe03fcfffe03fcfffd03fc
fffc0334fffc03fcfffc03fcfffc03fcfffc03fcfffb03fcfffb03340020
03fc001303fc001603fc001603fc001603fc001603fc006403fc006403fc
006403fc00640334002003fc001603fc001603fc001303fc001403fc0017
0334000803fc001803fc001803fc001803fc001803fc00180334ffff03fc
001c03fc001c03fc001c03fc001c03fc001c0334000803fc000403fc0004
03fc001803fc001803fc00180334002003fc001403fc001303fc001603fc
001603fc001603fc006403fc006403fc006403fc00640334002003fc0016
03fc001603fc001603fc001303fc00140334000803fc001803fc001803fc
001803fc000403fc00040334ffff03fc001c03fc001c03fc001c03fc001c
03fc001c0334000803fc001803fc001803fc001803fc001803fc00180334
002003fc001703fc001403fc001303fc001603fc001603fc006403fc0064
03fc006403fc00640334002003fc001603fc001603fc001603fc001603fc
00130334fffc03fcfffb03fcfffb03fcfffc03fcfffc03fcfffc0334ffff
03fcfffc03fcfffd03fcfffe03fcfffe03fcfffe0334000803fc000403fc
000403fc000403fc000403fc00040334002003fc001703fc001703fc0014
03fc001303fc001603fc006403fc006403fc006403fc006402ea00b102ea
00b102b30032034200660301004702b30032026d000f01ef003c01ef003c
024700410229003c0391003c03910037029c0002017e0073026b008c026b
0082026b008c026b008203820032038200320382003c027a004602a20046
0269003202b90032044100820441008202ef004c02ee005d032c005d02e8
002402ee004e040000000800000002ab000002000000015500000000ffdc
0000ff250000ffdc0000fe51019a000001c7000002f7000001c500690301
006902e5005402a8006c021c00aa054a004b046e0045046e006d046e0055
046e006106a80053046e001e0a070079082600790708002a046e0053046e
0026046e00380953001e046e0029046e0032046e006204e60006046e0049
046e0077046e006c0810006407bc0015076d007e076d0063076d007e076d
0063076d0073076d003a076d007e076d0086076d007e076d0073076d0086
076d0090046e00920539ffdd053902590539ffdd053902590539ffdd076f
007704db004d04d2007904060032046e001004c80077048c002806090064
04670066042b00b003570013039a00380408006903e000140000fd710000
fd7c0000fd690000fd820000fe450000fe4c0000fe740000fe760000fe43
0000fe430000fd8d0000fd8d032f00140000f73f0000f7290716004d06ad
007904e1fff2075a007906d60011090800790449006706430032054a0020
08eb00770580007708bf007708bf00770716004d044a006d059b007805ad
006a0436ffeb0654006a0520ffea073f006a038a004605c100450471001e
08010069048a006905f9006805f90068059b007803750069065f00390609
00680472fff406950068060200040815006803cc00530599002804b3001e
084d006904cb006906a6006706a60067065f003903cc0069099b006403e3
006f0293002603680023036a003603da003e0370004f03d0005f0364003e
03e0005e03cf004d099b0064099b0064099b0064099b0064099b0064099b
0064099b0064099b0064099b0064099b0064099b0064099b0064099b0064
099b0064099b0064099b0064099b0064099b0064099b0064099b0064099b
0064099e0064099e0064099e0064099f0064099e0064099e0064099e0064
099e0064099e0064099e0064099e0064099e0064099e0064099e0064099e
0064099e0064099e0064099e0064099e0064099e0064099e00640000fe6f
0000fe4508c800f9057300340573003405fa009505fa009505fa008c05fa
009505fa009505fa009505b9007205b9007207f600a207f600a207f600a2
060200950602009503ec009503ec009505fa009505fa009505fa009505fa
009105fa009505fa009505d100000487006f03be009b056900790490006a
04c4006805fa009505fa008a0417001d0449001d04b8003607a3000c0497
003f0497003f0497003f0497003f0497003f02d500e402d500e402d500e4
02d500e402cd00cc02cd00cc02cd00cc02d5002b02d5002b02d5002b02d5
002b02cd002302cd00aa02cd0023030000e4030d00e4032100e4032b00e4
031400e4031400e4031400e403000026030d002603210026032b00260314
0003031401580314000305db0087042d0024045c007604b200de04d500de
05ab00800913015b0a9b00b310a600ce17310159046e004e0541ff8805f1
ffb5045200000601ffb5061effb50624ffb505feffb506a9ffba06c7ffba
0771ffba0822ffba0bccffba052500f30516ff8f0516ff8f059f005a0587
00460544004605440046056b006902ff0039045a003904b1008704c10091
067400e6084600e60a6e00e607630087079c009109a200e60c4300e60a15
00870a7700910cd000e6104000e604cf007a04db0087067400e6084600e6
07990091079c009109a200e60c4300e60a4900910a72008c0cd000e61040
00e6051100280516003106740015096e00d8050e00280516003106740084
0846007c0533002805160031067400840846007c077b009505e200950675
006e057f004202ed00c805b2007c05fa009505fa009505fa009505fa0095
05fa009505e3009505e3009505fa009505e3009505fa009505fa009505fa
009505fa009504db009504280095071e009505c2009505c2009506830095
073d0095073e008505870046059a00de04fe009504fe009504fe009505d8
007c09d300e609d3045909d304590497ff880497ff880497ff880497ff88
0497ff8805b600de05b60046073e007c0544005205b6004605b600460562
00640558006e056b00750544005205440052054400460544005205a7006e
05a7006e0544004605440052054400460544005205c5002005c5000505c5
002005c500050957005a095700730816008205c6008206ce007805c8008c
05fa009505fa009505fa009505ca009605ca009606b40073041d0032041d
003205ab00800913015b10a600ce05ab00800913015b10a600ce0cc70087
0d520091143d00e604b1008704c10091084600e604b1008704c100910846
00e604b1008704c10091084600e604b1008704c10091084600e604b10002
04c10013084600a704b1008704c10091084600e604b1008704c100910846
00e604b1001804c10022084600e604b1008704c10091084600e604b10087
04c10091084600e60696008806960088084600e604b1008704c100910846
00e604b1008704c10091084600e604b1008704c10091084600e604b10087
04c10091084600e604b1008704c10091084600e6051400a002e000a007a2
00950377005105fa009505fa009505fa00950266009605200014052000be
05e2009505e2009505fa009505fa009505e3009505fa009505fa009508ac
009505fa009105fa004b05fa009105fa009505fa009105fa009505fa0091
05fa009505fa009505fa0095060200950602009505fa009505fa009505fa
009505fa00950982009505fa009505fa009505fa009505fa009505fa00ac
05fa009505fa00ac05fa009505fa009505fa009505fa009505fa009505fa
009505fa0095057300a005c200950607009502ff003904e6007a06ab0032
0564003204b100780473007304dd007304b1007805040067052500f30525
ff9c0000fd940321000004890000078900000e6f00000296000003210000
04890000078900000e6f00000000fd9404430000046e000004230085046e
00a80556005a04900047099b0064047e0055046e005504960055046e0051
046e006e046e006e0487006e046e006904bc00410648007205f7008204fc
001307620024062f0025064b007905c10049070b000e06300017053a0077
04600068075f00160632001d053300790452006a07a500240640002507b7
0079067f006a04ff0079046a004003d5007902eafff3046e004203b10042
0572007904bf004605090079023c0022023c004f0433006605f1007903f7
003404410077041c006904cd00120408ff730578006b0515006b054c005c
056500480510006b051b006704a6007a0515006b0690006b056d006e04d1
007a03e7007a061e007a05b70046053200610463002a051b0081053d0048
0526007505ce006b04c900860543000c050f008a0546006b04df007305e6
004d0515005705ba006b0546006b050d002004be008604f1006b04d70074
0424007a06300070058effdc053a008305e8003e069b0057045100520480
0074048f005f046a003d0464007203ae003d046a005205390044047e0072
045c00440229005e0694004404370075045d0045046a005204390070047b
005f04760094046b0055020e000d04570005034400270477005f0270001c
069b00570421006e048c005f046b005504680055069b0057046a0052045b
00740301006b069b00570478000c043f0075056a0067052c003d08c20055
08d5005508c7005508bf00550a37004901c5006901c5004701ae0015019b
000601a4006d021c00b6019a0025022600160000fb9d02a8007808000060
0800006005a70048047c007d054e0076054e007a0667007503f8007007ea
0016043c005e04410066043f0068034f00220471001e06b5001d04c3005e
04c3006a058d006503a4005e0703001d03db005003e80048039400210349
004101b400150319004001b9004004db004e0353004e03500047029b0056
021c002e0274001d023b0007057effaa0a2f0025053d0025056c002404b6
ffac08820025047700250479002504e3ffae08f400240496002404c00024
0637004c0637004c06c9005d04f8007904f80079074c00620a73003704d4
00160b910079056b005a06d3003c093c002805b6009207d0001e0616007c
07a300950356007c05b5000005b5000007fb00de057700820494003a06dc
00b606af027e06af027e06af021906af021906af011306af011306af00a0
06af00a006af00a006af00a006af00a006af00a006af00a006af00a006af
00a006af00a006af00a006af00a006af00a006af00a006af00a006af00a0
06af00a006af00a006af00a006af00a006af01fd06af00a006af00a006af
00a006af00a006af011306af011306af011306af011306af027506af0088
06af008806af008806af008806af008806af008806af008806af008806af
008806af008806af035806af008806af008806af008806af008806af0088
06af008806af008806af008806af035806af035806af008808b5008806af
01f606af01f606af021906af021906af01f606af01f606af021906af0219
06af004e06af004e06af00a006af00a006af004e06af004e06af004e06af
004e06af00a006af00a006af004e06af00a006af00a006af00a006af00a0
07c300a007c3019d07c3002507c3019d07c3002506af00a006af00a006af
00a007fb00de00>
<00000000000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c0000015c0000015c0000015c0000015c0000015c0000
015c0000015c0000015c0000015c0000015c0000015c0000015c0000015c
0000015c0000015c000001b0000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
020400000204000002040000020400000204000002040000020400000204
000002040000020400000204000002040000020400000204000002040000
02040000020400000204000100001dbe00da002d0097000600020010002f
0086000009a401c0000300010000000e00ae000000030000000000640000
0000000300000007007600640001000000000000003200da000100000000
00030012010c00010000000000040012011e000100000000000600120130
0001000000000007003b014200030001040900000064017d000300010409
0001002401e10003000104090002000e0205000300010409000300240213
00030001040900040024023700030001040900060024025b000300010409
00070076027f00a9002000320030003100370020004d006900630072006f
0073006f0066007400200043006f00720070006f0072006100740069006f
006e002e00200041006c006c002000720069006700680074007300200072
0065007300650072007600650064002e00430061006d0062007200690061
00200069007300200061002000740072006100640065006d00610072006b
0020006f006600200074006800650020004d006900630072006f0073006f
00660074002000670072006f007500700020006f006600200063006f006d
00700061006e006900650073002ea92032303137204d6963726f736f6674
20436f72706f726174696f6e2e20416c6c20726967687473207265736572
7665642e55505458524a2b43616d627269614d61746855505458524a2b43
616d627269614d61746855505458524a2b43616d627269614d6174684361
6d6272696120697320612074726164656d61726b206f6620746865204d69
63726f736f66742067726f7570206f6620636f6d70616e6965732e00a900
2000320030003100370020004d006900630072006f0073006f0066007400
200043006f00720070006f0072006100740069006f006e002e0020004100
6c006c002000720069006700680074007300200072006500730065007200
7600650064002e00550050005400580052004a002b00430061006d006200
7200690061004d0061007400680052006500670075006c00610072005500
50005400580052004a002b00430061006d0062007200690061004d006100
74006800550050005400580052004a002b00430061006d00620072006900
61004d00610074006800550050005400580052004a002b00430061006d00
62007200690061004d00610074006800430061006d006200720069006100
200069007300200061002000740072006100640065006d00610072006b00
20006f006600200074006800650020004d006900630072006f0073006f00
660074002000670072006f007500700020006f006600200063006f006d00
700061006e006900650073002e0000>
<b9002001feb40918014a20b801fab40918014a20b801f9b40918014a20b8
01f8b40918014a20b801f7b40918014a20b801f6b40918014a20b801f0b4
0918014a20b801efb40918014a20b801eeb40918014a20b801edb4091801
4a20b801ecb40918014a20b801ebb40918014a20b801e6b40918014a20b8
01e5b40918014a20b801e4b40918014a20b801e3b40918014a20b801e2b4
0918014a20b801e1b40918014a20b801e0b40918014a20b801d3b4091801
4a20b801d2b40918014a20b801d1b40918014a20b801cfb40918014a20b8
01ceb40918014a20b801cdb40918014a20b801ccb40918014a20b801a0b4
0918014a20b8018fb40918014a20b8018eb40918014a20b8018ab4091801
4a20b80188b40918014a20b80187b40918014a20b80186b40918014a20b8
015bb40918014a20b8015ab40918014a20b80159b40918014a20b80158b4
0918014a20b80154b40918014a20b80150b40918014a20b8014cb4091801
4a20b8014bb40918014a20b8014ab40918014a20b80136b40918014a20b8
0130b40918014a20b8012fb40918014a20b8012db40918014a20b8012cb4
0918014a20b80109b40918014a20b80107b40918014a20b8010540ff0918
014a20f40918014a20f20918014a20f10918014a20f00918014a20ef0918
014a20ed0918014a20ec0918014a20ea0918014a20e50918014a20e40918
014a20e30918014a20e10918014a20de0918014a20da0918014a20d80918
014a20d30918014a20cd0918014a20cc0918014a20ca0918014a20c90918
014a20c80918014a20c60918014a20c40918014a20c20918014a20c00918
014a20bf0918014a20bd0918014a20b30918014a20b10918014a20af0918
014a20a50918014a20a40918014a20a00918014a208e0918014a208d0918
014a208c0918014a208b0918014a208a0918014a20890918014a20850918
014a20840918014a2083091801403e4a20800918014a207f0918014a207e
0918014a207d0918014a20620918014a20510918014a20500918014a2048
0918014a20420918014a200e0918014a0f41630441001f0441002f044100
3f0441004f0441005f0441006f0441007f0441008f0441009f044100af04
4100bf044100cf0441000d005f03ea0001008003f4009003f400a003f400
b003f400c003f400d003f400e003f400f003f40008002f0433003f043300
4f0433005f0433006f0433007f0433008f0433009f043300af043300bf04
33000a001f0434002f0434003f0434004f0434005f0434006f0434007f04
34000700cf042300df042300ef04230003000f0423001f0423003f042300
5f0423009f0423402305f0e201b0fdc0fd02c0fdd0fde0fdf0fd04d0fde0
fdf0fd03c0ffd0ffe0fff0ff0470410a0425000100c0042500d0042500e0
042500f00425400c04e0bef0be02e0bef0be020f41110421003f04210002
001002580001000f025800e002580002000f040a0001000f0408b4010f26
010f411b04070001000f04060001007f02170001000f029c001f029c002f
029c003f029c004f029c005f029c000600df029c00ef029c00ff029c4053
03dfe016171cd4d516171c7b7c161b7b7c19d1d216171c767716171c6d70
16171c6c6f16171c6b6e161b6b6e7f721a747514151c676a14151c666914
151c6568141b656885711a1973167a431921794319211941310292009902
920002001c0292002c029200020299029a029b000c028d028e028f000c02
8a028b028c000c001b0299008b02990002000f0299009f029900bb029900
db0299000402a5028b02a7000d029f029a02a1000d029c028e029e000dff
e8028eb2142339b9ffe8029ab2142339411a0282027d0008002b0281027c
0005002b027e027a0004002b027d027a0004002b027a02570005002b0277
02670005002b02670257b2052b20b80270b21b2039bd027202570004002b
026e0257b2042b20b80257b331333909414102710019027100aa025700b8
025700040069027100da025700e802570003028402790006002b02800279
0004002b027f02790008002b027b02790008002b027902560006002b0278
02660000002b027602660008002b027502660008002b027302660008002b
026602560006002b027402560000002b027302560000002b026f0256b207
2b29415002560001008602560001025d025e025f000c025102520253000c
024e024f0250000c000b024e000b0251000a025d003b024e005902510076
02510075025d009b024e00b5025d00d9024e000a0269024f026b000d0263
025e0265000d026002520262000d0269003c0263003c0260003c025d003c
0251003c024e003c0244023c0005002b024302110002002b0240023c0005
002b023e02110004002b023d0211b2042b464115023c00010046023c00c6
023c0002023b02110007002b023902110006002b023702110004002b0221
0211b2072b20b80233b21316394116022f02110004002b022e0211000400
2b022d02110005002b022c02110004002b022b02110004002b022a0211b2
052b474142021100010005021100a502110002003b0233004b0233006402
11007402110004024202100007002b024102100005002b023f0210000200
2b023a02100007002b023802100007002b023602100007002b0235021000
07002b022002100007002b023402100005002b023102100005002b023002
100007002b022902100007002b02280210b2072b8a416e02100001001a02
1000b902320002021702180219000c020b020c020d000c02080209020a00
0c000b0208000b020b000a0217003b02080059020b0076020b0075021700
9b020800b5021700d90208000a022302090225000d021d0218021f000d02
1a020c021c000d0223003c021d003c021a003c0217003c020b003c020800
3c0153014d0002002b014e014d0002002b0156015c0004002b0155015c00
04002b0157015c0002002b01da01d4000a002b01d801d4000a002b01e501
e00005002b01e101e00005002b01e001eb0005002b01ef01eb0002002b01
ec01ebb2052b40b801ebb2090a39b9ffc00104b2313139b9ffc00104b21b
2039b8ffc0b4c71f203940b80103b22c2c39ba010301000100b21f2223b9
01030100b3c01e1e23ba010301000100b21d1d23b901030100b3c01c1c23
ba010301000100b21b1b23b901030100b3c0141a23b901030100b3800b13
23b901030100b340090a23b901020101b340508b23b901010100b340508b
23410a01020100004f001f01010100004f001fffc00100b2505539b9ffc0
0100b323233940b80100b71d1e3940e81b1b39b8ffc0b4e724253956b801
08401301ddd8052b3bd64bd60240b00b0d39c1c0052bb8ffc040379f1313
39409c2f30399c9a012b9b9a052b9a91042ba999042b9992032b40c52c31
399291032b889198910209631863c7630320630d0f39b8fff0b4471f2539
cbb8010a401c019895012b379e019695022b1897262a3917970110953f40
39d99501bc0136012c0003002b0130b2cd042bb8012fb2cc042bb8012db2
cd032bb8012cb2cd042bbc014c014a0003002b014ab27f052bb9015b0154
b2042b0f41190154001f01540002018601880002002b018701880004002b
018901880004002b0188018f0003002b018e018f0004002b018fb385052b
3f410c01a0000101ce01cc0003002b01d201cc0006002b01d101ccb2062b
40b80107b2323239b80107b2af032bb8ffc0b3de1e2039b8ffc04011dc18
1a39c9ca032bcac8042b40c8212239b8ffc0b3c8151739b8ffc0b3c62425
39b8ffc0b3c6161a39b8ffc04023bf2d31395051032b40511b1b39e5cc04
2be4e3032b40e32a2a39cdcc052b40cc424439b8ffc0b3cc272739b8ffc0
b7cc171a39c2ea012bb80109b2da032bb8ffc04033ea252539dfea0140c4
1b1d39b3b1052bb1c0052b40c03d3d39c0af042bd3af052baf7d052b20da
121639c5bd01208e01108e01b8ffc0b38b363839b8ffc0b38b272b39b8ff
c040328b171a398c8d052b8d8a042b898a052b8a7f052bf4ef032bf2ef05
2bf180022bf0a0042bef85052b40ec32343940ec1b1d39b8ffc0b3a05152
39b8ffc0b3a0454739b8ffc0b3a0383c39b8ffc0400ba02c3139dfa001a0
80022bb8ffc0b394313139b8ffc040d480181a39817f012b7e7d052b7d7f
052bed7f052bd87f017f85251f8885012b8785012b8485052b8385052b29
8539854985036685014685013685012685011b3715183615153515123415
0f33150c3215093115063015032f15002e15f9fa0f20f930f90226270e28
270f2a2b0e2c2b0f22230e24230f1e1f0e201f0f00051005023c3d0e0b3c
743c993c030f10110c090a0b0c0607080c0304050c0001020c0603641f70
2a010f2a010b0f4b0f020b003b0044037403ab00db0f060b000b030b0f3b
003b0959035b0976039b009b09990fd9000cb9010b010c402a0f1b011d0d
18071a0d1510170d1204140d2ff96ff99ff9a0f9cff9d0f9063ff940f9af
f9b0f9e0f90500b8010bb22ff92fba010b003f010b403004fb3cf93cf73c
f53c2c3c2a3c283c263c243c223c203c1e3c1b3c183c153c123c0f3c093c
063c033c003c035050335401b0124b004b5442b013014b004b5342b0332b
4bb8032052b0322b4bb009505b58b101018e59b0332bb00288b8010054b0
0488b8020054b012435a5b58b80119b101018e851bb900010100b04b6085
8d592b2b1d42b0644b5358b20380801d4259b0324b5358b20390901d4259
004bb03251b01b23422b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
7374752b2b2b2b2b73747573742b2b2b2b2b2b732b732b2b2b2b2b2bb128
2645b02a4561b02c4560442b2b732b2b2b2b2b2b2b2b2b2b2b0173737373
742b2b2b2b2b742b2b2b2b2b2b2b742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b7475732b2b2b2b2b2b2b2b732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b732b2b2b2b2b2b732b2b2b012b2b2b2b2b0074
2b742b2b742b732b2b74742b2b2b2b2b2b2b2b2b2b2b732b742b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b002b2b2b2b2b2b2b2b2b2b2b2b2b
002b2b2b2b2b2b2b2b2b732b2b2b0173742b2b2b2b2b2b2b2b2b2b2b2b2b
007374752b2b2b2b2b2b2b2b2b2b2b73742b2b2b2b2b002b2b2b2b2b2b2b
2b2b732b2b2b0173742b2b2b2b2b2b2b2b2b2b2b2b2b0073742b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b73742b2b2b0173742b2bb018b03f4b53422b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2bb101322b4bb0505242b002435c4bb064
524bb01e505b60b01a23424bb0c8524bb036505bb00e2342007374737373
73737373747373747375737374757373747373737373b100024354b10202
4354b1060243545b5b58416301fe006401fa006401f9006401f8006401f7
006401f6006401f0006401ef006401ee006401ed006401ec006401eb0064
01e6006401e5006401e4006401e3006401e2006401e1006401e0006401d3
006401d2006401d1006401cf006401ce006401cd006401cc006401a00064
018f0064018e0064018a0064018800640187006401860064015b0064015a
006401590064015800640154006401500064014c0064014b0064014a0064
0136006401300064012f0064012d0064012c006401090064010700640105
406964f464f264f164f064ef64ed64ec64ea64e564e464e364e164de64da
64d864d364cd64cc64ca64c964c864c664c464c264c064bf64bd64b364b1
64af64a564a464a0648e648d648c648b648a64896485648464836480647f
647e647d64626451645064486442640e642b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b59
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b00>
[517 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
4 348 4666 <000100b4fe3c032c05a5000d0011b500070b0a0304002f332f33012fcd31
3001101217072400111000251706020161e1e718fedbfec8013901241bea
e101fafea2fe3a4d4d4d01fd016a016901ff4d4d4dfe4100>CDAAAA+CambriaMath AddT42Char 
4 0 0 <000400be0000048605540028002c00300034004b4025152f3428292c002c
1d0b312e342c0b2e2e0b2c3404353600292b30331213130e18182e310300
3fcd322fcd322f3fddd6cd3211120117392f2f2f2f10cd10cd113310cd32
10ddc631300135343e02373e0335342623220e02072335363633321e0215
140e02070e031515171523350111211101112111023706162a2417261b0f
413e2030241909603c894346633e1c0f243c2c20261507129001fcfd0603
61fc3801e71616252a3527192f3339234b521424321e821e2e1d33462926
3e3d462d212c27281c066ea1a1fee4049afb6604f7faac055400>CDAAAA+CambriaMath AddT42Char 
CDAAAA+CambriaMath /CharStrings get begin
/parenleft 4666 def
end
CDAAAA+CambriaMath /Encoding get
dup 40 /parenleft put
pop
end
%ADOEndSubsetFont
/IRVPGU+CambriaMath /CDAAAA+CambriaMath findfont ct_VMDictPut
/IRVPGU+CambriaMath*1 
[40{/.notdef}rp /parenleft 215{/.notdef}rp]
IRVPGU+CambriaMath nf
IRVPGU+CambriaMath*1 [8.04 0 0 -8.04 0 0 ]msf
118.154 90.1953 mo
(\()sh
%ADOBeginSubsetFont: ADAAAA+CambriaMath-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (ADAAAA+CambriaMath)
%%Title: (ADAAAA+CambriaMath Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /ADAAAA+CambriaMath def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-1475 -2464 2868 3117} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 7614 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B6472030318CD4127C796377DABFD8006FC8CD7AAF1086964
F20EE651118638C13AC909581621FA1FBAC552E6A16F7B4972529EBE8A80E782
DD8AB05FDEEBDFC49979639D0FF68DCB6E7F422169AA9A2DB1DEF4F4B413623F
5F563C56D612D674F82D41A71448843BD967EEE7B9B5E5851CDE54BA3652F7BD
EAFCDD43D27FDE0DE42D02A7D2B502434D5DE03C37B40825A9A0E097F17F7836
8B6C52A18DA8C4E8168AC56AD15BCF0B69C17FC31C7A04A95D974197259FB36A
E72A5300CDD86C2372DFF50F7695D6D8E6898504FD1B1E5E543A89FFBE60F42D
9B97A8DA995D7DC487489AC6073B6078ACF7C0324D45E66DA26D3EFF3411DA7F
D9C5DE33005> |
1876 <001C60D8A8C9B7876E744F4C06163AFDD9E9C14CFB43302889E42E0875
F108D0DA19D09A427AD4AAF19F7BF37E7877ADDDF87E364AA91FD690598EDBAA
44A9C2B69ACF0AC9DAF686C797A3599CF7FF2C92E0A713A72315DC9FCCA12A18
9000BC02EB2E7DFEFF112BBC2F54F4E49363BD3624F281336E87A8BBEA6655C3
DD93B629DFB7728AC5DADBE4EF1A3199A7E53936D05892FC627FF8E89691CA51
62F58D7E770487EE813D19FCAFDC99FCAD13A7DF313DE21CE702A622C634A14F
F7B24269725E3AF54F6D307156D6F6ABF0F8783DD10BE37CDFC85D88F25C927A
A98E78896A19D956059C874B1ED92A4F23AC09D37A34143A5A8A94EE11851CE9
EB8F392CEE174F0DA39B0A199F750222A8797CF4A2220B5528A1E0F481AB6CDB
3304B3ECE40012487B9EB7D71AB20C526CA003BC188EEC3DE434A838D0BFA6D4
7E4CA471E534E06757E8ED5A67FEDAD6ABB1D5375B63FF0EB69C787D5E091256
D6F8D5A92A0467D46B7465E1B184890316201A291649AC6AA82B5144E48D8E15
5EE957B55EB44FAC33B86B96C51F5B> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /ADAAAA+CambriaMath-Identity-H /Identity-H 0 [/ADAAAA+CambriaMath] ct_ComposeFont pop end end
%ADOEndSubsetFont
/IRVPGV+CambriaMath /ADAAAA+CambriaMath-Identity-H findfont ct_VMDictPut
IRVPGV+CambriaMath [8.04 0 0 -8.04 0 0 ]msf
121.515 90.1953 mo
(\007T)sh
%ADOBeginSubsetFont: CDAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IRVPGU+CambriaMath gcheck setglobal} if
4 236 481 <00010018feec014300e8000d003cb0852b58401206b2c00d40090d480d06
070d02b10b0b0f0e1112392fe1c6c632002f2b1aec31301b400906b2c00d
40090d480d00182f2b1aec30315925161514060607273e0235342701350e
30695c36332e1407e84644467473453d304d624a4c4a>IRVPGU+CambriaMath AddT42Char 
IRVPGU+CambriaMath /CharStrings get begin
/comma 481 def
end
IRVPGU+CambriaMath /Encoding get
dup 44 /comma put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IRVPGU+CambriaMath*1 
[40{/.notdef}rp /parenleft 3{/.notdef}rp /comma 211{/.notdef}rp]
IRVPGU+CambriaMath nf
IRVPGU+CambriaMath*1 [8.04 0 0 -8.04 0 0 ]msf
126.074 90.1953 mo
(,)sh
%ADOBeginSubsetFont: ADAAAA+CambriaMath-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/ADAAAA+CambriaMath 1 GetGlyphDirectory
1877 <001C60D8A8C9B7EB08620DE1BA1334BAD0AAE06F1D092A42F1123B2BD1
D0B0B284AB1493982A42B8315248F987328F62D3E77561F626C59F69C6D4DF3C
5C90863152145938F9708415339AC9F1E32031F92E20DD1DB92820BB8DD5918F
35FA2916422178605937B224FB33C5E645404BBF39FA4EB86BFCB675E2D4B9E3
2938F7510ED8BE0C19319B6466515998D55A3F2563C9A39ED972CAB7BB3492B7
A421367F75A62C1113E45CD4AA744619DC5327FCE89D437531F758C88A0457E7
33E52007F7C3D6BB5BB7901C8FE2166540D93EA50745F6FB40FE48DF0AB7D9E1
B9D82FE288B8A14147ACF01F11A718E85D0B13E5> |
!
end
end end
%ADOEndSubsetFont
IRVPGV+CambriaMath [8.04 0 0 -8.04 0 0 ]msf
128.952 90.1953 mo
(\007U)sh
1 /1 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: CDAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IRVPGU+CambriaMath gcheck setglobal} if
4 432 4667 <00010026fe3c029e05a5000d0011b507000b0a0304002f332f33012fcd31
30011002273704001110000527361201f1e0eb1b01240139fec8fedb18e7
e101fa015201bf4d4d4dfe01fe97fe96fe034d4d4d01c600>IRVPGU+CambriaMath AddT42Char 
IRVPGU+CambriaMath /CharStrings get begin
/parenright 4667 def
end
IRVPGU+CambriaMath /Encoding get
dup 41 /parenright put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IRVPGU+CambriaMath*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma 211{/.notdef}rp]
IRVPGU+CambriaMath nf
IRVPGU+CambriaMath*1 [8.04 0 0 -8.04 0 0 ]msf
133.631 90.1953 mo
(\))sh
126.191 81.089 mo
128.491 77.8165 li
129.309 78.3916 li
127.009 81.6641 li
126.191 81.089 li
130.216 75.3622 mo
132.516 72.0896 li
133.335 72.6647 li
131.034 75.9372 li
130.216 75.3622 li
134.242 69.6353 mo
136.542 66.3628 li
137.36 66.9378 li
135.06 70.2103 li
134.242 69.6353 li
138.267 63.9084 mo
140.567 60.6359 li
141.385 61.2109 li
139.085 64.4834 li
138.267 63.9084 li
142.292 58.1815 mo
144.592 54.909 li
145.41 55.4841 li
143.11 58.7566 li
142.292 58.1815 li
146.317 52.4547 mo
148.618 49.1821 li
149.436 49.7572 li
147.136 53.0297 li
146.317 52.4547 li
150.343 46.7278 mo
152.643 43.4553 li
153.461 44.0303 li
151.161 47.3028 li
150.343 46.7278 li
154.368 41.0009 mo
156.668 37.7284 li
157.486 38.3035 li
155.186 41.576 li
154.368 41.0009 li
158.393 35.274 mo
160.694 32.0016 li
161.512 32.5767 li
159.211 35.8491 li
158.393 35.274 li
162.419 29.5472 mo
164.719 26.2747 li
165.537 26.8498 li
163.237 30.1223 li
162.419 29.5472 li
.808743 .585351 0 0 cmyk
f
1 lc
false sadj
166.386 29.1192 mo
166.641 24.4092 li
162.295 26.2442 li
@
125.16 81.82 mo
129.16 81.82 li
129.16 82.82 li
125.16 82.82 li
125.16 81.82 li
132.16 81.82 mo
136.16 81.82 li
136.16 82.82 li
132.16 82.82 li
132.16 81.82 li
139.16 81.82 mo
143.16 81.82 li
143.16 82.82 li
139.16 82.82 li
139.16 81.82 li
146.16 81.82 mo
150.16 81.82 li
150.16 82.82 li
146.16 82.82 li
146.16 81.82 li
153.16 81.82 mo
157.16 81.82 li
157.16 82.82 li
153.16 82.82 li
153.16 81.82 li
160.16 81.82 mo
164.16 81.82 li
164.16 82.82 li
160.16 82.82 li
160.16 81.82 li
167.16 81.82 mo
171.16 81.82 li
171.16 82.82 li
167.16 82.82 li
167.16 81.82 li
174.16 81.82 mo
178.16 81.82 li
178.16 82.82 li
174.16 82.82 li
174.16 81.82 li
181.16 81.82 mo
185.16 81.82 li
185.16 82.82 li
181.16 82.82 li
181.16 81.82 li
188.16 81.82 mo
192.16 81.82 li
192.16 82.82 li
188.16 82.82 li
188.16 81.82 li
195.16 81.82 mo
199.16 81.82 li
199.16 82.82 li
195.16 82.82 li
195.16 81.82 li
202.16 81.82 mo
204.147 81.82 li
204.147 82.82 li
202.16 82.82 li
202.16 81.82 li
f
200.147 79.8198 mo
204.147 82.3198 li
200.147 84.8198 li
@
140.76 85.68 mo
136.262 85.68 li
140.76 85.68 li
133.78 85.68 mo
126.36 85.68 li
133.78 85.68 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 198.36 ]ct
[10.2902 -6.96976 4.83616 7.14013 126.009 112.703 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 49 
/H 34 
/M[49 0 0 -34 0 34 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 49 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 49 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 49 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 49 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&V#UL7hZ36J!*mnO!+!tP!!MlnhuEd-^X<)_+Ka2pr;ZjAVpPJE
k0a51T>0Xkkl:aBXjR1MLo8Z$!CZ)L!7h,O-,74D!!4.BXl09O!!41=VpYSFk0j;3S\Lch!8dbXLTQH_
!!7nQLY)V)!!5=G6IYu;!l)K"e,TROXfW`4!9jIc!N2h=dfBF1df9MR^U1?JeGo\BXehlD!!>fjU8$ZJ
nGiXQWiFPK"/<P\JCFQ$Nid)4pAj%M",s-nCX`=d:?E&tg&V!Ms1eR[e,]NNruBMgs/5l;mJuDMs5qc1
!\(n!df9IlXfVTQ!!4:@W6t\Gk2QI3!!6TDWm^qL:9Bo4!!5roQ1k:6!!25!df9H1^PUYEq>^SBX`Mqk
!dLV`df9Fnjr*Rejo>Ib^KAqb!h?A^df9E:VZKBh!7_&MIHJrX!k5p'iW/NL!iW4Odf9HGV_$9s!P[^h
!8[\W^V;)D!!9:)*8(>h!!90u*Rb#gk0a52^V:NN!9X=`XfW,_!!9*s&CUU\k2lZm!!9pM#1EPRXfV`e
!:TsiVl'[H!<;3\!&r2/c<\_0ZA#'<PbWN?C!L#0:sN@l?-Z9l?-Za$BsNGfPa%qg_.h2#c;;g9"TSOf
2O-1c5'A;PBO5"Y8;9<n2O,n[2O-1c/sS>[2O-IL;eTKDBLmkAPr=m[Q+I.H!!/JigAq!K!6ijk!l)Ja
df9HOXUjk#jT#@\V[q5Vs5q`0!5AQL,gu_pXfWPk!!90u*9I7h!<;30!!9XE2q%a.W3%TH!87DSV5Gln
!!0grg]7'K!j04>df9H>X[^b>!h#rWnGqSL!Ia+Y!!81qMUVV.!-t\gdf9GnVfU;e![-VDkQ'rL!b&jD
df9GEXdIQ;!`,_ZquG=K!Tn7J!!4O_^Y]%a!!44DXj[7O+/c'c!<;3Q!9!n[-bmDBe,TRlXfWSp!<)s#
+/c"WdfBF1rr@Q~>

%%EndBinary
grestore
np
140.76 85.68 mo
140.76 85.68 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 198.36 ]ct
[.630011 -.42672 .42672 .630011 140.289 112.527 ]ct
snap_to_device
<<
/T 1
/W 3 
/H 3 
/M[3 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!~>
<~!!!!!!!!!!!!~>
<~!!!!!!!!!!!!~>
<~!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
gsave
136.262 85.68 mo
133.78 85.68 li
136.262 85.68 li
clp
133.78 85.68 mo
136.262 85.68 li
133.78 85.68 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 198.36 ]ct
[2.31004 -1.56464 1.13792 1.68003 133.325 112.649 ]ct
snap_to_device
<<
/T 1
/W 11 
/H 8 
/M[11 0 0 -8 0 8 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
1 dict begin
clipsave
0 0 0 0 rectclip
IRVPGU+CambriaMath*1 [8.03999 0 0 -8.03999 0 0 ]msf
133.631 90.1953 mo
(\))sh
cliprestore
/T1_Text{eclp cmyk
IRVPGU+CambriaMath*1 [8.03999 0 0 -8.03999 0 0 ]msf
133.631 90.1953 mo
(\))sh
T1_grestore}def
T1_gsave
T1_path 134.25 84.031 .218987 -.25 .5 -.25 .25 -.25 .5 -.174713 .25 .174713 .25 .25 .25 .5 .25 .25 .25 .5 .25 .25 .25 .5 -.25 .25 -.25 .25 -.5 .25 -.25 .25 -.5 -.25 -.25 -.25 -.25 -.5 -.25 -.25 -.25 -.25 -.25 -.5 -.218987 -.5 ()
0 0 0 1 T1_Text
end
grestore
140.76 85.68 mo
140.76 85.68 li
140.76 82.82 li
140.76 85.68 li
140.76 81.82 mo
140.76 81.82 li
140.76 69.96 li
140.76 81.82 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 198.36 ]ct
[7.77014 -5.26288 7.53872 11.1302 133.081 117.716 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 37 
/H 53 
/M[37 0 0 -53 0 53 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 37 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 37 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 37 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 37 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&
qZ)3JJcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&V>u,
~>

%%EndBinary
grestore
np
140.76 82.82 mo
140.76 82.82 li
140.76 81.82 li
140.76 82.82 li
.807843 .584314 0 0 cmyk
f
126.36 85.68 mo
126.36 85.68 li
126.36 82.82 li
126.36 85.68 li
126.36 81.82 mo
126.36 81.82 li
126.36 81.2078 li
126.36 81.82 li
126.36 80.8484 mo
126.36 78.96 li
126.36 80.8484 li
126.36 78.96 mo
126.36 78.96 li
126.36 69.96 li
126.36 78.96 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 198.36 ]ct
[7.77014 -5.26288 7.53872 11.1302 118.659 117.681 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 37 
/H 53 
/M[37 0 0 -53 0 53 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 37 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 37 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 37 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 37 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&
qZ)3JJcLB&JcLB&JcLB&JcLB&JcLB&JcLB&[/^A$Z/juN8E'UQ/Uk(6IP(?ql2Uu"+X83T&`E]l!<`N+
iW&tBqu6Y[l2^\]!+buR!+b-j!$;"d!$:/#qZu6_$=a&5j3uK;r;U4+k5YfQd*&S_SZ^/_5NVqI'e(I-
!!4Gq($,Dr#R:5-!<rhu!;?Hp]`6mfc2uo']]K1qLsW1#Pldu4Lun[<,:WKi!@]8U!!**+r;Zp"!!iVf
!!<3#d/D5kdJs7/!!:NoQi30NRF'=C!<4MF!<4M@!:g-i#l=W%#lO`@c<\^lc<\_$c;;elc<\_0ZA#'<
PbWNps53e#+Q*4Oc;;elPr=m[Pr=mcPqJ=[Pr=mkG#N'\?>)mHd&R&0#--%HPqJ=[l2Uf!!%IdF!@]&O
!!*-,qZ$X&!p0Ih@fQAde'm@Us'k*j#sZe[Y+;,dcHnfP!:9af'e(I-!!4Ao($,Dr#R:5-!<rhj!!&5[
rrA8I!;lfsAGa^RAE3^j*r@Ad*od7t#iYgf8?q7:Yt4fnjo>Q:I^HJ2/`Ha6&KrAD+VEZ5!s&N-!UKf<
!.k3&!.k3&!2]aH~>

%%EndBinary
grestore
np
126.36 78.96 mo
126.36 78.96 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 198.36 ]ct
[.630011 -.42672 .42672 .630011 125.846 119.246 ]ct
snap_to_device
<<
/T 1
/W 3 
/H 3 
/M[3 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!!!!!~>
<~!!!!!!!!!!!!~>
<~!!!!!!!!!!!!~>
<~!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
126.36 81.2078 mo
126.36 81.2078 li
126.36 80.8484 li
126.36 81.2078 li
.807843 .584314 0 0 cmyk
f
126.36 82.82 mo
126.36 82.82 li
126.36 81.82 li
126.36 82.82 li
f
140.76 69.96 mo
135.236 69.96 li
140.76 69.96 li
134.704 69.96 mo
126.36 69.96 li
134.704 69.96 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 198.36 ]ct
[10.2902 -6.96976 4.83616 7.14013 125.913 128.391 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 49 
/H 34 
/M[49 0 0 -34 0 34 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 49 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 49 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 49 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 49 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&
rW%NMJcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcNjlJ,~>

%%EndBinary
grestore
np
135.236 69.96 mo
134.704 69.96 li
135.236 69.96 li
.807843 .584314 0 0 cmyk
f
1 /1 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: ADAAAA+CambriaMath-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/ADAAAA+CambriaMath 1 GetGlyphDirectory
2016 <001C60D8A8C9B7E897E220AFCE761851CBD10C1C0369C2CA87855DC16E
A0A268B2D891D26C4D332799236888B2A5C6CAA7089911243F614AF0D5790B8C
0E0BC684C6BBD57EAFABBBB790DB617F1D69E065A8F54D9AA4D16AB18350B782
8ED6FA6E3C6400C9F1991CB498DE6A353144D455E25791DBE80ABFA55BF76CC0
DAAC33FA552FA91AC6BDDAD1B762F0F5F7850F071679187BA4AC33821CE2C163
4E7F1C3326723B43C4F19A897BC994D6AA5DF5EA4C804488EE06D565C8D740C2
8B87> |
!
end
end end
%ADOEndSubsetFont
IRVPGV+CambriaMath [8.04 0 0 -8.04 0 0 ]msf
133.348 81.0807 mo
(\007\340)sh
150.653 47.3206 mo
149.237 46.0706 147.318 45.7506 145.989 46.5436 cv
146.302 46.8196 li
145.025 46.8066 li
145.05 45.7156 li
145.363 45.9916 li
146.692 45.1986 148.611 45.5186 150.027 46.7686 cv
150.653 47.3206 li
.808743 .585351 0 0 cmyk
ef
150.925 52.0125 mo
152.059 50.7275 151.801 48.5865 150.329 47.0575 cv
152.159 48.4245 152.798 50.7705 151.757 52.2985 cv
151.694 52.3915 151.625 52.4805 151.551 52.5645 cv
150.925 52.0125 li
.941924 .752804 .069337 .00515755 cmyk
ef
150.488 47.508 mo
149.636 46.7548 148.592 46.3605 147.639 46.3612 cv
147.085 46.3613 146.563 46.4926 146.118 46.7583 cv
145.989 46.5436 li
146.155 46.3561 li
146.468 46.6321 li
146.972 47.0765 li
144.77 47.054 li
144.813 45.1727 li
145.529 45.8041 li
145.363 45.9916 li
145.235 45.777 li
145.767 45.4599 146.38 45.3091 147.013 45.3092 cv
148.103 45.31 149.254 45.7528 150.193 46.5812 cv
150.819 47.1331 li
151.914 48.1001 152.505 49.3937 152.507 50.6103 cv
152.507 51.3893 152.259 52.1405 151.739 52.7299 cv
151.574 52.9174 li
150.572 52.0347 li
150.738 51.8472 li
151.168 51.3591 151.38 50.7351 151.381 50.057 cv
151.381 49.116 150.965 48.0772 150.149 47.231 cv
150.51 46.8842 li
151.406 47.8162 151.88 48.9694 151.881 50.057 cv
151.881 50.839 151.632 51.5905 151.113 52.178 cv
150.925 52.0126 li
151.091 51.8251 li
151.717 52.3771 li
151.551 52.5646 li
151.364 52.3992 li
151.796 51.9091 152.006 51.2859 152.007 50.6103 cv
152.008 49.5575 151.485 48.3863 150.488 47.5081 cv
149.862 46.9561 li
149.009 46.2028 147.966 45.8085 147.013 45.8092 cv
146.459 45.8093 145.937 45.9407 145.492 46.2063 cv
145.335 46.2997 li
145.288 46.2585 li
145.281 46.5592 li
146.305 46.5696 li
146.302 46.8196 li
146.137 47.0071 li
145.824 46.7311 li
145.567 46.5045 li
145.861 46.3289 li
146.393 46.0119 147.006 45.8611 147.639 45.8611 cv
148.729 45.8619 149.88 46.3048 150.819 47.1332 cv
150.488 47.508 li
1 .816159 .15967 .0319219 cmyk
f
150.24 57.12 mo
144.261 57.12 li
150.24 57.12 li
150.24 57.12 mo
150.24 57.12 li
150.24 47.3277 li
150.24 47.3277 li
150.24 57.12 li
143.038 57.12 mo
135 57.12 li
143.038 57.12 li
135 57.12 mo
135 57.12 li
135 41.4 li
135 57.12 li
150.24 46.6227 mo
150.24 46.6227 li
150.24 41.4 li
150.24 46.6227 li
150.24 41.4 mo
135 41.4 li
150.24 41.4 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 198.36 ]ct
[18.2703 -12.3749 12.3749 18.2703 127.24 146.18 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 87 
/H 87 
/M[87 0 0 -87 0 87 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 87 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 87 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 87 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 87 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&
kQ$27JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&
JcP!7JcLB&JcLB&JcLB&PlLi`III6M!!/?ua8k<%!Kq,t!!-L:pAhW%rkAGTd/`#'riH0-XoJU&Vl4#(
Y5nRa!!_'Uf)Pq_[(jAKYlFt.!)KDmXc0F`"AkhjVi'C4ci=1LVrm,4\,c4&"CJpYWWK@("AQ##QiZFO
`rH6;Vl,d\_#Wm'!p8W^XT/G`^V?N4!5AL9/Zl.8a8kB'""pOMMlcs\k2oA3!4Mq1:VXY`ciDr'"$`oi
>cn&15c:Mc!!'2&!p8VJf)XD&")Yff.^/mV!!$0(XWXbH"'VV#+l<:H!!38bk-b9a!!8e-T</(pMlhp"
!6>-ALo6'C!:Tsi7-6n>!!=L]^Er:J_#OQVXfWS_!9jIc*2f\TXT8C`oDlE%!hR/tblHr-q>^SSXbX"Y
!f*\.irI7&!^c$4])_F&""M(#!j2M*+K_aHlN"j'"!OS?!Q+p'!<;2_!!9OB=n2R*!!9"!8BLqn!!8mm
8Z_snWoj'V[/^8Y^S9*Uh#ILlXcBL`")Ffn!3Q;'&*?X>!7h,O-,74!!<)s"*3H?F!!41=Vr%L"!<;2j
!;6Bo^V;.u!!9:)*p3OD!!9*s+27gE!<;2_!!918@I=-2!!8Oi:<!:t!!8F`:TXTtD<CHj\Gu\g^Q-P=
i;`q$Xa.#K!ct8`quF#&!ZL2De,\2&!a*4>XT/>j!Nhlo!!5]hRG._i!!251ZN0k&!]Rm'XT/DQXf14Z
bQ%\qVkps)o)JgR^9%A:-,74Z!6"p>*3H?Z!:9af*N,p=!<;3N!58F7'u.N)!9O7_&$;t9!!3_0W:p;#
!<;3-!9aFX!!3A>^T@J;"Keff!6G3B"K/02!:U!gk,eUb#/@q>!5\^;"KefE!9sOc"K/0!!<;3Q!4r44
'u.N,!94%\&$;t9!!3_0W;6M#!<;30!8IPU-,73s!!4.BXfVR)*N,pj!7V#Kk-4pb!!5*o\#fW3/$5c.
!6tQG/>o>S!;-<mk.[qt!a*4>k5`O&!_0;^^B!^&!_B5WX8i:`II7*N!!8"lO2_1`!!75DH*%&JEi40T
!4`(2)<N-f!9!nZWkVuE!!8Oi:Ab*t!!8F`:XfBu!!-s!X8i78!P^(c!!9:)+56eE!!9*s+L;(F!<;2`
!!4I]^Yo1;!!4.BXgnH)!!41=VlTmuk3)fb!!7\cU;-cs!!6r<Ni`9_CT!-[!5AL8&*?X-!9X=`[(fbG
!!9"!8G3%n!!8mm8^7>"!;QTqWogD`""M(#!os@)!!=@GXT?'7o)Jk9Vl'Qt!<;3H!5nj=T"gi5!:0[e
MQMZ9!!7qRL@G8W!!5LL4im]d!!=L]^Ep#_!unAE*;BNC!!=4=V]F+ah>mT<XT/Ep^RtK*YQ+`_Xc(a1
fDku/VhhJU!rtaO7'6LlD83h8h#Pk'"'Mb.+LM4G!!?E&V]i2C!X%TIirI:'"&H\HE4Z,B!!>HfX^&"/
"$ic^?0VF.!!;<F"Mt0,!!>6r^S7k2""gXWNpm%`!!=jPVi/Urjo>JFk"MrY"CJpYWWMnp\Gub,Xf[rk
cN)o("AYkmPl\#f!p8W^r;a2)"CeaQ^S0-Wg].IQUogbYY5eW#U8J$iMm!*`!N5)B9%s?r!<0_5FKtoF
!<0)#?`jA2Vl-J%i;h.'roO1b\H)='!N:FJ!!/?ujoEF%!Kq-1!:Kmg@18G%JcP!7JcLB&JcLB&JcLB&
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&kQ$27JcLB&JcLB&
JcLB&JcLB&JcLB&JcLB&rr@Q~>

%%EndBinary
grestore
np
144.261 57.12 mo
143.038 57.12 li
144.261 57.12 li
.807843 .584314 0 0 cmyk
f
150.24 47.3277 mo
150.24 47.3277 li
150.24 46.6227 li
150.24 47.3277 li
1 .815686 .160784 .0313726 cmyk
f
1 /1 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: ADAAAA+CambriaMath-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2023 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/ADAAAA+CambriaMath 1 GetGlyphDirectory
2030 <001C60D8A8C9B658EF05BA72A98748FF03A34A47ADA9B01A2BB2D9BA73
6A5FB6A9B442B6836A8F429A2A88B1C34B7D099CC9D74A5292F7F18F8F3EF600
B6B850664E79326CD2C58D1591E26D837D752715D5C538C086E8732DB1DA173D
5151A65B21C4BBED933E56199E61B6BCBCD643E108A75FD0708FF047735F568A
27A124E6A830DB320A3453A9F42673253645AE702878AD82ED40FF23D36F890C
596BB43DD260D113B32151E265BAA6BDCD760CA7591D189A739B6D> |
!
end
end end
%ADOEndSubsetFont
IRVPGV+CambriaMath [8.04 0 0 -8.04 0 0 ]msf
142.067 52.52 mo
(\007\356)sh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 /1 ]]
] del_res
/IRVPGU+CambriaMath*1 uf
/IRVPGU+CambriaMath uf
/CDAAAA+CambriaMath uf
/IRVPGV+CambriaMath-Identity-H uf
/IRVPGV+CambriaMath /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
